
C:\Users\Charly\Atollic\TrueSTUDIO\ARM_workspace_7.1\MicrofonoRevB\Debug\MicrofonoRevB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  7 .bss          000029d0  20000068  20000068  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002a38  20002a38  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012671  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f1b  00000000  00000000  00032709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009fcd  00000000  00000000  00035624  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d68  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001190  00000000  00000000  00040360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006c14  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000045ea  00000000  00000000  00048104  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004c6ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b38  00000000  00000000  0004c76c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037d0 	.word	0x080037d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080037d0 	.word	0x080037d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000274:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000280:	f000 f894 	bl	80003ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	4621      	mov	r1, r4
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f84e 	bl	800032c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000290:	2000      	movs	r0, #0
 8000292:	bd10      	pop	{r4, pc}
 8000294:	20000000 	.word	0x20000000

08000298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000298:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <HAL_Init+0x30>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002a2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002aa:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b4:	2003      	movs	r0, #3
 80002b6:	f000 f827 	bl	8000308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ffd8 	bl	8000270 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002c0:	f002 f919 	bl	80024f6 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd08      	pop	{r3, pc}
 80002c8:	40023c00 	.word	0x40023c00

080002cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <HAL_IncTick+0xc>)
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	200000a0 	.word	0x200000a0

080002dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002dc:	4b01      	ldr	r3, [pc, #4]	; (80002e4 <HAL_GetTick+0x8>)
 80002de:	6818      	ldr	r0, [r3, #0]
}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	200000a0 	.word	0x200000a0

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff fff6 	bl	80002dc <HAL_GetTick>
  uint32_t wait = Delay;
 80002f0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f2:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 80002f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002f6:	bf18      	it	ne
 80002f8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002fa:	f7ff ffef 	bl	80002dc <HAL_GetTick>
 80002fe:	1b40      	subs	r0, r0, r5
 8000300:	42a0      	cmp	r0, r4
 8000302:	d3fa      	bcc.n	80002fa <HAL_Delay+0x12>
  {
  }
}
 8000304:	b003      	add	sp, #12
 8000306:	bd30      	pop	{r4, r5, pc}

08000308 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800030a:	68d3      	ldr	r3, [r2, #12]
 800030c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000310:	041b      	lsls	r3, r3, #16
 8000312:	0c1b      	lsrs	r3, r3, #16
 8000314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000318:	0200      	lsls	r0, r0, #8
 800031a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000322:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000324:	60d3      	str	r3, [r2, #12]
 8000326:	4770      	bx	lr
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <HAL_NVIC_SetPriority+0x60>)
 800032e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000330:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000334:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000336:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800033c:	2c04      	cmp	r4, #4
 800033e:	bf28      	it	cs
 8000340:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	2d06      	cmp	r5, #6

  return (
 8000344:	f04f 0501 	mov.w	r5, #1
 8000348:	fa05 f404 	lsl.w	r4, r5, r4
 800034c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000350:	bf8c      	ite	hi
 8000352:	3b03      	subhi	r3, #3
 8000354:	2300      	movls	r3, #0

  return (
 8000356:	400c      	ands	r4, r1
 8000358:	409c      	lsls	r4, r3
 800035a:	fa05 f303 	lsl.w	r3, r5, r3
 800035e:	3b01      	subs	r3, #1
 8000360:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000362:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000364:	ea42 0204 	orr.w	r2, r2, r4
 8000368:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	bfaf      	iteee	ge
 800036e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000372:	f000 000f 	andlt.w	r0, r0, #15
 8000376:	4b06      	ldrlt	r3, [pc, #24]	; (8000390 <HAL_NVIC_SetPriority+0x64>)
 8000378:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	bfa5      	ittet	ge
 800037c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000380:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e000ed14 	.word	0xe000ed14

08000394 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000394:	0942      	lsrs	r2, r0, #5
 8000396:	2301      	movs	r3, #1
 8000398:	f000 001f 	and.w	r0, r0, #31
 800039c:	fa03 f000 	lsl.w	r0, r3, r0
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_NVIC_EnableIRQ+0x14>)
 80003a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100

080003ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ac:	3801      	subs	r0, #1
 80003ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003b2:	d20a      	bcs.n	80003ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	21f0      	movs	r1, #240	; 0xf0
 80003bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e010 	.word	0xe000e010
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003da:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003dc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003de:	bf0c      	ite	eq
 80003e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003e4:	f022 0204 	bicne.w	r2, r2, #4
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80003f0:	4770      	bx	lr

080003f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80003f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80003f4:	f7ff fffc 	bl	80003f0 <HAL_SYSTICK_Callback>
 80003f8:	bd08      	pop	{r3, pc}

080003fa <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80003fa:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80003fc:	4604      	mov	r4, r0
 80003fe:	b168      	cbz	r0, 800041c <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000400:	7903      	ldrb	r3, [r0, #4]
 8000402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000406:	b913      	cbnz	r3, 800040e <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000408:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800040a:	f002 f8a5 	bl	8002558 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800040e:	2302      	movs	r3, #2
 8000410:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000412:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000414:	2301      	movs	r3, #1
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000416:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000418:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800041a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 800041c:	2001      	movs	r0, #1
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800041e:	bd10      	pop	{r4, pc}

08000420 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000420:	4770      	bx	lr

08000422 <HAL_DAC_IRQHandler>:
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000422:	6803      	ldr	r3, [r0, #0]
 8000424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000426:	0491      	lsls	r1, r2, #18
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8000428:	b510      	push	{r4, lr}
 800042a:	4604      	mov	r4, r0
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800042c:	d50e      	bpl.n	800044c <HAL_DAC_IRQHandler+0x2a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800042e:	2204      	movs	r2, #4
 8000430:	7102      	strb	r2, [r0, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8000432:	6902      	ldr	r2, [r0, #16]
 8000434:	f042 0201 	orr.w	r2, r2, #1
 8000438:	6102      	str	r2, [r0, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800043a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000446:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000448:	f7ff ffea 	bl	8000420 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800044c:	6823      	ldr	r3, [r4, #0]
 800044e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	d511      	bpl.n	8000478 <HAL_DAC_IRQHandler+0x56>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8000454:	2204      	movs	r2, #4
 8000456:	7122      	strb	r2, [r4, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8000458:	6922      	ldr	r2, [r4, #16]
 800045a:	f042 0202 	orr.w	r2, r2, #2
 800045e:	6122      	str	r2, [r4, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000460:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
    
    /* Error callback */ 
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800046c:	4620      	mov	r0, r4
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800046e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
  }
}
 8000470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
    
    /* Error callback */ 
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000474:	f000 b822 	b.w	80004bc <HAL_DACEx_DMAUnderrunCallbackCh2>
 8000478:	bd10      	pop	{r4, pc}

0800047a <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800047a:	7943      	ldrb	r3, [r0, #5]
 800047c:	2b01      	cmp	r3, #1
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800047e:	b570      	push	{r4, r5, r6, lr}
 8000480:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000484:	d018      	beq.n	80004b8 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000486:	6806      	ldr	r6, [r0, #0]
  
  /* Process locked */
  __HAL_LOCK(hdac);
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000488:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800048a:	6835      	ldr	r5, [r6, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800048c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000490:	4093      	lsls	r3, r2
 8000492:	ea25 0403 	bic.w	r4, r5, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000496:	e891 0028 	ldmia.w	r1, {r3, r5}
 800049a:	432b      	orrs	r3, r5
 800049c:	4093      	lsls	r3, r2
 800049e:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80004a0:	6033      	str	r3, [r6, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80004a2:	6833      	ldr	r3, [r6, #0]
 80004a4:	21c0      	movs	r1, #192	; 0xc0
 80004a6:	fa01 f202 	lsl.w	r2, r1, r2
 80004aa:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80004ae:	2301      	movs	r3, #1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80004b0:	6032      	str	r2, [r6, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80004b2:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80004b4:	2300      	movs	r3, #0
 80004b6:	7143      	strb	r3, [r0, #5]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80004b8:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Return function status */
  return HAL_OK;
}
 80004ba:	bd70      	pop	{r4, r5, r6, pc}

080004bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80004bc:	4770      	bx	lr
	...

080004c0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004c0:	6803      	ldr	r3, [r0, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80004c8:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80004cc:	2118      	movs	r1, #24
 80004ce:	3a10      	subs	r2, #16
 80004d0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80004d6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80004d8:	bf88      	it	hi
 80004da:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80004dc:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80004de:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80004e0:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80004e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	080037e8 	.word	0x080037e8

080004ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80004f0:	f7ff fef4 	bl	80002dc <HAL_GetTick>
 80004f4:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d064      	beq.n	80005c4 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80004fa:	2300      	movs	r3, #0
 80004fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000500:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000502:	2302      	movs	r3, #2
 8000504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000508:	6813      	ldr	r3, [r2, #0]
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	6803      	ldr	r3, [r0, #0]
 8000514:	07d9      	lsls	r1, r3, #31
 8000516:	d508      	bpl.n	800052a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000518:	f7ff fee0 	bl	80002dc <HAL_GetTick>
 800051c:	1b40      	subs	r0, r0, r5
 800051e:	2805      	cmp	r0, #5
 8000520:	d9f6      	bls.n	8000510 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000522:	2320      	movs	r3, #32
 8000524:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000526:	2003      	movs	r0, #3
 8000528:	e051      	b.n	80005ce <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800052a:	6803      	ldr	r3, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800052e:	6861      	ldr	r1, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000530:	69a5      	ldr	r5, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000532:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000534:	68a3      	ldr	r3, [r4, #8]
 8000536:	4319      	orrs	r1, r3
 8000538:	68e3      	ldr	r3, [r4, #12]
 800053a:	4319      	orrs	r1, r3
 800053c:	6923      	ldr	r3, [r4, #16]
 800053e:	4319      	orrs	r1, r3
 8000540:	6963      	ldr	r3, [r4, #20]
 8000542:	430b      	orrs	r3, r1
 8000544:	69e1      	ldr	r1, [r4, #28]
 8000546:	432b      	orrs	r3, r5
 8000548:	430b      	orrs	r3, r1
 800054a:	6a21      	ldr	r1, [r4, #32]
 800054c:	430b      	orrs	r3, r1
 800054e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000552:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000554:	bf01      	itttt	eq
 8000556:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8000558:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 800055a:	4331      	orreq	r1, r6
 800055c:	430b      	orreq	r3, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800055e:	6003      	str	r3, [r0, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000560:	6943      	ldr	r3, [r0, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000562:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000564:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000568:	ea43 0302 	orr.w	r3, r3, r2

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800056c:	d11c      	bne.n	80005a8 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800056e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000570:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000572:	4313      	orrs	r3, r2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000574:	b1c1      	cbz	r1, 80005a8 <HAL_DMA_Init+0xbc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000576:	b925      	cbnz	r5, 8000582 <HAL_DMA_Init+0x96>
  {
    switch (tmp)
 8000578:	2a01      	cmp	r2, #1
 800057a:	d00b      	beq.n	8000594 <HAL_DMA_Init+0xa8>
 800057c:	d312      	bcc.n	80005a4 <HAL_DMA_Init+0xb8>
 800057e:	2a02      	cmp	r2, #2
 8000580:	e00f      	b.n	80005a2 <HAL_DMA_Init+0xb6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000582:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000586:	d109      	bne.n	800059c <HAL_DMA_Init+0xb0>
  {
    switch (tmp)
 8000588:	2a03      	cmp	r2, #3
 800058a:	d80d      	bhi.n	80005a8 <HAL_DMA_Init+0xbc>
 800058c:	e8df f002 	tbb	[pc, r2]
 8000590:	021c0a1c 	.word	0x021c0a1c
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000594:	f1b1 7fc0 	cmp.w	r1, #25165824	; 0x1800000
 8000598:	d106      	bne.n	80005a8 <HAL_DMA_Init+0xbc>
 800059a:	e015      	b.n	80005c8 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800059c:	2a02      	cmp	r2, #2
 800059e:	d913      	bls.n	80005c8 <HAL_DMA_Init+0xdc>
 80005a0:	2a03      	cmp	r2, #3
 80005a2:	d101      	bne.n	80005a8 <HAL_DMA_Init+0xbc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80005a4:	01ca      	lsls	r2, r1, #7
 80005a6:	d40f      	bmi.n	80005c8 <HAL_DMA_Init+0xdc>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80005a8:	6143      	str	r3, [r0, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80005aa:	4620      	mov	r0, r4
 80005ac:	f7ff ff88 	bl	80004c0 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80005b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80005b2:	233f      	movs	r3, #63	; 0x3f
 80005b4:	4093      	lsls	r3, r2
 80005b6:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005b8:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80005ba:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005bc:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80005be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80005c4:	2001      	movs	r0, #1
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80005cc:	2001      	movs	r0, #1
 80005ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f010803f 	.word	0xf010803f

080005d8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80005d8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d003      	beq.n	80005e8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80005e4:	2001      	movs	r0, #1
 80005e6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80005e8:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80005ea:	2305      	movs	r3, #5
 80005ec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80005f0:	6813      	ldr	r3, [r2, #0]
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80005f8:	2000      	movs	r0, #0
}
 80005fa:	4770      	bx	lr

080005fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000602:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000604:	4b59      	ldr	r3, [pc, #356]	; (800076c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000606:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000608:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 800060a:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800060c:	2308      	movs	r3, #8
 800060e:	4093      	lsls	r3, r2
 8000610:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000612:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000614:	d00c      	beq.n	8000630 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000616:	6801      	ldr	r1, [r0, #0]
 8000618:	6808      	ldr	r0, [r1, #0]
 800061a:	0740      	lsls	r0, r0, #29
 800061c:	d508      	bpl.n	8000630 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800061e:	6808      	ldr	r0, [r1, #0]
 8000620:	f020 0004 	bic.w	r0, r0, #4
 8000624:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000626:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000628:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <HAL_DMA_IRQHandler+0x174>)
 8000632:	4093      	lsls	r3, r2
 8000634:	421e      	tst	r6, r3
 8000636:	d008      	beq.n	800064a <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000638:	6821      	ldr	r1, [r4, #0]
 800063a:	6949      	ldr	r1, [r1, #20]
 800063c:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800063e:	bf41      	itttt	mi
 8000640:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000642:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000644:	f043 0302 	orrmi.w	r3, r3, #2
 8000648:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800064a:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <HAL_DMA_IRQHandler+0x178>)
 800064c:	4093      	lsls	r3, r2
 800064e:	421e      	tst	r6, r3
 8000650:	d008      	beq.n	8000664 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000652:	6821      	ldr	r1, [r4, #0]
 8000654:	6809      	ldr	r1, [r1, #0]
 8000656:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000658:	bf41      	itttt	mi
 800065a:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800065c:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 800065e:	f043 0304 	orrmi.w	r3, r3, #4
 8000662:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000664:	2310      	movs	r3, #16
 8000666:	fa03 f202 	lsl.w	r2, r3, r2
 800066a:	4216      	tst	r6, r2
 800066c:	d017      	beq.n	800069e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	0709      	lsls	r1, r1, #28
 8000674:	d513      	bpl.n	800069e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000676:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	0350      	lsls	r0, r2, #13
 800067c:	d504      	bpl.n	8000688 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	0319      	lsls	r1, r3, #12
 8000682:	d508      	bpl.n	8000696 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000684:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000686:	e007      	b.n	8000698 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800068c:	bf5e      	ittt	pl
 800068e:	681a      	ldrpl	r2, [r3, #0]
 8000690:	f022 0208 	bicpl.w	r2, r2, #8
 8000694:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000698:	b10b      	cbz	r3, 800069e <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800069a:	4620      	mov	r0, r4
 800069c:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800069e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80006a0:	2220      	movs	r2, #32
 80006a2:	408a      	lsls	r2, r1
 80006a4:	4216      	tst	r6, r2
 80006a6:	d03b      	beq.n	8000720 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	06c6      	lsls	r6, r0, #27
 80006ae:	d537      	bpl.n	8000720 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80006b0:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80006b2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80006b6:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80006b8:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80006ba:	d119      	bne.n	80006f0 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80006bc:	f022 0216 	bic.w	r2, r2, #22
 80006c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80006ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80006cc:	b90a      	cbnz	r2, 80006d2 <HAL_DMA_IRQHandler+0xd6>
 80006ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80006d0:	b11a      	cbz	r2, 80006da <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f022 0208 	bic.w	r2, r2, #8
 80006d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006da:	233f      	movs	r3, #63	; 0x3f
 80006dc:	408b      	lsls	r3, r1
 80006de:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80006e0:	2300      	movs	r3, #0
 80006e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80006ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80006ee:	e037      	b.n	8000760 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80006f0:	0350      	lsls	r0, r2, #13
 80006f2:	d504      	bpl.n	80006fe <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	0319      	lsls	r1, r3, #12
 80006f8:	d40e      	bmi.n	8000718 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80006fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006fc:	e00d      	b.n	800071a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000704:	d108      	bne.n	8000718 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000706:	6819      	ldr	r1, [r3, #0]
 8000708:	f021 0110 	bic.w	r1, r1, #16
 800070c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800070e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000710:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000714:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800071a:	b10b      	cbz	r3, 8000720 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800071c:	4620      	mov	r0, r4
 800071e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000722:	b303      	cbz	r3, 8000766 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000724:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000726:	07da      	lsls	r2, r3, #31
 8000728:	d519      	bpl.n	800075e <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800072a:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800072c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800072e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000732:	6813      	ldr	r3, [r2, #0]
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 800073a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800073e:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8000742:	9b01      	ldr	r3, [sp, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	429f      	cmp	r7, r3
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	d302      	bcc.n	8000752 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800074c:	6813      	ldr	r3, [r2, #0]
 800074e:	07db      	lsls	r3, r3, #31
 8000750:	d4f7      	bmi.n	8000742 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000752:	2300      	movs	r3, #0
 8000754:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000758:	2301      	movs	r3, #1
 800075a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800075e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000760:	b10b      	cbz	r3, 8000766 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000762:	4620      	mov	r0, r4
 8000764:	4798      	blx	r3
    }
  }
}
 8000766:	b003      	add	sp, #12
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	00800001 	.word	0x00800001
 8000774:	00800004 	.word	0x00800004

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800077c:	4f6a      	ldr	r7, [pc, #424]	; (8000928 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000930 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000784:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000934 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078a:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000790:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000792:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000794:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000796:	ea34 0303 	bics.w	r3, r4, r3
 800079a:	f040 80bd 	bne.w	8000918 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800079e:	684d      	ldr	r5, [r1, #4]
 80007a0:	f025 0a10 	bic.w	sl, r5, #16
 80007a4:	f1ba 0f02 	cmp.w	sl, #2
 80007a8:	d114      	bne.n	80007d4 <HAL_GPIO_Init+0x5c>
 80007aa:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80007ae:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007b2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007b6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007be:	230f      	movs	r3, #15
 80007c0:	fa03 f30b 	lsl.w	r3, r3, fp
 80007c4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007c8:	690b      	ldr	r3, [r1, #16]
 80007ca:	fa03 f30b 	lsl.w	r3, r3, fp
 80007ce:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80007d0:	f8c9 3020 	str.w	r3, [r9, #32]
 80007d4:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d8:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007dc:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007de:	fa09 f90b 	lsl.w	r9, r9, fp
 80007e2:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e6:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ea:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ee:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f2:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007f6:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80007fc:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fe:	d80f      	bhi.n	8000820 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000800:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000802:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000804:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000808:	fa06 f60b 	lsl.w	r6, r6, fp
 800080c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800080e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000810:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000812:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000816:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800081a:	4096      	lsls	r6, r2
 800081c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800081e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000820:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000822:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000826:	688b      	ldr	r3, [r1, #8]
 8000828:	fa03 f30b 	lsl.w	r3, r3, fp
 800082c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000830:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000832:	00eb      	lsls	r3, r5, #3
 8000834:	d570      	bpl.n	8000918 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	9303      	str	r3, [sp, #12]
 800083a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083e:	4b3b      	ldr	r3, [pc, #236]	; (800092c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000840:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000844:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000848:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800084c:	f022 0903 	bic.w	r9, r2, #3
 8000850:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000854:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000858:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800085c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800085e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000864:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000868:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800086c:	260f      	movs	r6, #15
 800086e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000872:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000874:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000878:	d01c      	beq.n	80008b4 <HAL_GPIO_Init+0x13c>
 800087a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800087e:	4298      	cmp	r0, r3
 8000880:	d01a      	beq.n	80008b8 <HAL_GPIO_Init+0x140>
 8000882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000886:	4298      	cmp	r0, r3
 8000888:	d018      	beq.n	80008bc <HAL_GPIO_Init+0x144>
 800088a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800088e:	4298      	cmp	r0, r3
 8000890:	d016      	beq.n	80008c0 <HAL_GPIO_Init+0x148>
 8000892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000896:	4298      	cmp	r0, r3
 8000898:	d014      	beq.n	80008c4 <HAL_GPIO_Init+0x14c>
 800089a:	4540      	cmp	r0, r8
 800089c:	d014      	beq.n	80008c8 <HAL_GPIO_Init+0x150>
 800089e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80008a2:	4298      	cmp	r0, r3
 80008a4:	d012      	beq.n	80008cc <HAL_GPIO_Init+0x154>
 80008a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008aa:	4298      	cmp	r0, r3
 80008ac:	bf14      	ite	ne
 80008ae:	2308      	movne	r3, #8
 80008b0:	2307      	moveq	r3, #7
 80008b2:	e00c      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008b4:	2300      	movs	r3, #0
 80008b6:	e00a      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e008      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008bc:	2302      	movs	r3, #2
 80008be:	e006      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008c0:	2303      	movs	r3, #3
 80008c2:	e004      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008c4:	2304      	movs	r3, #4
 80008c6:	e002      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008c8:	2305      	movs	r3, #5
 80008ca:	e000      	b.n	80008ce <HAL_GPIO_Init+0x156>
 80008cc:	2306      	movs	r3, #6
 80008ce:	fa03 f30a 	lsl.w	r3, r3, sl
 80008d2:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008d4:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008d8:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80008da:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008dc:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80008e0:	bf0c      	ite	eq
 80008e2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80008e4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80008e6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80008ea:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ee:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80008f2:	bf0c      	ite	eq
 80008f4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80008f6:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80008f8:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008fa:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fc:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000900:	bf0c      	ite	eq
 8000902:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000904:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000906:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800090a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800090e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000910:	bf54      	ite	pl
 8000912:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000914:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000916:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000918:	3201      	adds	r2, #1
 800091a:	2a10      	cmp	r2, #16
 800091c:	f47f af38 	bne.w	8000790 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000920:	b005      	add	sp, #20
 8000922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000926:	bf00      	nop
 8000928:	40013c00 	.word	0x40013c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40023800 	.word	0x40023800
 8000934:	40021400 	.word	0x40021400

08000938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000938:	b902      	cbnz	r2, 800093c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800093a:	0409      	lsls	r1, r1, #16
 800093c:	6181      	str	r1, [r0, #24]
 800093e:	4770      	bx	lr

08000940 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000940:	6943      	ldr	r3, [r0, #20]
 8000942:	4059      	eors	r1, r3
 8000944:	6141      	str	r1, [r0, #20]
 8000946:	4770      	bx	lr

08000948 <I2S_WaitFlagStateUntilTimeout.constprop.1>:
  * @param Flag: Flag checked
  * @param State: Value of the flag expected
  * @param Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, uint32_t State,
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	4604      	mov	r4, r0
 800094c:	460f      	mov	r7, r1
 800094e:	4615      	mov	r5, r2
                                                       uint32_t Timeout)
{
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fcc4 	bl	80002dc <HAL_GetTick>
 8000954:	4606      	mov	r6, r0
  
   /* Wait until flag is set to status*/
  while(((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	ea37 0202 	bics.w	r2, r7, r2
 800095e:	d101      	bne.n	8000964 <I2S_WaitFlagStateUntilTimeout.constprop.1+0x1c>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tickstart = HAL_GetTick();
  
   /* Wait until flag is set to status*/
  while(((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
 8000964:	1c6a      	adds	r2, r5, #1
 8000966:	d0f7      	beq.n	8000958 <I2S_WaitFlagStateUntilTimeout.constprop.1+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000968:	b93d      	cbnz	r5, 800097a <I2S_WaitFlagStateUntilTimeout.constprop.1+0x32>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800096a:	2301      	movs	r3, #1
 800096c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8000970:	2300      	movs	r3, #0
 8000972:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

        return HAL_TIMEOUT;
 8000976:	2003      	movs	r0, #3
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   /* Wait until flag is set to status*/
  while(((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800097a:	f7ff fcaf 	bl	80002dc <HAL_GetTick>
 800097e:	1b80      	subs	r0, r0, r6
 8000980:	4285      	cmp	r5, r0
 8000982:	d2e8      	bcs.n	8000956 <I2S_WaitFlagStateUntilTimeout.constprop.1+0xe>
 8000984:	e7f1      	b.n	800096a <I2S_WaitFlagStateUntilTimeout.constprop.1+0x22>

08000986 <HAL_I2S_TxCpltCallback>:
 8000986:	4770      	bx	lr

08000988 <HAL_I2S_RxCpltCallback>:
 8000988:	4770      	bx	lr

0800098a <HAL_I2S_ErrorCallback>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800098a:	4770      	bx	lr

0800098c <HAL_I2S_Init>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800098c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
  uint32_t tmp = 0U, i2sclk = 0U;

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 800098e:	4604      	mov	r4, r0
 8000990:	2800      	cmp	r0, #0
 8000992:	f000 8084 	beq.w	8000a9e <HAL_I2S_Init+0x112>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000996:	2502      	movs	r5, #2

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000998:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <HAL_I2S_Init+0x118>)
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800099a:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 800099e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 80009a0:	f001 fe2a 	bl	80025f8 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80009a4:	6822      	ldr	r2, [r4, #0]
 80009a6:	69d3      	ldr	r3, [r2, #28]
 80009a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80009ac:	f023 030f 	bic.w	r3, r3, #15
 80009b0:	61d3      	str	r3, [r2, #28]
  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80009b2:	6963      	ldr	r3, [r4, #20]
  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80009b4:	6215      	str	r5, [r2, #32]
  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80009b6:	2b02      	cmp	r3, #2
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 80009b8:	69d5      	ldr	r5, [r2, #28]

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80009ba:	d02c      	beq.n	8000a16 <HAL_I2S_Init+0x8a>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80009bc:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80009be:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80009c0:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80009c2:	bf14      	ite	ne
 80009c4:	2620      	movne	r6, #32
 80009c6:	2610      	moveq	r6, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80009c8:	2001      	movs	r0, #1
      /* Packet length is 16 bits */
      packetlength = 16U;
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80009ca:	2b20      	cmp	r3, #32
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80009cc:	bf98      	it	ls
 80009ce:	0076      	lslls	r6, r6, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80009d0:	f000 fe14 	bl	80015fc <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80009d4:	6923      	ldr	r3, [r4, #16]
 80009d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009da:	6963      	ldr	r3, [r4, #20]
 80009dc:	d10b      	bne.n	80009f6 <HAL_I2S_Init+0x6a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80009de:	68e1      	ldr	r1, [r4, #12]
 80009e0:	220a      	movs	r2, #10
 80009e2:	b109      	cbz	r1, 80009e8 <HAL_I2S_Init+0x5c>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80009e4:	00b6      	lsls	r6, r6, #2
 80009e6:	e000      	b.n	80009ea <HAL_I2S_Init+0x5e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80009e8:	00f6      	lsls	r6, r6, #3
 80009ea:	fbb0 f0f6 	udiv	r0, r0, r6
 80009ee:	4342      	muls	r2, r0
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	e005      	b.n	8000a02 <HAL_I2S_Init+0x76>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 80009f6:	210a      	movs	r1, #10
 80009f8:	fbb0 f0f6 	udiv	r0, r0, r6
 80009fc:	4348      	muls	r0, r1
 80009fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a02:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000a04:	220a      	movs	r2, #10
 8000a06:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000a0a:	f003 0101 	and.w	r1, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000a0e:	0209      	lsls	r1, r1, #8

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000a10:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8000a14:	e000      	b.n	8000a18 <HAL_I2S_Init+0x8c>
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8000a16:	2100      	movs	r1, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000a18:	1e9a      	subs	r2, r3, #2
 8000a1a:	2afd      	cmp	r2, #253	; 0xfd
 8000a1c:	d907      	bls.n	8000a2e <HAL_I2S_Init+0xa2>
    /* Set the default values */
    i2sdiv = 2U;
    i2sodd = 0U;

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000a1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff ffaf 	bl	800098a <HAL_I2S_ErrorCallback>
 8000a2c:	e037      	b.n	8000a9e <HAL_I2S_Init+0x112>
    return  HAL_ERROR;
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	6921      	ldr	r1, [r4, #16]
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	430b      	orrs	r3, r1

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000a36:	1d20      	adds	r0, r4, #4
    HAL_I2S_ErrorCallback(hi2s);
    return  HAL_ERROR;
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000a38:	6213      	str	r3, [r2, #32]

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000a3a:	c80b      	ldmia	r0, {r0, r1, r3}
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	69a3      	ldr	r3, [r4, #24]
 8000a40:	430b      	orrs	r3, r1
 8000a42:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000a44:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	b289      	uxth	r1, r1
 8000a4c:	430d      	orrs	r5, r1
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000a4e:	6a21      	ldr	r1, [r4, #32]
  /* Write to SPIx I2SCFGR */
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
  }
#else
  /* Write to SPIx I2SCFGR */
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8000a50:	61d5      	str	r5, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000a52:	2901      	cmp	r1, #1
 8000a54:	d11d      	bne.n	8000a92 <HAL_I2S_Init+0x106>
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000a56:	4914      	ldr	r1, [pc, #80]	; (8000aa8 <HAL_I2S_Init+0x11c>)
 8000a58:	6361      	str	r1, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000a5a:	4d14      	ldr	r5, [pc, #80]	; (8000aac <HAL_I2S_Init+0x120>)
 8000a5c:	4914      	ldr	r1, [pc, #80]	; (8000ab0 <HAL_I2S_Init+0x124>)
 8000a5e:	42aa      	cmp	r2, r5
 8000a60:	bf0c      	ite	eq
 8000a62:	460a      	moveq	r2, r1
 8000a64:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
    {
      tmp = I2S_MODE_SLAVE_RX;
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8000a68:	f430 7000 	bics.w	r0, r0, #512	; 0x200
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000a6c:	69d1      	ldr	r1, [r2, #28]
 8000a6e:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8000a72:	f021 010f 	bic.w	r1, r1, #15
 8000a76:	61d1      	str	r1, [r2, #28]
                                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8000a78:	f04f 0102 	mov.w	r1, #2
 8000a7c:	6211      	str	r1, [r2, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8000a7e:	69d1      	ldr	r1, [r2, #28]
    {
      tmp = I2S_MODE_SLAVE_RX;
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8000a80:	bf0c      	ite	eq
 8000a82:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8000a86:	2000      	movne	r0, #0
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8c:	4303      	orrs	r3, r0
 8000a8e:	430b      	orrs	r3, r1
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                         (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8000a90:	61d3      	str	r3, [r2, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a92:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8000a94:	2301      	movs	r3, #1
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000a96:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8000a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp = 0U, i2sclk = 0U;

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
  {
    return HAL_ERROR;
 8000a9e:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000ca5 	.word	0x08000ca5
 8000aac:	40003800 	.word	0x40003800
 8000ab0:	40003400 	.word	0x40003400

08000ab4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8000ab6:	6803      	ldr	r3, [r0, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8000abc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000ac0:	2a04      	cmp	r2, #4
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000ac2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8000ac4:	d138      	bne.n	8000b38 <I2S_IRQHandler+0x84>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000ac6:	9a01      	ldr	r2, [sp, #4]
 8000ac8:	07d1      	lsls	r1, r2, #31
 8000aca:	d518      	bpl.n	8000afe <I2S_IRQHandler+0x4a>
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	0652      	lsls	r2, r2, #25
 8000ad0:	d515      	bpl.n	8000afe <I2S_IRQHandler+0x4a>
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000ad2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000ad4:	1c91      	adds	r1, r2, #2
 8000ad6:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000ad8:	68d9      	ldr	r1, [r3, #12]
 8000ada:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8000adc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	b292      	uxth	r2, r2
 8000ae2:	8642      	strh	r2, [r0, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 8000ae4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8000ae6:	b292      	uxth	r2, r2
 8000ae8:	b94a      	cbnz	r2, 8000afe <I2S_IRQHandler+0x4a>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000aea:	6859      	ldr	r1, [r3, #4]
 8000aec:	f64f 729f 	movw	r2, #65439	; 0xff9f
 8000af0:	400a      	ands	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8000afa:	f7ff ff45 	bl	8000988 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000afe:	9b01      	ldr	r3, [sp, #4]
 8000b00:	0659      	lsls	r1, r3, #25
 8000b02:	d519      	bpl.n	8000b38 <I2S_IRQHandler+0x84>
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	0692      	lsls	r2, r2, #26
 8000b0a:	d515      	bpl.n	8000b38 <I2S_IRQHandler+0x84>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	f64f 729f 	movw	r2, #65439	; 0xff9f
 8000b12:	400a      	ands	r2, r1
 8000b14:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000b16:	2200      	movs	r2, #0
 8000b18:	9202      	str	r2, [sp, #8]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	9202      	str	r2, [sp, #8]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	9302      	str	r3, [sp, #8]
 8000b22:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff ff29 	bl	800098a <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8000b38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d138      	bne.n	8000bb2 <I2S_IRQHandler+0xfe>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000b40:	9b01      	ldr	r3, [sp, #4]
 8000b42:	079b      	lsls	r3, r3, #30
 8000b44:	d51a      	bpl.n	8000b7c <I2S_IRQHandler+0xc8>
 8000b46:	6822      	ldr	r2, [r4, #0]
 8000b48:	6853      	ldr	r3, [r2, #4]
 8000b4a:	0618      	lsls	r0, r3, #24
 8000b4c:	d516      	bpl.n	8000b7c <I2S_IRQHandler+0xc8>
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b50:	1c99      	adds	r1, r3, #2
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	6261      	str	r1, [r4, #36]	; 0x24
 8000b56:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8000b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	8563      	strh	r3, [r4, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8000b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b953      	cbnz	r3, 8000b7c <I2S_IRQHandler+0xc8>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000b66:	6851      	ldr	r1, [r2, #4]
 8000b68:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8000b76:	4620      	mov	r0, r4
 8000b78:	f7ff ff05 	bl	8000986 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	0719      	lsls	r1, r3, #28
 8000b80:	d517      	bpl.n	8000bb2 <I2S_IRQHandler+0xfe>
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	0692      	lsls	r2, r2, #26
 8000b88:	d513      	bpl.n	8000bb2 <I2S_IRQHandler+0xfe>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000b8a:	6859      	ldr	r1, [r3, #4]
 8000b8c:	f64f 725f 	movw	r2, #65375	; 0xff5f
 8000b90:	400a      	ands	r2, r1
 8000b92:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000b94:	2200      	movs	r2, #0
 8000b96:	9203      	str	r2, [sp, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000ba4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff feec 	bl	800098a <HAL_I2S_ErrorCallback>
    }
  }
}
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd10      	pop	{r4, pc}

08000bb6 <HAL_I2S_Receive>:
  * @note In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *       in continuous way and as the I2S is not disabled at the end of the I2S transaction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bb8:	4604      	mov	r4, r0
 8000bba:	461e      	mov	r6, r3
  uint32_t tmp1 = 0U;

  if((pData == NULL ) || (Size == 0U))
 8000bbc:	460d      	mov	r5, r1
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	d06b      	beq.n	8000c9a <HAL_I2S_Receive+0xe4>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d069      	beq.n	8000c9a <HAL_I2S_Receive+0xe4>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8000bc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d001      	beq.n	8000bd2 <HAL_I2S_Receive+0x1c>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000bce:	2002      	movs	r0, #2
 8000bd0:	e064      	b.n	8000c9c <HAL_I2S_Receive+0xe6>
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
  {
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000bd2:	6801      	ldr	r1, [r0, #0]
 8000bd4:	69cb      	ldr	r3, [r1, #28]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d001      	beq.n	8000be2 <HAL_I2S_Receive+0x2c>
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d101      	bne.n	8000be6 <HAL_I2S_Receive+0x30>
    {
      hi2s->RxXferSize  = (Size << 1U);
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	b292      	uxth	r2, r2
      hi2s->RxXferCount = (Size << 1U);
    }
    else
    {
      hi2s->RxXferSize  = Size;
 8000be6:	8622      	strh	r2, [r4, #48]	; 0x30
      hi2s->RxXferCount = Size;
 8000be8:	8662      	strh	r2, [r4, #50]	; 0x32
    }
    /* Process Locked */
    __HAL_LOCK(hi2s);
 8000bea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d0ed      	beq.n	8000bce <HAL_I2S_Receive+0x18>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State     = HAL_I2S_STATE_BUSY_RX;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Check if the I2S is already enabled */
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8000c02:	69cb      	ldr	r3, [r1, #28]
 8000c04:	0558      	lsls	r0, r3, #21
    {
      /* Enable I2S peripheral */
      __HAL_I2S_ENABLE(hi2s);
 8000c06:	bf5e      	ittt	pl
 8000c08:	69cb      	ldrpl	r3, [r1, #28]
 8000c0a:	f443 6380 	orrpl.w	r3, r3, #1024	; 0x400
 8000c0e:	61cb      	strpl	r3, [r1, #28]
    }

    /* Check if Master Receiver mode is selected */
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8000c10:	69cb      	ldr	r3, [r1, #28]
 8000c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c1a:	d10e      	bne.n	8000c3a <HAL_I2S_Receive+0x84>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	68cb      	ldr	r3, [r1, #12]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	688b      	ldr	r3, [r1, #8]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	9b00      	ldr	r3, [sp, #0]
 8000c2a:	e006      	b.n	8000c3a <HAL_I2S_Receive+0x84>
        HAL_I2S_ErrorCallback(hi2s);

        return HAL_ERROR;
      }

      (*pData++) = hi2s->Instance->DR;
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	f825 3b02 	strh.w	r3, [r5], #2
      hi2s->RxXferCount--;
 8000c32:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	8663      	strh	r3, [r4, #50]	; 0x32
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
    }

    /* Receive data */
    while(hi2s->RxXferCount > 0U)
 8000c3a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8000c3c:	b280      	uxth	r0, r0
 8000c3e:	b330      	cbz	r0, 8000c8e <HAL_I2S_Receive+0xd8>
    {
      /* Wait until RXNE flag is set */
      if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8000c40:	4632      	mov	r2, r6
 8000c42:	2101      	movs	r1, #1
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fe7f 	bl	8000948 <I2S_WaitFlagStateUntilTimeout.constprop.1>
 8000c4a:	b140      	cbz	r0, 8000c5e <HAL_I2S_Receive+0xa8>
      {
        /* Set the error code and execute error callback*/
        SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_TIMEOUT);
 8000c4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
        HAL_I2S_ErrorCallback(hi2s);
 8000c52:	4620      	mov	r0, r4
    {
      /* Wait until RXNE flag is set */
      if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
      {
        /* Set the error code and execute error callback*/
        SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_TIMEOUT);
 8000c54:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_I2S_ErrorCallback(hi2s);
 8000c56:	f7ff fe98 	bl	800098a <HAL_I2S_ErrorCallback>
        return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	e01e      	b.n	8000c9c <HAL_I2S_Receive+0xe6>
      }

      /* Check if an overrun occurs */
      if(__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	0652      	lsls	r2, r2, #25
 8000c64:	d5e2      	bpl.n	8000c2c <HAL_I2S_Receive+0x76>
      {
        /* Clear overrun flag */
        __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000c66:	9001      	str	r0, [sp, #4]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	9201      	str	r2, [sp, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	9301      	str	r3, [sp, #4]

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8000c70:	2501      	movs	r5, #1

      /* Check if an overrun occurs */
      if(__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
      {
        /* Clear overrun flag */
        __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000c72:	9b01      	ldr	r3, [sp, #4]

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8000c74:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8000c78:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

        /* Set the error code and execute error callback*/
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000c7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
        HAL_I2S_ErrorCallback(hi2s);
 8000c82:	4620      	mov	r0, r4

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);

        /* Set the error code and execute error callback*/
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000c84:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_I2S_ErrorCallback(hi2s);
 8000c86:	f7ff fe80 	bl	800098a <HAL_I2S_ErrorCallback>

        return HAL_ERROR;
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	e006      	b.n	8000c9c <HAL_I2S_Receive+0xe6>

      (*pData++) = hi2s->Instance->DR;
      hi2s->RxXferCount--;
    }

    hi2s->State = HAL_I2S_STATE_READY;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2s);
 8000c94:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8000c98:	e000      	b.n	8000c9c <HAL_I2S_Receive+0xe6>
{
  uint32_t tmp1 = 0U;

  if((pData == NULL ) || (Size == 0U))
  {
    return  HAL_ERROR;
 8000c9a:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}

08000ca0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s: I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s: I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8000ca6:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8000ca8:	4d58      	ldr	r5, [pc, #352]	; (8000e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x168>)
  * @param  hi2s: I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8000caa:	689a      	ldr	r2, [r3, #8]
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s: I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000cac:	b085      	sub	sp, #20
 8000cae:	4604      	mov	r4, r0
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8000cb0:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8000cb2:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x16c>)
 8000cb4:	42ab      	cmp	r3, r5
 8000cb6:	bf0c      	ite	eq
 8000cb8:	4611      	moveq	r1, r2
 8000cba:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8000cbe:	6889      	ldr	r1, [r1, #8]
 8000cc0:	9101      	str	r1, [sp, #4]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8000cc2:	69d9      	ldr	r1, [r3, #28]
 8000cc4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000cc8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000ccc:	d004      	beq.n	8000cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x34>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8000cce:	69d9      	ldr	r1, [r3, #28]
 8000cd0:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000cd4:	f040 809e 	bne.w	8000e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x170>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000cd8:	9a00      	ldr	r2, [sp, #0]
 8000cda:	0791      	lsls	r1, r2, #30
 8000cdc:	d51c      	bpl.n	8000d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x74>
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	0612      	lsls	r2, r2, #24
 8000ce2:	d519      	bpl.n	8000d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x74>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000ce4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ce6:	1c91      	adds	r1, r2, #2
 8000ce8:	8812      	ldrh	r2, [r2, #0]
 8000cea:	6261      	str	r1, [r4, #36]	; 0x24
 8000cec:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8000cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8000cf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cf8:	b292      	uxth	r2, r2
 8000cfa:	b96a      	cbnz	r2, 8000d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x74>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000cfc:	6859      	ldr	r1, [r3, #4]
 8000cfe:	f64f 725f 	movw	r2, #65375	; 0xff5f
 8000d02:	400a      	ands	r2, r1
 8000d04:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8000d06:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b92b      	cbnz	r3, 8000d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x74>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ffc4 	bl	8000ca0 <HAL_I2SEx_TxRxCpltCallback>
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000d18:	9b01      	ldr	r3, [sp, #4]
 8000d1a:	07df      	lsls	r7, r3, #31
 8000d1c:	d52c      	bpl.n	8000d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xd4>
 8000d1e:	6820      	ldr	r0, [r4, #0]
 8000d20:	493a      	ldr	r1, [pc, #232]	; (8000e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x168>)
 8000d22:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x16c>)
 8000d24:	4288      	cmp	r0, r1
 8000d26:	bf0c      	ite	eq
 8000d28:	461a      	moveq	r2, r3
 8000d2a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	0656      	lsls	r6, r2, #25
 8000d32:	d521      	bpl.n	8000d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xd4>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8000d34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d36:	1c95      	adds	r5, r2, #2
 8000d38:	62e5      	str	r5, [r4, #44]	; 0x2c
 8000d3a:	4288      	cmp	r0, r1
 8000d3c:	bf0c      	ite	eq
 8000d3e:	461d      	moveq	r5, r3
 8000d40:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
 8000d44:	68ed      	ldr	r5, [r5, #12]
 8000d46:	8015      	strh	r5, [r2, #0]
    hi2s->RxXferCount--;
 8000d48:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8000d50:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000d52:	b292      	uxth	r2, r2
 8000d54:	b982      	cbnz	r2, 8000d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xd4>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d56:	4288      	cmp	r0, r1
 8000d58:	bf18      	it	ne
 8000d5a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000d64:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8000d66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b92b      	cbnz	r3, 8000d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xd4>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000d72:	4620      	mov	r0, r4
 8000d74:	f7ff ff94 	bl	8000ca0 <HAL_I2SEx_TxRxCpltCallback>
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
    }

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	065d      	lsls	r5, r3, #25
 8000d7c:	d528      	bpl.n	8000dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x12c>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4922      	ldr	r1, [pc, #136]	; (8000e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x168>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x16c>)
 8000d84:	428b      	cmp	r3, r1
 8000d86:	bf0c      	ite	eq
 8000d88:	4610      	moveq	r0, r2
 8000d8a:	f04f 2040 	movne.w	r0, #1073758208	; 0x40004000
 8000d8e:	6840      	ldr	r0, [r0, #4]
 8000d90:	0680      	lsls	r0, r0, #26
 8000d92:	d51d      	bpl.n	8000dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x12c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf18      	it	ne
 8000d98:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
      HAL_I2S_ErrorCallback(hi2s);
 8000d9c:	4620      	mov	r0, r4

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d9e:	6851      	ldr	r1, [r2, #4]
 8000da0:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000da4:	6051      	str	r1, [r2, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000da6:	6859      	ldr	r1, [r3, #4]
 8000da8:	f64f 725f 	movw	r2, #65375	; 0xff5f
 8000dac:	400a      	ands	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000db0:	2200      	movs	r2, #0
 8000db2:	9202      	str	r2, [sp, #8]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	9202      	str	r2, [sp, #8]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000dcc:	f7ff fddd 	bl	800098a <HAL_I2S_ErrorCallback>
    }

    /* I2S Underrun error interrupt occured ----------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000dd0:	9b00      	ldr	r3, [sp, #0]
 8000dd2:	071b      	lsls	r3, r3, #28
 8000dd4:	f140 80ad 	bpl.w	8000f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x28e>
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	0697      	lsls	r7, r2, #26
 8000dde:	f140 80a8 	bpl.w	8000f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x28e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	f64f 725f 	movw	r2, #65375	; 0xff5f
 8000de8:	400a      	ands	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x168>)
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x16c>)
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf18      	it	ne
 8000df4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000df8:	6851      	ldr	r1, [r2, #4]
 8000dfa:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000dfe:	6051      	str	r1, [r2, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000e00:	2200      	movs	r2, #0
 8000e02:	9203      	str	r2, [sp, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	9b03      	ldr	r3, [sp, #12]
 8000e0a:	e088      	b.n	8000f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x27a>
 8000e0c:	40003800 	.word	0x40003800
 8000e10:	40003400 	.word	0x40003400
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000e14:	9901      	ldr	r1, [sp, #4]
 8000e16:	078e      	lsls	r6, r1, #30
 8000e18:	d524      	bpl.n	8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
 8000e1a:	42ab      	cmp	r3, r5
 8000e1c:	bf0c      	ite	eq
 8000e1e:	4611      	moveq	r1, r2
 8000e20:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8000e24:	6849      	ldr	r1, [r1, #4]
 8000e26:	0609      	lsls	r1, r1, #24
 8000e28:	d51c      	bpl.n	8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
    }
  }
  else
  {
    /* Write Data on DR register */
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8000e2a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	bf0c      	ite	eq
 8000e30:	4616      	moveq	r6, r2
 8000e32:	f04f 2640 	movne.w	r6, #1073758208	; 0x40004000
 8000e36:	1c8f      	adds	r7, r1, #2
 8000e38:	8809      	ldrh	r1, [r1, #0]
 8000e3a:	6247      	str	r7, [r0, #36]	; 0x24
 8000e3c:	60f1      	str	r1, [r6, #12]
    hi2s->TxXferCount--;
 8000e3e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8000e40:	3901      	subs	r1, #1
 8000e42:	b289      	uxth	r1, r1
 8000e44:	8541      	strh	r1, [r0, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8000e46:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8000e48:	b289      	uxth	r1, r1
 8000e4a:	b959      	cbnz	r1, 8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
    {
      /* Disable I2Sext TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000e4c:	6872      	ldr	r2, [r6, #4]
 8000e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000e52:	6072      	str	r2, [r6, #4]

      if(hi2s->RxXferCount == 0U)
 8000e54:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b923      	cbnz	r3, 8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000e60:	f7ff ff1e 	bl	8000ca0 <HAL_I2SEx_TxRxCpltCallback>
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000e64:	9b00      	ldr	r3, [sp, #0]
 8000e66:	07da      	lsls	r2, r3, #31
 8000e68:	d51d      	bpl.n	8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	6853      	ldr	r3, [r2, #4]
 8000e6e:	065b      	lsls	r3, r3, #25
 8000e70:	d519      	bpl.n	8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e74:	1c99      	adds	r1, r3, #2
 8000e76:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000e78:	68d1      	ldr	r1, [r2, #12]
 8000e7a:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8000e7c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	8663      	strh	r3, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8000e84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b96b      	cbnz	r3, 8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e8a:	6851      	ldr	r1, [r2, #4]
 8000e8c:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8000e90:	400b      	ands	r3, r1
 8000e92:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 8000e94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b92b      	cbnz	r3, 8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff fefd 	bl	8000ca0 <HAL_I2SEx_TxRxCpltCallback>
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	065f      	lsls	r7, r3, #25
 8000eaa:	d51d      	bpl.n	8000ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	0696      	lsls	r6, r2, #26
 8000eb2:	d519      	bpl.n	8000ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	f64f 729f 	movw	r2, #65439	; 0xff9f
 8000eba:	400a      	ands	r2, r1
 8000ebc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ebe:	491e      	ldr	r1, [pc, #120]	; (8000f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>)
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x298>)
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	bf0c      	ite	eq
 8000ec6:	4613      	moveq	r3, r2
 8000ec8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
      HAL_I2S_ErrorCallback(hi2s);
 8000ecc:	4620      	mov	r0, r4
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000ed4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000ee4:	f7ff fd51 	bl	800098a <HAL_I2S_ErrorCallback>
    }

    /* I2Sext Underrun error interrupt occured -------------------------------*/
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	071d      	lsls	r5, r3, #28
 8000eec:	d521      	bpl.n	8000f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x28e>
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	4911      	ldr	r1, [pc, #68]	; (8000f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>)
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x298>)
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	bf0c      	ite	eq
 8000ef8:	4618      	moveq	r0, r3
 8000efa:	f04f 2040 	movne.w	r0, #1073758208	; 0x40004000
 8000efe:	6840      	ldr	r0, [r0, #4]
 8000f00:	0680      	lsls	r0, r0, #26
 8000f02:	d516      	bpl.n	8000f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x28e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000f04:	428a      	cmp	r2, r1
 8000f06:	bf18      	it	ne
 8000f08:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8000f12:	6059      	str	r1, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000f14:	6851      	ldr	r1, [r2, #4]
 8000f16:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8000f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fd2c 	bl	800098a <HAL_I2S_ErrorCallback>
    }
  }
}
 8000f32:	b005      	add	sp, #20
 8000f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800
 8000f3c:	40003400 	.word	0x40003400

08000f40 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f40:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f46:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f48:	07d8      	lsls	r0, r3, #31
 8000f4a:	d403      	bmi.n	8000f54 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	0799      	lsls	r1, r3, #30
 8000f50:	d44b      	bmi.n	8000fea <HAL_RCC_OscConfig+0xaa>
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	f002 020c 	and.w	r2, r2, #12
 8000f5c:	2a04      	cmp	r2, #4
 8000f5e:	d007      	beq.n	8000f70 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f60:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f62:	f002 020c 	and.w	r2, r2, #12
 8000f66:	2a08      	cmp	r2, #8
 8000f68:	d10b      	bne.n	8000f82 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	025a      	lsls	r2, r3, #9
 8000f6e:	d508      	bpl.n	8000f82 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4b85      	ldr	r3, [pc, #532]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	039b      	lsls	r3, r3, #14
 8000f76:	d5e9      	bpl.n	8000f4c <HAL_RCC_OscConfig+0xc>
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e6      	bne.n	8000f4c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e164      	b.n	800124c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	4d80      	ldr	r5, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8a:	d006      	beq.n	8000f9a <HAL_RCC_OscConfig+0x5a>
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x64>
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	602b      	str	r3, [r5, #0]
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x76>
 8000fa4:	682a      	ldr	r2, [r5, #0]
 8000fa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000faa:	602a      	str	r2, [r5, #0]
 8000fac:	682a      	ldr	r2, [r5, #0]
 8000fae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fb2:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fb4:	b16b      	cbz	r3, 8000fd2 <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	f7ff f991 	bl	80002dc <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4d73      	ldr	r5, [pc, #460]	; (8001188 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	039f      	lsls	r7, r3, #14
 8000fc2:	d4c3      	bmi.n	8000f4c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff f98a 	bl	80002dc <HAL_GetTick>
 8000fc8:	1b80      	subs	r0, r0, r6
 8000fca:	2864      	cmp	r0, #100	; 0x64
 8000fcc:	d9f7      	bls.n	8000fbe <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 8000fce:	2003      	movs	r0, #3
 8000fd0:	e13c      	b.n	800124c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff f983 	bl	80002dc <HAL_GetTick>
 8000fd6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	0398      	lsls	r0, r3, #14
 8000fdc:	d5b6      	bpl.n	8000f4c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fde:	f7ff f97d 	bl	80002dc <HAL_GetTick>
 8000fe2:	1b80      	subs	r0, r0, r6
 8000fe4:	2864      	cmp	r0, #100	; 0x64
 8000fe6:	d9f7      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x98>
 8000fe8:	e7f1      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fea:	4b67      	ldr	r3, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f012 0f0c 	tst.w	r2, #12
 8000ff2:	d007      	beq.n	8001004 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff4:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff6:	f002 020c 	and.w	r2, r2, #12
 8000ffa:	2a08      	cmp	r2, #8
 8000ffc:	d117      	bne.n	800102e <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	0259      	lsls	r1, r3, #9
 8001002:	d414      	bmi.n	800102e <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001004:	4b60      	ldr	r3, [pc, #384]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	0792      	lsls	r2, r2, #30
 800100a:	d502      	bpl.n	8001012 <HAL_RCC_OscConfig+0xd2>
 800100c:	68e2      	ldr	r2, [r4, #12]
 800100e:	2a01      	cmp	r2, #1
 8001010:	d1b5      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	21f8      	movs	r1, #248	; 0xf8
 8001016:	fa91 f1a1 	rbit	r1, r1
 800101a:	6920      	ldr	r0, [r4, #16]
 800101c:	fab1 f181 	clz	r1, r1
 8001020:	fa00 f101 	lsl.w	r1, r0, r1
 8001024:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102c:	e02e      	b.n	800108c <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800102e:	68e2      	ldr	r2, [r4, #12]
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x24c>)
 8001032:	b1ea      	cbz	r2, 8001070 <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff f950 	bl	80002dc <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4d52      	ldr	r5, [pc, #328]	; (8001188 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	4851      	ldr	r0, [pc, #324]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8001044:	079b      	lsls	r3, r3, #30
 8001046:	d405      	bmi.n	8001054 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff f948 	bl	80002dc <HAL_GetTick>
 800104c:	1b80      	subs	r0, r0, r6
 800104e:	2802      	cmp	r0, #2
 8001050:	d9f6      	bls.n	8001040 <HAL_RCC_OscConfig+0x100>
 8001052:	e7bc      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	22f8      	movs	r2, #248	; 0xf8
 8001058:	fa92 f2a2 	rbit	r2, r2
 800105c:	6921      	ldr	r1, [r4, #16]
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800106a:	4313      	orrs	r3, r2
 800106c:	6003      	str	r3, [r0, #0]
 800106e:	e00d      	b.n	800108c <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001072:	f7ff f933 	bl	80002dc <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	4d44      	ldr	r5, [pc, #272]	; (8001188 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	682b      	ldr	r3, [r5, #0]
 800107c:	079f      	lsls	r7, r3, #30
 800107e:	d505      	bpl.n	800108c <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff f92c 	bl	80002dc <HAL_GetTick>
 8001084:	1b80      	subs	r0, r0, r6
 8001086:	2802      	cmp	r0, #2
 8001088:	d9f7      	bls.n	800107a <HAL_RCC_OscConfig+0x13a>
 800108a:	e7a0      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	071e      	lsls	r6, r3, #28
 8001090:	d403      	bmi.n	800109a <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	075d      	lsls	r5, r3, #29
 8001096:	d548      	bpl.n	800112a <HAL_RCC_OscConfig+0x1ea>
 8001098:	e01f      	b.n	80010da <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800109a:	6962      	ldr	r2, [r4, #20]
 800109c:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <HAL_RCC_OscConfig+0x250>)
 800109e:	b172      	cbz	r2, 80010be <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff f91a 	bl	80002dc <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	4d37      	ldr	r5, [pc, #220]	; (8001188 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010ae:	0798      	lsls	r0, r3, #30
 80010b0:	d4ef      	bmi.n	8001092 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff f913 	bl	80002dc <HAL_GetTick>
 80010b6:	1b80      	subs	r0, r0, r6
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9f7      	bls.n	80010ac <HAL_RCC_OscConfig+0x16c>
 80010bc:	e787      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010be:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c0:	f7ff f90c 	bl	80002dc <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c4:	4d30      	ldr	r5, [pc, #192]	; (8001188 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010ca:	0799      	lsls	r1, r3, #30
 80010cc:	d5e1      	bpl.n	8001092 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ce:	f7ff f905 	bl	80002dc <HAL_GetTick>
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f7      	bls.n	80010c8 <HAL_RCC_OscConfig+0x188>
 80010d8:	e779      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010e0:	4d2c      	ldr	r5, [pc, #176]	; (8001194 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80010fc:	f7ff f8ee 	bl	80002dc <HAL_GetTick>
 8001100:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001102:	682b      	ldr	r3, [r5, #0]
 8001104:	05da      	lsls	r2, r3, #23
 8001106:	d513      	bpl.n	8001130 <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	68a3      	ldr	r3, [r4, #8]
 800110a:	4d1f      	ldr	r5, [pc, #124]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 800110c:	2b01      	cmp	r3, #1
 800110e:	d115      	bne.n	800113c <HAL_RCC_OscConfig+0x1fc>
 8001110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff f8e0 	bl	80002dc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	4d1a      	ldr	r5, [pc, #104]	; (8001188 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001126:	079b      	lsls	r3, r3, #30
 8001128:	d519      	bpl.n	800115e <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112a:	69a2      	ldr	r2, [r4, #24]
 800112c:	bba2      	cbnz	r2, 8001198 <HAL_RCC_OscConfig+0x258>
 800112e:	e072      	b.n	8001216 <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff f8d4 	bl	80002dc <HAL_GetTick>
 8001134:	1b80      	subs	r0, r0, r6
 8001136:	2802      	cmp	r0, #2
 8001138:	d9e3      	bls.n	8001102 <HAL_RCC_OscConfig+0x1c2>
 800113a:	e748      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	2b05      	cmp	r3, #5
 800113e:	d104      	bne.n	800114a <HAL_RCC_OscConfig+0x20a>
 8001140:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	672b      	str	r3, [r5, #112]	; 0x70
 8001148:	e7e2      	b.n	8001110 <HAL_RCC_OscConfig+0x1d0>
 800114a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	672a      	str	r2, [r5, #112]	; 0x70
 8001152:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001154:	f022 0204 	bic.w	r2, r2, #4
 8001158:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800115a:	b133      	cbz	r3, 800116a <HAL_RCC_OscConfig+0x22a>
 800115c:	e7dc      	b.n	8001118 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff f8bd 	bl	80002dc <HAL_GetTick>
 8001162:	1b80      	subs	r0, r0, r6
 8001164:	42b8      	cmp	r0, r7
 8001166:	d9dd      	bls.n	8001124 <HAL_RCC_OscConfig+0x1e4>
 8001168:	e731      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff f8b7 	bl	80002dc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001174:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001176:	0798      	lsls	r0, r3, #30
 8001178:	d5d7      	bpl.n	800112a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f7ff f8af 	bl	80002dc <HAL_GetTick>
 800117e:	1b80      	subs	r0, r0, r6
 8001180:	42b8      	cmp	r0, r7
 8001182:	d9f7      	bls.n	8001174 <HAL_RCC_OscConfig+0x234>
 8001184:	e723      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	42470000 	.word	0x42470000
 8001190:	42470e80 	.word	0x42470e80
 8001194:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001198:	4d2e      	ldr	r5, [pc, #184]	; (8001254 <HAL_RCC_OscConfig+0x314>)
 800119a:	68ab      	ldr	r3, [r5, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	f43f aeec 	beq.w	8000f7e <HAL_RCC_OscConfig+0x3e>
 80011a6:	4e2c      	ldr	r6, [pc, #176]	; (8001258 <HAL_RCC_OscConfig+0x318>)
 80011a8:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011aa:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ac:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ae:	d141      	bne.n	8001234 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff f894 	bl	80002dc <HAL_GetTick>
 80011b4:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	4f26      	ldr	r7, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x314>)
 80011ba:	0199      	lsls	r1, r3, #6
 80011bc:	d42d      	bmi.n	800121a <HAL_RCC_OscConfig+0x2da>
 80011be:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80011c2:	fa92 f2a2 	rbit	r2, r2
 80011c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011ca:	fab2 fe82 	clz	lr, r2
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80011d6:	fab3 f583 	clz	r5, r3
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	69e0      	ldr	r0, [r4, #28]
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	fab2 f182 	clz	r1, r2
 80011e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011e8:	4303      	orrs	r3, r0
 80011ea:	fa02 f20e 	lsl.w	r2, r2, lr
 80011ee:	ea43 0002 	orr.w	r0, r3, r2
 80011f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f4:	085a      	lsrs	r2, r3, #1
 80011f6:	3a01      	subs	r2, #1
 80011f8:	fa02 f305 	lsl.w	r3, r2, r5
 80011fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011fe:	4303      	orrs	r3, r0
 8001200:	408a      	lsls	r2, r1
 8001202:	4313      	orrs	r3, r2
 8001204:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001206:	2301      	movs	r3, #1
 8001208:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff f867 	bl	80002dc <HAL_GetTick>
 800120e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	019a      	lsls	r2, r3, #6
 8001214:	d508      	bpl.n	8001228 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001216:	2000      	movs	r0, #0
 8001218:	e018      	b.n	800124c <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff f85f 	bl	80002dc <HAL_GetTick>
 800121e:	ebc8 0000 	rsb	r0, r8, r0
 8001222:	2802      	cmp	r0, #2
 8001224:	d9c7      	bls.n	80011b6 <HAL_RCC_OscConfig+0x276>
 8001226:	e6d2      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff f858 	bl	80002dc <HAL_GetTick>
 800122c:	1b00      	subs	r0, r0, r4
 800122e:	2802      	cmp	r0, #2
 8001230:	d9ee      	bls.n	8001210 <HAL_RCC_OscConfig+0x2d0>
 8001232:	e6cc      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff f852 	bl	80002dc <HAL_GetTick>
 8001238:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	d5ea      	bpl.n	8001216 <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff f84c 	bl	80002dc <HAL_GetTick>
 8001244:	1b00      	subs	r0, r0, r4
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f7      	bls.n	800123a <HAL_RCC_OscConfig+0x2fa>
 800124a:	e6c0      	b.n	8000fce <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800124c:	b002      	add	sp, #8
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	42470060 	.word	0x42470060

0800125c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800125c:	491b      	ldr	r1, [pc, #108]	; (80012cc <HAL_RCC_GetSysClockFreq+0x70>)
 800125e:	688b      	ldr	r3, [r1, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d02c      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x66>
 8001268:	2b08      	cmp	r3, #8
 800126a:	d12c      	bne.n	80012c6 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126c:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126e:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001270:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001274:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001278:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800127c:	684b      	ldr	r3, [r1, #4]
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	ea01 0103 	and.w	r1, r1, r3
 800128e:	fa21 f102 	lsr.w	r1, r1, r2
 8001292:	bf14      	ite	ne
 8001294:	4a0e      	ldrne	r2, [pc, #56]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001296:	4a0f      	ldreq	r2, [pc, #60]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001298:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800129e:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80012a2:	6852      	ldr	r2, [r2, #4]
 80012a4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80012a8:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80012ac:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80012b0:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80012b4:	fa22 f000 	lsr.w	r0, r2, r0
 80012b8:	3001      	adds	r0, #1
 80012ba:	0040      	lsls	r0, r0, #1
 80012bc:	fbb3 f0f0 	udiv	r0, r3, r0
 80012c0:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x74>)
 80012c4:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	017d7840 	.word	0x017d7840
 80012d4:	00f42400 	.word	0x00f42400

080012d8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_RCC_ClockConfig+0x158>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f002 020f 	and.w	r2, r2, #15
 80012e0:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e6:	4605      	mov	r5, r0
 80012e8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012ea:	d30a      	bcc.n	8001302 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ec:	6829      	ldr	r1, [r5, #0]
 80012ee:	0788      	lsls	r0, r1, #30
 80012f0:	d511      	bpl.n	8001316 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f2:	4850      	ldr	r0, [pc, #320]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 80012f4:	6883      	ldr	r3, [r0, #8]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fa:	68ab      	ldr	r3, [r5, #8]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	6083      	str	r3, [r0, #8]
 8001300:	e009      	b.n	8001316 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	4299      	cmp	r1, r3
 800130e:	d0ed      	beq.n	80012ec <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001316:	07c9      	lsls	r1, r1, #31
 8001318:	d406      	bmi.n	8001328 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800131a:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_RCC_ClockConfig+0x158>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f002 020f 	and.w	r2, r2, #15
 8001322:	4296      	cmp	r6, r2
 8001324:	d351      	bcc.n	80013ca <HAL_RCC_ClockConfig+0xf2>
 8001326:	e057      	b.n	80013d8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001328:	686b      	ldr	r3, [r5, #4]
 800132a:	4a42      	ldr	r2, [pc, #264]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 800132c:	2b01      	cmp	r3, #1
 800132e:	d103      	bne.n	8001338 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001336:	e008      	b.n	800134a <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001338:	1e99      	subs	r1, r3, #2
 800133a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800133e:	d802      	bhi.n	8001346 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001340:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001344:	e001      	b.n	800134a <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	f012 0f02 	tst.w	r2, #2
 800134a:	d0e1      	beq.n	8001310 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134c:	4c39      	ldr	r4, [pc, #228]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 800134e:	68a2      	ldr	r2, [r4, #8]
 8001350:	f022 0203 	bic.w	r2, r2, #3
 8001354:	4313      	orrs	r3, r2
 8001356:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001358:	f7fe ffc0 	bl	80002dc <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	686b      	ldr	r3, [r5, #4]
 800135e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001360:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001362:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001368:	68a3      	ldr	r3, [r4, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d0d3      	beq.n	800131a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001372:	f7fe ffb3 	bl	80002dc <HAL_GetTick>
 8001376:	1bc0      	subs	r0, r0, r7
 8001378:	4540      	cmp	r0, r8
 800137a:	d9f5      	bls.n	8001368 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 800137c:	2003      	movs	r0, #3
 800137e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	2b02      	cmp	r3, #2
 8001384:	d10a      	bne.n	800139c <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d0c4      	beq.n	800131a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7fe ffa4 	bl	80002dc <HAL_GetTick>
 8001394:	1bc0      	subs	r0, r0, r7
 8001396:	4540      	cmp	r0, r8
 8001398:	d9f5      	bls.n	8001386 <HAL_RCC_ClockConfig+0xae>
 800139a:	e7ef      	b.n	800137c <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800139c:	2b03      	cmp	r3, #3
 800139e:	d10f      	bne.n	80013c0 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80013a0:	68a3      	ldr	r3, [r4, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d0b7      	beq.n	800131a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013aa:	f7fe ff97 	bl	80002dc <HAL_GetTick>
 80013ae:	1bc0      	subs	r0, r0, r7
 80013b0:	4540      	cmp	r0, r8
 80013b2:	d9f5      	bls.n	80013a0 <HAL_RCC_ClockConfig+0xc8>
 80013b4:	e7e2      	b.n	800137c <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7fe ff91 	bl	80002dc <HAL_GetTick>
 80013ba:	1bc0      	subs	r0, r0, r7
 80013bc:	4540      	cmp	r0, r8
 80013be:	d8dd      	bhi.n	800137c <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c0:	68a3      	ldr	r3, [r4, #8]
 80013c2:	f013 0f0c 	tst.w	r3, #12
 80013c6:	d1f6      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
 80013c8:	e7a7      	b.n	800131a <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	b2f2      	uxtb	r2, r6
 80013cc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	429e      	cmp	r6, r3
 80013d6:	d19b      	bne.n	8001310 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	6829      	ldr	r1, [r5, #0]
 80013da:	074a      	lsls	r2, r1, #29
 80013dc:	d506      	bpl.n	80013ec <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 80013e0:	6883      	ldr	r3, [r0, #8]
 80013e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013e6:	68eb      	ldr	r3, [r5, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ec:	070b      	lsls	r3, r1, #28
 80013ee:	d507      	bpl.n	8001400 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f0:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 80013f2:	6929      	ldr	r1, [r5, #16]
 80013f4:	6893      	ldr	r3, [r2, #8]
 80013f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013fe:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001400:	f7ff ff2c 	bl	800125c <HAL_RCC_GetSysClockFreq>
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_ClockConfig+0x15c>)
 8001406:	22f0      	movs	r2, #240	; 0xf0
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001416:	40d3      	lsrs	r3, r2
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_RCC_ClockConfig+0x160>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	40d8      	lsrs	r0, r3
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_RCC_ClockConfig+0x164>)
 8001420:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f7fe ff24 	bl	8000270 <HAL_InitTick>
  
  return HAL_OK;
 8001428:	2000      	movs	r0, #0
}
 800142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00
 8001434:	40023800 	.word	0x40023800
 8001438:	08003813 	.word	0x08003813
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <HAL_RCC_GetHCLKFreq+0x8>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	fa92 f2a2 	rbit	r2, r2
 8001458:	fab2 f282 	clz	r2, r2
 800145c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001460:	40d3      	lsrs	r3, r2
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001468:	6810      	ldr	r0, [r2, #0]
}
 800146a:	40d8      	lsrs	r0, r3
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	08003823 	.word	0x08003823
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	fa92 f2a2 	rbit	r2, r2
 8001488:	fab2 f282 	clz	r2, r2
 800148c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001490:	40d3      	lsrs	r3, r2
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001498:	6810      	ldr	r0, [r2, #0]
} 
 800149a:	40d8      	lsrs	r0, r3
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08003823 	.word	0x08003823
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	f013 0f05 	tst.w	r3, #5
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014b6:	4605      	mov	r5, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80014b8:	d119      	bne.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014ba:	6828      	ldr	r0, [r5, #0]
 80014bc:	f010 0002 	ands.w	r0, r0, #2
 80014c0:	f000 8090 	beq.w	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014ca:	4c49      	ldr	r4, [pc, #292]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6023      	str	r3, [r4, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014e6:	f7fe fef9 	bl	80002dc <HAL_GetTick>
 80014ea:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014ec:	e039      	b.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80014ee:	4e41      	ldr	r6, [pc, #260]	; (80015f4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80014f0:	4f3e      	ldr	r7, [pc, #248]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014f6:	f7fe fef1 	bl	80002dc <HAL_GetTick>
 80014fa:	4680      	mov	r8, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4c3b      	ldr	r4, [pc, #236]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	d507      	bpl.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001504:	f7fe feea 	bl	80002dc <HAL_GetTick>
 8001508:	ebc8 0000 	rsb	r0, r8, r0
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e067      	b.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8001514:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001518:	fa91 f1a1 	rbit	r1, r1
 800151c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001520:	fab1 f181 	clz	r1, r1
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	fab3 f283 	clz	r2, r3
 800152c:	686b      	ldr	r3, [r5, #4]
 800152e:	fa03 f101 	lsl.w	r1, r3, r1
 8001532:	68ab      	ldr	r3, [r5, #8]
 8001534:	4093      	lsls	r3, r2
 8001536:	430b      	orrs	r3, r1
 8001538:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800153c:	2301      	movs	r3, #1
 800153e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001540:	f7fe fecc 	bl	80002dc <HAL_GetTick>
 8001544:	4606      	mov	r6, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	0118      	lsls	r0, r3, #4
 800154a:	d4b6      	bmi.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0xe>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800154c:	f7fe fec6 	bl	80002dc <HAL_GetTick>
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	2802      	cmp	r0, #2
 8001554:	d9f7      	bls.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8001556:	e7db      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x64>
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001558:	f7fe fec0 	bl	80002dc <HAL_GetTick>
 800155c:	1b80      	subs	r0, r0, r6
 800155e:	2802      	cmp	r0, #2
 8001560:	d8d6      	bhi.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x64>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	05d9      	lsls	r1, r3, #23
 8001566:	d5f7      	bpl.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xac>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001568:	4c20      	ldr	r4, [pc, #128]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800156a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800156c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001570:	d10f      	bne.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001572:	68ea      	ldr	r2, [r5, #12]
 8001574:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800157e:	d127      	bne.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001586:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800158a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800158e:	4301      	orrs	r1, r0
 8001590:	e021      	b.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001592:	68ea      	ldr	r2, [r5, #12]
 8001594:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001598:	4293      	cmp	r3, r2
 800159a:	d0ea      	beq.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800159c:	6f23      	ldr	r3, [r4, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015a8:	2100      	movs	r1, #0
 80015aa:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80015ac:	6723      	str	r3, [r4, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80015b0:	07da      	lsls	r2, r3, #31
 80015b2:	d5de      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80015b4:	f7fe fe92 	bl	80002dc <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f241 3788 	movw	r7, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80015bc:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80015c0:	079b      	lsls	r3, r3, #30
 80015c2:	d4d6      	bmi.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7fe fe8a 	bl	80002dc <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	42b8      	cmp	r0, r7
 80015cc:	d9f7      	bls.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x112>
 80015ce:	e79f      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x64>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80015d6:	6099      	str	r1, [r3, #8]
 80015d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80015da:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015de:	430a      	orrs	r2, r1
 80015e0:	671a      	str	r2, [r3, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80015e2:	2000      	movs	r0, #0
}
 80015e4:	b002      	add	sp, #8
 80015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42470068 	.word	0x42470068
 80015f8:	42470e40 	.word	0x42470e40

080015fc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80015fc:	2801      	cmp	r0, #1
 80015fe:	d120      	bne.n	8001642 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001602:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001604:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001608:	d004      	beq.n	8001614 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800160a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800160e:	bf18      	it	ne
 8001610:	2000      	movne	r0, #0
 8001612:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001614:	685a      	ldr	r2, [r3, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */          
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800161e:	0253      	lsls	r3, r2, #9
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */          
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001620:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001624:	bf4c      	ite	mi
 8001626:	4b0a      	ldrmi	r3, [pc, #40]	; (8001650 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001628:	4b0a      	ldrpl	r3, [pc, #40]	; (8001654 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
 800162a:	fbb3 f3f0 	udiv	r3, r3, r0
          }
#endif /* STM32F411xE */          
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800162e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 8001632:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001636:	4353      	muls	r3, r2
 8001638:	f3c0 7002 	ubfx	r0, r0, #28, #3
 800163c:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001640:	4770      	bx	lr
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8001642:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency; 
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	00bb8000 	.word	0x00bb8000
 8001650:	017d7840 	.word	0x017d7840
 8001654:	00f42400 	.word	0x00f42400

08001658 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800165c:	9e06      	ldr	r6, [sp, #24]
 800165e:	4604      	mov	r4, r0
 8001660:	4688      	mov	r8, r1
 8001662:	4617      	mov	r7, r2
 8001664:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	6893      	ldr	r3, [r2, #8]
 800166a:	ea38 0303 	bics.w	r3, r8, r3
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	429f      	cmp	r7, r3
 8001676:	d033      	beq.n	80016e0 <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001678:	1c6b      	adds	r3, r5, #1
 800167a:	d0f5      	beq.n	8001668 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800167c:	b94d      	cbnz	r5, 8001692 <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001686:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001688:	6862      	ldr	r2, [r4, #4]
 800168a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800168e:	d111      	bne.n	80016b4 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001690:	e005      	b.n	800169e <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001692:	f7fe fe23 	bl	80002dc <HAL_GetTick>
 8001696:	1b80      	subs	r0, r0, r6
 8001698:	4285      	cmp	r5, r0
 800169a:	d8e4      	bhi.n	8001666 <SPI_WaitFlagStateUntilTimeout+0xe>
 800169c:	e7ef      	b.n	800167e <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800169e:	68a2      	ldr	r2, [r4, #8]
 80016a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80016a4:	d002      	beq.n	80016ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80016a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80016aa:	d103      	bne.n	80016b4 <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016ba:	d108      	bne.n	80016ce <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80016c2:	400a      	ands	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016d4:	2300      	movs	r3, #0
 80016d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80016da:	2003      	movs	r0, #3
 80016dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80016e0:	2000      	movs	r0, #0
}
 80016e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016e6 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016e6:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016e8:	460b      	mov	r3, r1
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016f2:	f7ff ffb1 	bl	8001658 <SPI_WaitFlagStateUntilTimeout>
 80016f6:	b120      	cbz	r0, 8001702 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001700:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001702:	b002      	add	sp, #8
 8001704:	bd10      	pop	{r4, pc}

08001706 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001706:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001708:	4604      	mov	r4, r0
 800170a:	2800      	cmp	r0, #0
 800170c:	d036      	beq.n	800177c <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001712:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001716:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800171a:	b91b      	cbnz	r3, 8001724 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800171c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001720:	f000 ffa8 	bl	8002674 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001724:	68a1      	ldr	r1, [r4, #8]
 8001726:	6860      	ldr	r0, [r4, #4]
 8001728:	4308      	orrs	r0, r1
 800172a:	68e1      	ldr	r1, [r4, #12]
 800172c:	4308      	orrs	r0, r1
 800172e:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001730:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001732:	4308      	orrs	r0, r1
 8001734:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001736:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800173a:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800173c:	4308      	orrs	r0, r1
 800173e:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001740:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001742:	4308      	orrs	r0, r1
 8001744:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800174a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800174c:	4308      	orrs	r0, r1
 800174e:	69a2      	ldr	r2, [r4, #24]
 8001750:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001752:	4308      	orrs	r0, r1
 8001754:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001758:	4301      	orrs	r1, r0
 800175a:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800175c:	0c12      	lsrs	r2, r2, #16
 800175e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001760:	f002 0204 	and.w	r2, r2, #4
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176e:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001770:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001772:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001774:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001776:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800177a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800177e:	bd10      	pop	{r4, pc}

08001780 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001784:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001786:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800178a:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001792:	f000 809e 	beq.w	80018d2 <HAL_SPI_Transmit+0x152>
 8001796:	2301      	movs	r3, #1
 8001798:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800179c:	f7fe fd9e 	bl	80002dc <HAL_GetTick>
 80017a0:	4607      	mov	r7, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 80017a2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80017a6:	b2c0      	uxtb	r0, r0
 80017a8:	2801      	cmp	r0, #1
 80017aa:	f040 808a 	bne.w	80018c2 <HAL_SPI_Transmit+0x142>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0))
 80017ae:	2d00      	cmp	r5, #0
 80017b0:	f000 8088 	beq.w	80018c4 <HAL_SPI_Transmit+0x144>
 80017b4:	f1b8 0f00 	cmp.w	r8, #0
 80017b8:	f000 8084 	beq.w	80018c4 <HAL_SPI_Transmit+0x144>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017bc:	2303      	movs	r3, #3
 80017be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017c6:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80017c8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 80017cc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017d0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017d2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017d4:	68a3      	ldr	r3, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017d6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017dc:	6823      	ldr	r3, [r4, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 80017de:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80017e2:	bf02      	ittt	eq
 80017e4:	681a      	ldreq	r2, [r3, #0]
 80017e6:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80017ea:	601a      	streq	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017f0:	bf5e      	ittt	pl
 80017f2:	681a      	ldrpl	r2, [r3, #0]
 80017f4:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80017f8:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017fa:	68e2      	ldr	r2, [r4, #12]
 80017fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001800:	6862      	ldr	r2, [r4, #4]
 8001802:	d11e      	bne.n	8001842 <HAL_SPI_Transmit+0xc2>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001804:	b172      	cbz	r2, 8001824 <HAL_SPI_Transmit+0xa4>
 8001806:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001808:	b292      	uxth	r2, r2
 800180a:	2a01      	cmp	r2, #1
 800180c:	d103      	bne.n	8001816 <HAL_SPI_Transmit+0x96>
 800180e:	e009      	b.n	8001824 <HAL_SPI_Transmit+0xa4>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001810:	b1ae      	cbz	r6, 800183e <HAL_SPI_Transmit+0xbe>
 8001812:	1c71      	adds	r1, r6, #1
 8001814:	d10e      	bne.n	8001834 <HAL_SPI_Transmit+0xb4>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001816:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001818:	b29b      	uxth	r3, r3
 800181a:	b1d3      	cbz	r3, 8001852 <HAL_SPI_Transmit+0xd2>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	0790      	lsls	r0, r2, #30
 8001822:	d5f5      	bpl.n	8001810 <HAL_SPI_Transmit+0x90>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001824:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001828:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 800182a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800182c:	3b01      	subs	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001832:	e7f0      	b.n	8001816 <HAL_SPI_Transmit+0x96>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001834:	f7fe fd52 	bl	80002dc <HAL_GetTick>
 8001838:	1bc0      	subs	r0, r0, r7
 800183a:	4286      	cmp	r6, r0
 800183c:	d8eb      	bhi.n	8001816 <HAL_SPI_Transmit+0x96>
        {
          errorcode = HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e040      	b.n	80018c4 <HAL_SPI_Transmit+0x144>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001842:	b1a2      	cbz	r2, 800186e <HAL_SPI_Transmit+0xee>
 8001844:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001846:	b292      	uxth	r2, r2
 8001848:	2a01      	cmp	r2, #1
 800184a:	d010      	beq.n	800186e <HAL_SPI_Transmit+0xee>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 800184c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800184e:	b29b      	uxth	r3, r3
 8001850:	b94b      	cbnz	r3, 8001866 <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001852:	9700      	str	r7, [sp, #0]
 8001854:	4633      	mov	r3, r6
 8001856:	2201      	movs	r2, #1
 8001858:	2102      	movs	r1, #2
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fefc 	bl	8001658 <SPI_WaitFlagStateUntilTimeout>
 8001860:	2800      	cmp	r0, #0
 8001862:	d1ec      	bne.n	800183e <HAL_SPI_Transmit+0xbe>
 8001864:	e015      	b.n	8001892 <HAL_SPI_Transmit+0x112>
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	0792      	lsls	r2, r2, #30
 800186c:	d507      	bpl.n	800187e <HAL_SPI_Transmit+0xfe>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800186e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001872:	731a      	strb	r2, [r3, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8001874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800187c:	e7e6      	b.n	800184c <HAL_SPI_Transmit+0xcc>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800187e:	2e00      	cmp	r6, #0
 8001880:	d0dd      	beq.n	800183e <HAL_SPI_Transmit+0xbe>
 8001882:	1c73      	adds	r3, r6, #1
 8001884:	d0e2      	beq.n	800184c <HAL_SPI_Transmit+0xcc>
 8001886:	f7fe fd29 	bl	80002dc <HAL_GetTick>
 800188a:	1bc0      	subs	r0, r0, r7
 800188c:	4286      	cmp	r6, r0
 800188e:	d8dd      	bhi.n	800184c <HAL_SPI_Transmit+0xcc>
 8001890:	e7d5      	b.n	800183e <HAL_SPI_Transmit+0xbe>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001892:	463a      	mov	r2, r7
 8001894:	4631      	mov	r1, r6
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff ff25 	bl	80016e6 <SPI_CheckFlag_BSY>
 800189c:	b118      	cbz	r0, 80018a6 <HAL_SPI_Transmit+0x126>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800189e:	2320      	movs	r3, #32
 80018a0:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
 80018a4:	e00e      	b.n	80018c4 <HAL_SPI_Transmit+0x144>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018a6:	68a3      	ldr	r3, [r4, #8]
 80018a8:	b933      	cbnz	r3, 80018b8 <HAL_SPI_Transmit+0x138>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018aa:	9303      	str	r3, [sp, #12]
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	9203      	str	r2, [sp, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	9b03      	ldr	r3, [sp, #12]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 80018ba:	3000      	adds	r0, #0
 80018bc:	bf18      	it	ne
 80018be:	2001      	movne	r0, #1
 80018c0:	e000      	b.n	80018c4 <HAL_SPI_Transmit+0x144>
 80018c2:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018ca:	2300      	movs	r3, #0
 80018cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80018d0:	e000      	b.n	80018d4 <HAL_SPI_Transmit+0x154>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018d2:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80018d4:	b004      	add	sp, #16
 80018d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018da <HAL_TIM_OC_DelayElapsedCallback>:
 80018da:	4770      	bx	lr

080018dc <HAL_TIM_IC_CaptureCallback>:
 80018dc:	4770      	bx	lr

080018de <HAL_TIM_PWM_PulseFinishedCallback>:
 80018de:	4770      	bx	lr

080018e0 <HAL_TIM_TriggerCallback>:
 80018e0:	4770      	bx	lr

080018e2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018e8:	b510      	push	{r4, lr}
 80018ea:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018ec:	d514      	bpl.n	8001918 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	0792      	lsls	r2, r2, #30
 80018f2:	d511      	bpl.n	8001918 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018f4:	f06f 0202 	mvn.w	r2, #2
 80018f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018fa:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018fc:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018fe:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001900:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001902:	d002      	beq.n	800190a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001904:	f7ff ffea 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 8001908:	e004      	b.n	8001914 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800190a:	f7ff ffe6 	bl	80018da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff ffe5 	bl	80018de <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001914:	2300      	movs	r3, #0
 8001916:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	0750      	lsls	r0, r2, #29
 800191e:	d516      	bpl.n	800194e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	0751      	lsls	r1, r2, #29
 8001924:	d513      	bpl.n	800194e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001926:	f06f 0204 	mvn.w	r2, #4
 800192a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800192c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001930:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001934:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001936:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001938:	d002      	beq.n	8001940 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800193a:	f7ff ffcf 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 800193e:	e004      	b.n	800194a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001940:	f7ff ffcb 	bl	80018da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ffca 	bl	80018de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194a:	2300      	movs	r3, #0
 800194c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	0712      	lsls	r2, r2, #28
 8001954:	d515      	bpl.n	8001982 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	0710      	lsls	r0, r2, #28
 800195a:	d512      	bpl.n	8001982 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800195c:	f06f 0208 	mvn.w	r2, #8
 8001960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001962:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001964:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001966:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001968:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800196c:	d002      	beq.n	8001974 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	f7ff ffb5 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 8001972:	e004      	b.n	800197e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001974:	f7ff ffb1 	bl	80018da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff ffb0 	bl	80018de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	2300      	movs	r3, #0
 8001980:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	06d2      	lsls	r2, r2, #27
 8001988:	d516      	bpl.n	80019b8 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	06d0      	lsls	r0, r2, #27
 800198e:	d513      	bpl.n	80019b8 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001990:	f06f 0210 	mvn.w	r2, #16
 8001994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001996:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001998:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800199a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80019a0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a2:	d002      	beq.n	80019aa <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80019a4:	f7ff ff9a 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 80019a8:	e004      	b.n	80019b4 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	f7ff ff96 	bl	80018da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff ff95 	bl	80018de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b4:	2300      	movs	r3, #0
 80019b6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	07d1      	lsls	r1, r2, #31
 80019be:	d508      	bpl.n	80019d2 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	07d2      	lsls	r2, r2, #31
 80019c4:	d505      	bpl.n	80019d2 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c6:	f06f 0201 	mvn.w	r2, #1
 80019ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019cc:	4620      	mov	r0, r4
 80019ce:	f000 fd83 	bl	80024d8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	0610      	lsls	r0, r2, #24
 80019d8:	d508      	bpl.n	80019ec <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	0611      	lsls	r1, r2, #24
 80019de:	d505      	bpl.n	80019ec <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019e6:	4620      	mov	r0, r4
 80019e8:	f000 f8bf 	bl	8001b6a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	0652      	lsls	r2, r2, #25
 80019f2:	d508      	bpl.n	8001a06 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	0650      	lsls	r0, r2, #25
 80019f8:	d505      	bpl.n	8001a06 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff6d 	bl	80018e0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	0691      	lsls	r1, r2, #26
 8001a0c:	d50a      	bpl.n	8001a24 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	0692      	lsls	r2, r2, #26
 8001a12:	d507      	bpl.n	8001a24 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a14:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001a18:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001a20:	f000 b8a2 	b.w	8001b68 <HAL_TIMEx_CommutationCallback>
 8001a24:	bd10      	pop	{r4, pc}
	...

08001a28 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a28:	4a2e      	ldr	r2, [pc, #184]	; (8001ae4 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001a2a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a2c:	4290      	cmp	r0, r2
 8001a2e:	d012      	beq.n	8001a56 <TIM_Base_SetConfig+0x2e>
 8001a30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a34:	d00f      	beq.n	8001a56 <TIM_Base_SetConfig+0x2e>
 8001a36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a3a:	4290      	cmp	r0, r2
 8001a3c:	d00b      	beq.n	8001a56 <TIM_Base_SetConfig+0x2e>
 8001a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a42:	4290      	cmp	r0, r2
 8001a44:	d007      	beq.n	8001a56 <TIM_Base_SetConfig+0x2e>
 8001a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4a:	4290      	cmp	r0, r2
 8001a4c:	d003      	beq.n	8001a56 <TIM_Base_SetConfig+0x2e>
 8001a4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a52:	4290      	cmp	r0, r2
 8001a54:	d118      	bne.n	8001a88 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001a56:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a5c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <TIM_Base_SetConfig+0xbc>)
 8001a60:	4290      	cmp	r0, r2
 8001a62:	d037      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a68:	d034      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <TIM_Base_SetConfig+0xc0>)
 8001a6c:	4290      	cmp	r0, r2
 8001a6e:	d031      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a74:	4290      	cmp	r0, r2
 8001a76:	d02d      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7c:	4290      	cmp	r0, r2
 8001a7e:	d029      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a80:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a84:	4290      	cmp	r0, r2
 8001a86:	d025      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <TIM_Base_SetConfig+0xc4>)
 8001a8a:	4290      	cmp	r0, r2
 8001a8c:	d022      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a92:	4290      	cmp	r0, r2
 8001a94:	d01e      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a9a:	4290      	cmp	r0, r2
 8001a9c:	d01a      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001a9e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001aa2:	4290      	cmp	r0, r2
 8001aa4:	d016      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aaa:	4290      	cmp	r0, r2
 8001aac:	d012      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
 8001aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ab2:	4290      	cmp	r0, r2
 8001ab4:	d00e      	beq.n	8001ad4 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001ab6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ab8:	688b      	ldr	r3, [r1, #8]
 8001aba:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001abc:	680b      	ldr	r3, [r1, #0]
 8001abe:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <TIM_Base_SetConfig+0xbc>)
 8001ac2:	4298      	cmp	r0, r3
 8001ac4:	d00b      	beq.n	8001ade <TIM_Base_SetConfig+0xb6>
 8001ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aca:	4298      	cmp	r0, r3
 8001acc:	d007      	beq.n	8001ade <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6143      	str	r3, [r0, #20]
}
 8001ad2:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ad4:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ada:	4313      	orrs	r3, r2
 8001adc:	e7eb      	b.n	8001ab6 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ade:	690b      	ldr	r3, [r1, #16]
 8001ae0:	6303      	str	r3, [r0, #48]	; 0x30
 8001ae2:	e7f4      	b.n	8001ace <TIM_Base_SetConfig+0xa6>
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40014000 	.word	0x40014000

08001af0 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001af0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001af2:	4604      	mov	r4, r0
 8001af4:	b1a0      	cbz	r0, 8001b20 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001af6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001afa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001afe:	b91b      	cbnz	r3, 8001b08 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b04:	f000 fddc 	bl	80026c0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	1d21      	adds	r1, r4, #4
 8001b12:	f7ff ff89 	bl	8001a28 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001b22:	bd10      	pop	{r4, pc}

08001b24 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b28:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001b2a:	b510      	push	{r4, lr}
 8001b2c:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b30:	d018      	beq.n	8001b64 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b32:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b36:	6803      	ldr	r3, [r0, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b3e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001b40:	685c      	ldr	r4, [r3, #4]
 8001b42:	680a      	ldr	r2, [r1, #0]
 8001b44:	4322      	orrs	r2, r4
 8001b46:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b50:	689c      	ldr	r4, [r3, #8]
 8001b52:	684a      	ldr	r2, [r1, #4]
 8001b54:	4322      	orrs	r2, r4
 8001b56:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b64:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001b66:	bd10      	pop	{r4, pc}

08001b68 <HAL_TIMEx_CommutationCallback>:
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b6a:	4770      	bx	lr

08001b6c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b6c:	6803      	ldr	r3, [r0, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001b84:	4770      	bx	lr
	...

08001b88 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001b8c:	6807      	ldr	r7, [r0, #0]
 8001b8e:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b90:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b96:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b98:	68a1      	ldr	r1, [r4, #8]
 8001b9a:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b9c:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b9e:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001ba0:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ba8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001bb0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bb4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001bb8:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bbe:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bc4:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bcc:	d17c      	bne.n	8001cc8 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bce:	429f      	cmp	r7, r3
 8001bd0:	d003      	beq.n	8001bda <UART_SetConfig+0x52>
 8001bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd6:	429f      	cmp	r7, r3
 8001bd8:	d131      	bne.n	8001c3e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bda:	f7ff fc4f 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	2519      	movs	r5, #25
 8001be2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001be6:	4368      	muls	r0, r5
 8001be8:	fbb0 f8f8 	udiv	r8, r0, r8
 8001bec:	f7ff fc46 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001bf0:	6866      	ldr	r6, [r4, #4]
 8001bf2:	4368      	muls	r0, r5
 8001bf4:	0076      	lsls	r6, r6, #1
 8001bf6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001bfa:	f7ff fc3f 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001bfe:	6863      	ldr	r3, [r4, #4]
 8001c00:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4368      	muls	r0, r5
 8001c08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c0c:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c10:	fb09 6610 	mls	r6, r9, r0, r6
 8001c14:	f7ff fc32 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001c18:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c1c:	6861      	ldr	r1, [r4, #4]
 8001c1e:	00f6      	lsls	r6, r6, #3
 8001c20:	3632      	adds	r6, #50	; 0x32
 8001c22:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c26:	0076      	lsls	r6, r6, #1
 8001c28:	4368      	muls	r0, r5
 8001c2a:	0049      	lsls	r1, r1, #1
 8001c2c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001c30:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001c34:	fbb0 faf1 	udiv	sl, r0, r1
 8001c38:	f7ff fc20 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001c3c:	e030      	b.n	8001ca0 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c3e:	f7ff fc05 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001c42:	6863      	ldr	r3, [r4, #4]
 8001c44:	2519      	movs	r5, #25
 8001c46:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001c4a:	4368      	muls	r0, r5
 8001c4c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001c50:	f7ff fbfc 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001c54:	6866      	ldr	r6, [r4, #4]
 8001c56:	4368      	muls	r0, r5
 8001c58:	0076      	lsls	r6, r6, #1
 8001c5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c5e:	f7ff fbf5 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4368      	muls	r0, r5
 8001c6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c70:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c74:	fb09 6610 	mls	r6, r9, r0, r6
 8001c78:	f7ff fbe8 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001c7c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c80:	00f6      	lsls	r6, r6, #3
 8001c82:	6861      	ldr	r1, [r4, #4]
 8001c84:	3632      	adds	r6, #50	; 0x32
 8001c86:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c8a:	0076      	lsls	r6, r6, #1
 8001c8c:	4368      	muls	r0, r5
 8001c8e:	0049      	lsls	r1, r1, #1
 8001c90:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001c94:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001c98:	fbb0 faf1 	udiv	sl, r0, r1
 8001c9c:	f7ff fbd6 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001ca0:	4345      	muls	r5, r0
 8001ca2:	6860      	ldr	r0, [r4, #4]
 8001ca4:	0040      	lsls	r0, r0, #1
 8001ca6:	fbb5 f0f0 	udiv	r0, r5, r0
 8001caa:	fbb0 f0f9 	udiv	r0, r0, r9
 8001cae:	fb09 a210 	mls	r2, r9, r0, sl
 8001cb2:	00d2      	lsls	r2, r2, #3
 8001cb4:	3232      	adds	r2, #50	; 0x32
 8001cb6:	fbb2 f3f9 	udiv	r3, r2, r9
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	4443      	add	r3, r8
 8001cc0:	441e      	add	r6, r3
 8001cc2:	60be      	str	r6, [r7, #8]
 8001cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cc8:	429f      	cmp	r7, r3
 8001cca:	d002      	beq.n	8001cd2 <UART_SetConfig+0x14a>
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <UART_SetConfig+0x238>)
 8001cce:	429f      	cmp	r7, r3
 8001cd0:	d130      	bne.n	8001d34 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cd2:	f7ff fbd3 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	2519      	movs	r5, #25
 8001cda:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001cde:	4368      	muls	r0, r5
 8001ce0:	fbb0 f8f8 	udiv	r8, r0, r8
 8001ce4:	f7ff fbca 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001ce8:	6866      	ldr	r6, [r4, #4]
 8001cea:	4368      	muls	r0, r5
 8001cec:	00b6      	lsls	r6, r6, #2
 8001cee:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cf2:	f7ff fbc3 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4368      	muls	r0, r5
 8001d00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d04:	fbb0 f0f9 	udiv	r0, r0, r9
 8001d08:	fb09 6610 	mls	r6, r9, r0, r6
 8001d0c:	f7ff fbb6 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001d10:	fbb8 f8f9 	udiv	r8, r8, r9
 8001d14:	6861      	ldr	r1, [r4, #4]
 8001d16:	0136      	lsls	r6, r6, #4
 8001d18:	4368      	muls	r0, r5
 8001d1a:	0089      	lsls	r1, r1, #2
 8001d1c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001d20:	3632      	adds	r6, #50	; 0x32
 8001d22:	fbb0 faf1 	udiv	sl, r0, r1
 8001d26:	fbb6 f6f9 	udiv	r6, r6, r9
 8001d2a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001d2e:	f7ff fba5 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8001d32:	e02f      	b.n	8001d94 <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d34:	f7ff fb8a 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	2519      	movs	r5, #25
 8001d3c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001d40:	4368      	muls	r0, r5
 8001d42:	fbb0 f8f8 	udiv	r8, r0, r8
 8001d46:	f7ff fb81 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001d4a:	6866      	ldr	r6, [r4, #4]
 8001d4c:	4368      	muls	r0, r5
 8001d4e:	00b6      	lsls	r6, r6, #2
 8001d50:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d54:	f7ff fb7a 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4368      	muls	r0, r5
 8001d62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d66:	fbb0 f0f9 	udiv	r0, r0, r9
 8001d6a:	fb09 6610 	mls	r6, r9, r0, r6
 8001d6e:	f7ff fb6d 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001d72:	fbb8 f8f9 	udiv	r8, r8, r9
 8001d76:	6861      	ldr	r1, [r4, #4]
 8001d78:	0136      	lsls	r6, r6, #4
 8001d7a:	3632      	adds	r6, #50	; 0x32
 8001d7c:	4368      	muls	r0, r5
 8001d7e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001d82:	0089      	lsls	r1, r1, #2
 8001d84:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001d88:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001d8c:	fbb0 faf1 	udiv	sl, r0, r1
 8001d90:	f7ff fb5c 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001d94:	4345      	muls	r5, r0
 8001d96:	6860      	ldr	r0, [r4, #4]
 8001d98:	0080      	lsls	r0, r0, #2
 8001d9a:	fbb5 f0f0 	udiv	r0, r5, r0
 8001d9e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001da2:	fb09 a210 	mls	r2, r9, r0, sl
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	3232      	adds	r2, #50	; 0x32
 8001daa:	fbb2 f3f9 	udiv	r3, r2, r9
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4433      	add	r3, r6
 8001db4:	4443      	add	r3, r8
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40011400 	.word	0x40011400

08001dc4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc4:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	b340      	cbz	r0, 8001e1c <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001dca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dd2:	b91b      	cbnz	r3, 8001ddc <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001dd8:	f000 fca8 	bl	800272c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ddc:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dde:	2324      	movs	r3, #36	; 0x24
 8001de0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de4:	68d3      	ldr	r3, [r2, #12]
 8001de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dea:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff fecb 	bl	8001b88 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e02:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e0a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e0e:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e10:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001e1a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <HAL_UART_TxCpltCallback>:
 8001e20:	4770      	bx	lr

08001e22 <HAL_UART_RxCpltCallback>:
 8001e22:	4770      	bx	lr

08001e24 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e24:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e28:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e2a:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e2c:	d132      	bne.n	8001e94 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e2e:	6883      	ldr	r3, [r0, #8]
 8001e30:	6901      	ldr	r1, [r0, #16]
 8001e32:	6802      	ldr	r2, [r0, #0]
 8001e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e3a:	d10b      	bne.n	8001e54 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e3c:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e3e:	b921      	cbnz	r1, 8001e4a <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e44:	f823 2b02 	strh.w	r2, [r3], #2
 8001e48:	e002      	b.n	8001e50 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001e50:	6283      	str	r3, [r0, #40]	; 0x28
 8001e52:	e00a      	b.n	8001e6a <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e54:	b919      	cbnz	r1, 8001e5e <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	6281      	str	r1, [r0, #40]	; 0x28
 8001e5a:	6852      	ldr	r2, [r2, #4]
 8001e5c:	e004      	b.n	8001e68 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e5e:	6852      	ldr	r2, [r2, #4]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	6281      	str	r1, [r0, #40]	; 0x28
 8001e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e68:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001e6a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001e6c:	3c01      	subs	r4, #1
 8001e6e:	b2a4      	uxth	r4, r4
 8001e70:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001e72:	b98c      	cbnz	r4, 8001e98 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e74:	6803      	ldr	r3, [r0, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e86:	2320      	movs	r3, #32
 8001e88:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001e8c:	f7ff ffc9 	bl	8001e22 <HAL_UART_RxCpltCallback>
 8001e90:	4620      	mov	r0, r4
 8001e92:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2002      	movs	r0, #2
 8001e96:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
    }

    if(--huart->RxXferCount == 0U)
 8001e98:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001e9a:	bd10      	pop	{r4, pc}

08001e9c <HAL_UART_ErrorCallback>:
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ea4:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ea6:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001ea8:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eaa:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eac:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001eae:	d107      	bne.n	8001ec0 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb0:	0696      	lsls	r6, r2, #26
 8001eb2:	d55a      	bpl.n	8001f6a <HAL_UART_IRQHandler+0xca>
 8001eb4:	068d      	lsls	r5, r1, #26
 8001eb6:	d558      	bpl.n	8001f6a <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8001ebc:	f7ff bfb2 	b.w	8001e24 <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ec0:	f015 0001 	ands.w	r0, r5, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_UART_IRQHandler+0x2c>
 8001ec6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001eca:	d04e      	beq.n	8001f6a <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ecc:	07d3      	lsls	r3, r2, #31
 8001ece:	d505      	bpl.n	8001edc <HAL_UART_IRQHandler+0x3c>
 8001ed0:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed2:	bf42      	ittt	mi
 8001ed4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001ed6:	f043 0301 	orrmi.w	r3, r3, #1
 8001eda:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001edc:	0755      	lsls	r5, r2, #29
 8001ede:	d504      	bpl.n	8001eea <HAL_UART_IRQHandler+0x4a>
 8001ee0:	b118      	cbz	r0, 8001eea <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ee2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eea:	0793      	lsls	r3, r2, #30
 8001eec:	d504      	bpl.n	8001ef8 <HAL_UART_IRQHandler+0x58>
 8001eee:	b118      	cbz	r0, 8001ef8 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef8:	0716      	lsls	r6, r2, #28
 8001efa:	d504      	bpl.n	8001f06 <HAL_UART_IRQHandler+0x66>
 8001efc:	b118      	cbz	r0, 8001f06 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001efe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d066      	beq.n	8001fda <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f0c:	0695      	lsls	r5, r2, #26
 8001f0e:	d504      	bpl.n	8001f1a <HAL_UART_IRQHandler+0x7a>
 8001f10:	0688      	lsls	r0, r1, #26
 8001f12:	d502      	bpl.n	8001f1a <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff ff85 	bl	8001e24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f20:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f22:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f24:	d402      	bmi.n	8001f2c <HAL_UART_IRQHandler+0x8c>
 8001f26:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8001f2a:	d01a      	beq.n	8001f62 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f2c:	f7ff fe1e 	bl	8001b6c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	0652      	lsls	r2, r2, #25
 8001f36:	d510      	bpl.n	8001f5a <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f38:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001f3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f40:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001f42:	b150      	cbz	r0, 8001f5a <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_UART_IRQHandler+0x13c>)
 8001f46:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f48:	f7fe fb46 	bl	80005d8 <HAL_DMA_Abort_IT>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d044      	beq.n	8001fda <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f50:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f58:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff ff9e 	bl	8001e9c <HAL_UART_ErrorCallback>
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001f62:	f7ff ff9b 	bl	8001e9c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f66:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f6a:	0616      	lsls	r6, r2, #24
 8001f6c:	d527      	bpl.n	8001fbe <HAL_UART_IRQHandler+0x11e>
 8001f6e:	060d      	lsls	r5, r1, #24
 8001f70:	d525      	bpl.n	8001fbe <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f72:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f76:	2a21      	cmp	r2, #33	; 0x21
 8001f78:	d12f      	bne.n	8001fda <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f7a:	68a2      	ldr	r2, [r4, #8]
 8001f7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f80:	6a22      	ldr	r2, [r4, #32]
 8001f82:	d10a      	bne.n	8001f9a <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f84:	8811      	ldrh	r1, [r2, #0]
 8001f86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f8a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f8c:	6921      	ldr	r1, [r4, #16]
 8001f8e:	b909      	cbnz	r1, 8001f94 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001f90:	3202      	adds	r2, #2
 8001f92:	e000      	b.n	8001f96 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f94:	3201      	adds	r2, #1
 8001f96:	6222      	str	r2, [r4, #32]
 8001f98:	e003      	b.n	8001fa2 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f9a:	1c51      	adds	r1, r2, #1
 8001f9c:	6221      	str	r1, [r4, #32]
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001fa2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001faa:	b9b2      	cbnz	r2, 8001fda <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fbe:	0650      	lsls	r0, r2, #25
 8001fc0:	d50b      	bpl.n	8001fda <HAL_UART_IRQHandler+0x13a>
 8001fc2:	064a      	lsls	r2, r1, #25
 8001fc4:	d509      	bpl.n	8001fda <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fcc:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff23 	bl	8001e20 <HAL_UART_TxCpltCallback>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	08001fe1 	.word	0x08001fe1

08001fe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001fe8:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001fea:	f7ff ff57 	bl	8001e9c <HAL_UART_ErrorCallback>
 8001fee:	bd08      	pop	{r3, pc}

08001ff0 <pfSPI_WRITE>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
ST7735_tenErrCode pfSPI_WRITE (U8* pu8Data, U32 u32Size)
{
	HAL_SPI_Transmit(&hspi1,(uint8_t *)pu8Data, u32Size, 0);
 8001ff0:	b28a      	uxth	r2, r1
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4801      	ldr	r0, [pc, #4]	; (8001ffc <pfSPI_WRITE+0xc>)
 8001ff8:	f7ff bbc2 	b.w	8001780 <HAL_SPI_Transmit>
 8001ffc:	200028d8 	.word	0x200028d8

08002000 <pfDELAY_MS>:
	    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
	}

}
ST7735_tenErrCode pfDELAY_MS(U32 u32Delay)
{
 8002000:	b508      	push	{r3, lr}
	HAL_Delay(u32Delay);
 8002002:	f7fe f971 	bl	80002e8 <HAL_Delay>
}
 8002006:	bd08      	pop	{r3, pc}

08002008 <pfTFT_CS_GPIO>:
ST7735_tenErrCode pfSPI_WRITE (U8* pu8Data, U32 u32Size)
{
	HAL_SPI_Transmit(&hspi1,(uint8_t *)pu8Data, u32Size, 0);
}
ST7735_tenErrCode pfTFT_CS_GPIO(U8 u8State)
{
 8002008:	b508      	push	{r3, lr}

	if (0 == u8State)
 800200a:	4602      	mov	r2, r0
 800200c:	b928      	cbnz	r0, 800201a <pfTFT_CS_GPIO+0x12>
	{
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <pfTFT_CS_GPIO+0x24>)
 8002010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002014:	f7fe fc90 	bl	8000938 <HAL_GPIO_WritePin>
 8002018:	bd08      	pop	{r3, pc}
	}
	else if (1 == u8State)
 800201a:	2801      	cmp	r0, #1
 800201c:	d104      	bne.n	8002028 <pfTFT_CS_GPIO+0x20>
	{
	    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800201e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002022:	4802      	ldr	r0, [pc, #8]	; (800202c <pfTFT_CS_GPIO+0x24>)
 8002024:	f7fe fc88 	bl	8000938 <HAL_GPIO_WritePin>
	}
}
 8002028:	bd08      	pop	{r3, pc}
 800202a:	bf00      	nop
 800202c:	40020000 	.word	0x40020000

08002030 <pfTFT_RS_GPIO>:
ST7735_tenErrCode pfTFT_RS_GPIO(U8 u8State)
{
 8002030:	b508      	push	{r3, lr}
	if (0 == u8State)
 8002032:	4602      	mov	r2, r0
 8002034:	b920      	cbnz	r0, 8002040 <pfTFT_RS_GPIO+0x10>
	{
		HAL_GPIO_WritePin(TFT_RS_GPIO_Port, TFT_RS_Pin, GPIO_PIN_RESET);
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <pfTFT_RS_GPIO+0x20>)
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	f7fe fc7d 	bl	8000938 <HAL_GPIO_WritePin>
 800203e:	bd08      	pop	{r3, pc}
	}
	else if (1 == u8State)
 8002040:	2801      	cmp	r0, #1
 8002042:	d103      	bne.n	800204c <pfTFT_RS_GPIO+0x1c>
	{

		HAL_GPIO_WritePin(TFT_RS_GPIO_Port, TFT_RS_Pin, GPIO_PIN_SET);
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <pfTFT_RS_GPIO+0x20>)
 8002048:	f7fe fc76 	bl	8000938 <HAL_GPIO_WritePin>
	}
}
 800204c:	bd08      	pop	{r3, pc}
 800204e:	bf00      	nop
 8002050:	40020c00 	.word	0x40020c00

08002054 <pfTFT_RESET_GPIO>:
ST7735_tenErrCode pfTFT_RESET_GPIO(U8 u8state)
{
 8002054:	b508      	push	{r3, lr}
	if (0 == u8state)
 8002056:	4602      	mov	r2, r0
 8002058:	b920      	cbnz	r0, 8002064 <pfTFT_RESET_GPIO+0x10>
	{
		HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <pfTFT_RESET_GPIO+0x20>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	f7fe fc6b 	bl	8000938 <HAL_GPIO_WritePin>
 8002062:	bd08      	pop	{r3, pc}
	}
	else if (1 == u8state)
 8002064:	2801      	cmp	r0, #1
 8002066:	d103      	bne.n	8002070 <pfTFT_RESET_GPIO+0x1c>
	{
	    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	4802      	ldr	r0, [pc, #8]	; (8002074 <pfTFT_RESET_GPIO+0x20>)
 800206c:	f7fe fc64 	bl	8000938 <HAL_GPIO_WritePin>
	}

}
 8002070:	bd08      	pop	{r3, pc}
 8002072:	bf00      	nop
 8002074:	40020c00 	.word	0x40020c00

08002078 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Macro to configure the PLL multiplication factor 
    */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <SystemClock_Config+0xb4>)
 800207a:	685a      	ldr	r2, [r3, #4]
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800207c:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Macro to configure the PLL multiplication factor 
    */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 800207e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002082:	f042 0210 	orr.w	r2, r2, #16
 8002086:	605a      	str	r2, [r3, #4]

    /**Macro to configure the PLL clock source 
    */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8002088:	685a      	ldr	r2, [r3, #4]
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800208a:	b098      	sub	sp, #96	; 0x60
    */
  __HAL_RCC_PLL_PLLM_CONFIG(16);

    /**Macro to configure the PLL clock source 
    */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800208c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002090:	605a      	str	r2, [r3, #4]

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2200      	movs	r2, #0
 8002094:	9201      	str	r2, [sp, #4]
 8002096:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002098:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800209c:	6419      	str	r1, [r3, #64]	; 0x40
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <SystemClock_Config+0xb8>)
 80020aa:	9202      	str	r2, [sp, #8]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80020b2:	6019      	str	r1, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020b6:	9212      	str	r2, [sp, #72]	; 0x48

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c0:	2302      	movs	r3, #2
 80020c2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80020c6:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c8:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ca:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80020cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ce:	f7fe ff37 	bl	8000f40 <HAL_RCC_OscConfig>
 80020d2:	4601      	mov	r1, r0
 80020d4:	b100      	cbz	r0, 80020d8 <SystemClock_Config+0x60>
 80020d6:	e7fe      	b.n	80020d6 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020da:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020dc:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020de:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e0:	900b      	str	r0, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020e2:	a807      	add	r0, sp, #28
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020e6:	f7ff f8f7 	bl	80012d8 <HAL_RCC_ClockConfig>
 80020ea:	b100      	cbz	r0, 80020ee <SystemClock_Config+0x76>
 80020ec:	e7fe      	b.n	80020ec <SystemClock_Config+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
 80020ee:	f44f 7381 	mov.w	r3, #258	; 0x102
 80020f2:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f4:	a803      	add	r0, sp, #12
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80020f6:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80020f8:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80020fa:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fc:	f7ff f9d6 	bl	80014ac <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4604      	mov	r4, r0
 8002102:	b100      	cbz	r0, 8002106 <SystemClock_Config+0x8e>
 8002104:	e7fe      	b.n	8002104 <SystemClock_Config+0x8c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002106:	f7ff f99b 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002112:	f7fe f94b 	bl	80003ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002116:	2004      	movs	r0, #4
 8002118:	f7fe f95e 	bl	80003d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800211c:	4622      	mov	r2, r4
 800211e:	4621      	mov	r1, r4
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7fe f902 	bl	800032c <HAL_NVIC_SetPriority>
}
 8002128:	b018      	add	sp, #96	; 0x60
 800212a:	bd10      	pop	{r4, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	40007000 	.word	0x40007000

08002134 <bintofloat>:

}

/* USER CODE BEGIN 4 */
void bintofloat(uint16_t* datain, float* dataout)
{
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	1e84      	subs	r4, r0, #2
 8002138:	307e      	adds	r0, #126	; 0x7e
	r3=0;
	for(r=0;r<64;r++)
	{
		for(r2=0;r2<16;r2++)
		{
		  *(dataout+r3)=((*(datain+r)>>r2)&0x0001)*1.0f;
 800213a:	f834 6f02 	ldrh.w	r6, [r4, #2]!
 800213e:	460d      	mov	r5, r1
 8002140:	2200      	movs	r2, #0
 8002142:	fa46 f302 	asr.w	r3, r6, r2
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	ee07 3a90 	vmov	s15, r3
{
	int r,r2,r3;
	r3=0;
	for(r=0;r<64;r++)
	{
		for(r2=0;r2<16;r2++)
 800214e:	3201      	adds	r2, #1
		{
		  *(dataout+r3)=((*(datain+r)>>r2)&0x0001)*1.0f;
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
	int r,r2,r3;
	r3=0;
	for(r=0;r<64;r++)
	{
		for(r2=0;r2<16;r2++)
 8002154:	2a10      	cmp	r2, #16
		{
		  *(dataout+r3)=((*(datain+r)>>r2)&0x0001)*1.0f;
 8002156:	ece5 7a01 	vstmia	r5!, {s15}
{
	int r,r2,r3;
	r3=0;
	for(r=0;r<64;r++)
	{
		for(r2=0;r2<16;r2++)
 800215a:	d1f2      	bne.n	8002142 <bintofloat+0xe>
/* USER CODE BEGIN 4 */
void bintofloat(uint16_t* datain, float* dataout)
{
	int r,r2,r3;
	r3=0;
	for(r=0;r<64;r++)
 800215c:	42a0      	cmp	r0, r4
 800215e:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8002162:	d1ea      	bne.n	800213a <bintofloat+0x6>
 8002164:	bd70      	pop	{r4, r5, r6, pc}
	...

08002168 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8002168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800216c:	b0a1      	sub	sp, #132	; 0x84
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	2400      	movs	r4, #0
 8002170:	4d87      	ldr	r5, [pc, #540]	; (8002390 <main+0x228>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002172:	f7fe f891 	bl	8000298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002176:	f7ff ff7f 	bl	8002078 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	9403      	str	r4, [sp, #12]
 800217c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AMP_EN_Pin|TFT_BKL_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 800217e:	4885      	ldr	r0, [pc, #532]	; (8002394 <main+0x22c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	632b      	str	r3, [r5, #48]	; 0x30
 8002186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	9303      	str	r3, [sp, #12]
 800218e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	9404      	str	r4, [sp, #16]
 8002192:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	632b      	str	r3, [r5, #48]	; 0x30
 800219a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	9304      	str	r3, [sp, #16]
 80021a2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021a4:	9405      	str	r4, [sp, #20]
 80021a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	632b      	str	r3, [r5, #48]	; 0x30
 80021ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	9305      	str	r3, [sp, #20]
 80021b6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	9406      	str	r4, [sp, #24]
 80021ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	632b      	str	r3, [r5, #48]	; 0x30
 80021c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	9306      	str	r3, [sp, #24]
 80021ca:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021cc:	9407      	str	r4, [sp, #28]
 80021ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	632b      	str	r3, [r5, #48]	; 0x30
 80021d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AMP_EN_Pin|TFT_BKL_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f248 01c0 	movw	r1, #32960	; 0x80c0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e4:	9b07      	ldr	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AMP_EN_Pin|TFT_BKL_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 80021e6:	f7fe fba7 	bl	8000938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SALIDA_Pin|LED_Pin, GPIO_PIN_RESET);
 80021ea:	4622      	mov	r2, r4
 80021ec:	f240 4102 	movw	r1, #1026	; 0x402
 80021f0:	4869      	ldr	r0, [pc, #420]	; (8002398 <main+0x230>)
 80021f2:	f7fe fba1 	bl	8000938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80021f6:	ae10      	add	r6, sp, #64	; 0x40

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SALIDA_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_RS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 80021f8:	4622      	mov	r2, r4
 80021fa:	21c0      	movs	r1, #192	; 0xc0
 80021fc:	4867      	ldr	r0, [pc, #412]	; (800239c <main+0x234>)
 80021fe:	f7fe fb9b 	bl	8000938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002202:	2701      	movs	r7, #1
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002204:	4631      	mov	r1, r6
 8002206:	4866      	ldr	r0, [pc, #408]	; (80023a0 <main+0x238>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_RS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	9411      	str	r4, [sp, #68]	; 0x44

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_RS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800220a:	f04f 0804 	mov.w	r8, #4
 800220e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002212:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002214:	f7fe fab0 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_EN_Pin TFT_BKL_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = AMP_EN_Pin|TFT_BKL_Pin|SPI_CS_Pin;
 8002218:	f248 03c0 	movw	r3, #32960	; 0x80c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	4631      	mov	r1, r6
 800221e:	485d      	ldr	r0, [pc, #372]	; (8002394 <main+0x22c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AMP_EN_Pin TFT_BKL_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = AMP_EN_Pin|TFT_BKL_Pin|SPI_CS_Pin;
 8002220:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f7fe faa6 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : SALIDA_Pin */
  GPIO_InitStruct.Pin = SALIDA_Pin;
 800222c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SALIDA_GPIO_Port, &GPIO_InitStruct);
 8002230:	4631      	mov	r1, r6
 8002232:	4859      	ldr	r0, [pc, #356]	; (8002398 <main+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : SALIDA_Pin */
  GPIO_InitStruct.Pin = SALIDA_Pin;
 8002234:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(SALIDA_GPIO_Port, &GPIO_InitStruct);
 800223c:	f7fe fa9c 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RS_Pin|TFT_RST_Pin;
 8002240:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002242:	4631      	mov	r1, r6
 8002244:	4855      	ldr	r0, [pc, #340]	; (800239c <main+0x234>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SALIDA_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : TFT_RS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RS_Pin|TFT_RST_Pin;
 8002246:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224e:	f7fe fa93 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002252:	2302      	movs	r3, #2
 8002254:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002256:	4631      	mov	r1, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002258:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800225a:	484f      	ldr	r0, [pc, #316]	; (8002398 <main+0x230>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800225c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002262:	f7fe fa89 	bl	8000778 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002266:	9402      	str	r4, [sp, #8]
 8002268:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800226a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226e:	632b      	str	r3, [r5, #48]	; 0x30
 8002270:	6b2b      	ldr	r3, [r5, #48]	; 0x30

/* I2S2 init function */
static void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
 8002272:	4d4c      	ldr	r5, [pc, #304]	; (80023a4 <main+0x23c>)
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	9302      	str	r3, [sp, #8]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800227a:	4622      	mov	r2, r4
 800227c:	4621      	mov	r1, r4
 800227e:	2010      	movs	r0, #16
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002280:	9b02      	ldr	r3, [sp, #8]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002282:	f7fe f853 	bl	800032c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002286:	2010      	movs	r0, #16
 8002288:	f7fe f884 	bl	8000394 <HAL_NVIC_EnableIRQ>
/* I2S2 init function */
static void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800228c:	4846      	ldr	r0, [pc, #280]	; (80023a8 <main+0x240>)
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800228e:	60ac      	str	r4, [r5, #8]
/* I2S2 init function */
static void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002290:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002294:	e885 0009 	stmia.w	r5, {r0, r3}
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002298:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800229c:	4628      	mov	r0, r5
{

  hi2s2.Instance = SPI2;
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800229e:	60ec      	str	r4, [r5, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80022a0:	612c      	str	r4, [r5, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80022a2:	616b      	str	r3, [r5, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80022a4:	61ac      	str	r4, [r5, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80022a6:	61ec      	str	r4, [r5, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80022a8:	622c      	str	r4, [r5, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80022aa:	f7fe fb6f 	bl	800098c <HAL_I2S_Init>
 80022ae:	b100      	cbz	r0, 80022b2 <main+0x14a>
 80022b0:	e7fe      	b.n	80022b0 <main+0x148>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <main+0x244>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022b4:	493e      	ldr	r1, [pc, #248]	; (80023b0 <main+0x248>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	6098      	str	r0, [r3, #8]
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022bc:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c4:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c6:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c8:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022cc:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ce:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d0:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022d4:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022d6:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022da:	f7ff fa14 	bl	8001706 <HAL_SPI_Init>
 80022de:	b100      	cbz	r0, 80022e2 <main+0x17a>
 80022e0:	e7fe      	b.n	80022e0 <main+0x178>

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80022e2:	4c34      	ldr	r4, [pc, #208]	; (80023b4 <main+0x24c>)
  huart3.Init.BaudRate = 115200;
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <main+0x250>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022e6:	60a0      	str	r0, [r4, #8]
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 80022e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022ec:	e884 000c 	stmia.w	r4, {r2, r3}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022f0:	60e0      	str	r0, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022f2:	6120      	str	r0, [r4, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f4:	230c      	movs	r3, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	61a0      	str	r0, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fa:	4620      	mov	r0, r4
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022fc:	6163      	str	r3, [r4, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fe:	f7ff fd61 	bl	8001dc4 <HAL_UART_Init>
 8002302:	b100      	cbz	r0, 8002306 <main+0x19e>
 8002304:	e7fe      	b.n	8002304 <main+0x19c>
static void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8002306:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80023c8 <main+0x260>
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <main+0x254>)
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	f8c9 0008 	str.w	r0, [r9, #8]
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
 8002310:	e889 0088 	stmia.w	r9, {r3, r7}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 999;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002314:	4648      	mov	r0, r9
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 999;
 8002316:	f240 33e7 	movw	r3, #999	; 0x3e7
 800231a:	f8c9 300c 	str.w	r3, [r9, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800231e:	f7ff fbe7 	bl	8001af0 <HAL_TIM_Base_Init>
 8002322:	b100      	cbz	r0, 8002326 <main+0x1be>
 8002324:	e7fe      	b.n	8002324 <main+0x1bc>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002328:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800232a:	4631      	mov	r1, r6
 800232c:	4648      	mov	r0, r9
 800232e:	f7ff fbf9 	bl	8001b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	b100      	cbz	r0, 8002336 <main+0x1ce>
 8002334:	e7fe      	b.n	8002334 <main+0x1cc>

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8002336:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80023cc <main+0x264>
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <main+0x258>)
 800233c:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002340:	4648      	mov	r0, r9
 8002342:	f7fe f85a 	bl	80003fa <HAL_DAC_Init>
 8002346:	4602      	mov	r2, r0
 8002348:	b100      	cbz	r0, 800234c <main+0x1e4>
 800234a:	e7fe      	b.n	800234a <main+0x1e2>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800234c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800234e:	4631      	mov	r1, r6
 8002350:	4648      	mov	r0, r9
    _Error_Handler(__FILE__, __LINE__);
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002352:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002356:	f7fe f890 	bl	800047a <HAL_DAC_ConfigChannel>
 800235a:	b100      	cbz	r0, 800235e <main+0x1f6>
 800235c:	e7fe      	b.n	800235c <main+0x1f4>
static void MX_TIM7_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 800235e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80023d0 <main+0x268>
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <main+0x25c>)
  htim7.Init.Prescaler = 1;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	f8c8 0008 	str.w	r0, [r8, #8]
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 1;
 8002368:	e888 0088 	stmia.w	r8, {r3, r7}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 99;
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800236c:	4640      	mov	r0, r8
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 1;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 99;
 800236e:	2363      	movs	r3, #99	; 0x63
 8002370:	f8c8 300c 	str.w	r3, [r8, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002374:	f7ff fbbc 	bl	8001af0 <HAL_TIM_Base_Init>
 8002378:	b100      	cbz	r0, 800237c <main+0x214>
 800237a:	e7fe      	b.n	800237a <main+0x212>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800237c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002380:	4631      	mov	r1, r6
 8002382:	4640      	mov	r0, r8
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002384:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002386:	f7ff fbcd 	bl	8001b24 <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4607      	mov	r7, r0
 800238c:	b310      	cbz	r0, 80023d4 <main+0x26c>
 800238e:	e7fe      	b.n	800238e <main+0x226>
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	40021000 	.word	0x40021000
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40020800 	.word	0x40020800
 80023a4:	200029ec 	.word	0x200029ec
 80023a8:	40003800 	.word	0x40003800
 80023ac:	200028d8 	.word	0x200028d8
 80023b0:	40013000 	.word	0x40013000
 80023b4:	200010e4 	.word	0x200010e4
 80023b8:	40004800 	.word	0x40004800
 80023bc:	40001000 	.word	0x40001000
 80023c0:	40007400 	.word	0x40007400
 80023c4:	40001400 	.word	0x40001400
 80023c8:	2000289c 	.word	0x2000289c
 80023cc:	20002808 	.word	0x20002808
 80023d0:	200029b0 	.word	0x200029b0
  MX_TIM6_Init();
  MX_DAC_Init();
  MX_TIM7_Init();

  /* USER CODE BEGIN 2 */
  hi2s2.Instance->I2SPR = 0x002A;
 80023d4:	682b      	ldr	r3, [r5, #0]
	  k=0;
	  for(j=0;j<20;j++)
	  {
		  for(i=0;i<14;i++)
		  {
			  sprintf(str,"%d",(uint16_t)fsegundo[k]);
 80023d6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80024cc <main+0x364>
  MX_TIM6_Init();
  MX_DAC_Init();
  MX_TIM7_Init();

  /* USER CODE BEGIN 2 */
  hi2s2.Instance->I2SPR = 0x002A;
 80023da:	222a      	movs	r2, #42	; 0x2a
 80023dc:	621a      	str	r2, [r3, #32]
  ST7735_BSP.DELAY_MS = pfDELAY_MS;
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <main+0x340>)
 80023e0:	930f      	str	r3, [sp, #60]	; 0x3c
  ST7735_BSP.SPI_WRITE = pfSPI_WRITE;
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <main+0x344>)
 80023e4:	930b      	str	r3, [sp, #44]	; 0x2c
  ST7735_BSP.TFT_CS_GPIO = pfTFT_CS_GPIO;
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <main+0x348>)
 80023e8:	930c      	str	r3, [sp, #48]	; 0x30
  ST7735_BSP.TFT_RESET_GPIO = pfTFT_RESET_GPIO;
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <main+0x34c>)
 80023ec:	930e      	str	r3, [sp, #56]	; 0x38
  ST7735_BSP.TFT_RS_GPIO = pfTFT_RS_GPIO;
  ST7735_enRegisterBSP(&ST7735_BSP);
 80023ee:	a80b      	add	r0, sp, #44	; 0x2c
  hi2s2.Instance->I2SPR = 0x002A;
  ST7735_BSP.DELAY_MS = pfDELAY_MS;
  ST7735_BSP.SPI_WRITE = pfSPI_WRITE;
  ST7735_BSP.TFT_CS_GPIO = pfTFT_CS_GPIO;
  ST7735_BSP.TFT_RESET_GPIO = pfTFT_RESET_GPIO;
  ST7735_BSP.TFT_RS_GPIO = pfTFT_RS_GPIO;
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <main+0x350>)
 80023f2:	930d      	str	r3, [sp, #52]	; 0x34
  ST7735_enRegisterBSP(&ST7735_BSP);
 80023f4:	f000 fbce 	bl	8002b94 <ST7735_enRegisterBSP>
  ST7735_enInit();
 80023f8:	f000 fa48 	bl	800288c <ST7735_enInit>
  ST7735_enFillDisplay(0xFFFFFFFF);
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 fbe0 	bl	8002bc4 <ST7735_enFillDisplay>

  ST7735_STR.pchString= "HOLA";
  ST7735_STR.u32StrColour = 0;
  ST7735_STR.u8XCursor=100;
 8002404:	f04f 0864 	mov.w	r8, #100	; 0x64
  ST7735_BSP.TFT_RS_GPIO = pfTFT_RS_GPIO;
  ST7735_enRegisterBSP(&ST7735_BSP);
  ST7735_enInit();
  ST7735_enFillDisplay(0xFFFFFFFF);

  ST7735_STR.pchString= "HOLA";
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <main+0x354>)
 800240a:	930a      	str	r3, [sp, #40]	; 0x28
  PDM_Filter_Init(&Filter);
  */


  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_UART_Init(&huart3);
 800240c:	4620      	mov	r0, r4
  ST7735_enRegisterBSP(&ST7735_BSP);
  ST7735_enInit();
  ST7735_enFillDisplay(0xFFFFFFFF);

  ST7735_STR.pchString= "HOLA";
  ST7735_STR.u32StrColour = 0;
 800240e:	9709      	str	r7, [sp, #36]	; 0x24
  ST7735_STR.u8XCursor=100;
 8002410:	f88d 8020 	strb.w	r8, [sp, #32]
  ST7735_STR.u8Ycursor=100;
 8002414:	f88d 8021 	strb.w	r8, [sp, #33]	; 0x21
		  }
		  fsegundo[i]=fbuf/32;
	  }
*/
	  k=0;
	  for(j=0;j<20;j++)
 8002418:	4c29      	ldr	r4, [pc, #164]	; (80024c0 <main+0x358>)
  PDM_Filter_Init(&Filter);
  */


  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_UART_Init(&huart3);
 800241a:	f7ff fcd3 	bl	8001dc4 <HAL_UART_Init>

  /* USER CODE BEGIN 3 */

	  //for(k=0;k<1024;k++)
	  //{
	  HAL_I2S_Receive(&hi2s2,segundo,64,100);
 800241e:	4643      	mov	r3, r8
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	4928      	ldr	r1, [pc, #160]	; (80024c4 <main+0x35c>)
 8002424:	4628      	mov	r0, r5
			  fbuf+=fsegundo[i*32+j];
		  }
		  fsegundo[i]=fbuf/32;
	  }
*/
	  k=0;
 8002426:	4d28      	ldr	r5, [pc, #160]	; (80024c8 <main+0x360>)

  /* USER CODE BEGIN 3 */

	  //for(k=0;k<1024;k++)
	  //{
	  HAL_I2S_Receive(&hi2s2,segundo,64,100);
 8002428:	f7fe fbc5 	bl	8000bb6 <HAL_I2S_Receive>
		 // {
		//	 k=((segundo[i]>>j)&0x0001);
			// HAL_GPIO_WritePin(SALIDA_GPIO_Port,SALIDA_Pin,k);
		  //}
	  //}
	  bintofloat(segundo,fsegundo);
 800242c:	4927      	ldr	r1, [pc, #156]	; (80024cc <main+0x364>)
 800242e:	4825      	ldr	r0, [pc, #148]	; (80024c4 <main+0x35c>)
 8002430:	f7ff fe80 	bl	8002134 <bintofloat>
			  fbuf+=fsegundo[i*32+j];
		  }
		  fsegundo[i]=fbuf/32;
	  }
*/
	  k=0;
 8002434:	602f      	str	r7, [r5, #0]
	  for(j=0;j<20;j++)
 8002436:	6027      	str	r7, [r4, #0]
	  {
		  for(i=0;i<14;i++)
 8002438:	4f25      	ldr	r7, [pc, #148]	; (80024d0 <main+0x368>)
 800243a:	46b8      	mov	r8, r7
		  }
		  fsegundo[i]=fbuf/32;
	  }
*/
	  k=0;
	  for(j=0;j<20;j++)
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	2b13      	cmp	r3, #19
 8002440:	dc30      	bgt.n	80024a4 <main+0x33c>
	  {
		  for(i=0;i<14;i++)
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	f8d8 3000 	ldr.w	r3, [r8]
 800244a:	2b0d      	cmp	r3, #13
 800244c:	dc26      	bgt.n	800249c <main+0x334>
		  {
			  sprintf(str,"%d",(uint16_t)fsegundo[k]);
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	4920      	ldr	r1, [pc, #128]	; (80024d4 <main+0x36c>)
 8002452:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245e:	4630      	mov	r0, r6
 8002460:	edcd 7a01 	vstr	s15, [sp, #4]
 8002464:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002468:	f000 fd82 	bl	8002f70 <siprintf>
			  ST7735_STR.pchString = str;
			  ST7735_STR.u32StrColour=0;
 800246c:	2300      	movs	r3, #0
 800246e:	9309      	str	r3, [sp, #36]	; 0x24
			  ST7735_STR.u8XCursor=j*10;
 8002470:	6823      	ldr	r3, [r4, #0]
	  for(j=0;j<20;j++)
	  {
		  for(i=0;i<14;i++)
		  {
			  sprintf(str,"%d",(uint16_t)fsegundo[k]);
			  ST7735_STR.pchString = str;
 8002472:	960a      	str	r6, [sp, #40]	; 0x28
			  ST7735_STR.u32StrColour=0;
			  ST7735_STR.u8XCursor=j*10;
 8002474:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	f88d 3020 	strb.w	r3, [sp, #32]
			  ST7735_STR.u8Ycursor=i*10;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002484:	005b      	lsls	r3, r3, #1
			  ST7735_enPrintStr(&ST7735_STR);
 8002486:	a808      	add	r0, sp, #32
		  {
			  sprintf(str,"%d",(uint16_t)fsegundo[k]);
			  ST7735_STR.pchString = str;
			  ST7735_STR.u32StrColour=0;
			  ST7735_STR.u8XCursor=j*10;
			  ST7735_STR.u8Ycursor=i*10;
 8002488:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			  ST7735_enPrintStr(&ST7735_STR);
 800248c:	f000 fbb8 	bl	8002c00 <ST7735_enPrintStr>
			  k++;
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	602b      	str	r3, [r5, #0]
	  }
*/
	  k=0;
	  for(j=0;j<20;j++)
	  {
		  for(i=0;i<14;i++)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	e7d3      	b.n	8002444 <main+0x2dc>
		  }
		  fsegundo[i]=fbuf/32;
	  }
*/
	  k=0;
	  for(j=0;j<20;j++)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	6023      	str	r3, [r4, #0]
 80024a2:	e7cb      	b.n	800243c <main+0x2d4>
 80024a4:	e7fe      	b.n	80024a4 <main+0x33c>
 80024a6:	bf00      	nop
 80024a8:	08002001 	.word	0x08002001
 80024ac:	08001ff1 	.word	0x08001ff1
 80024b0:	08002009 	.word	0x08002009
 80024b4:	08002055 	.word	0x08002055
 80024b8:	08002031 	.word	0x08002031
 80024bc:	080037f0 	.word	0x080037f0
 80024c0:	20000088 	.word	0x20000088
 80024c4:	20002930 	.word	0x20002930
 80024c8:	2000008c 	.word	0x2000008c
 80024cc:	200000a4 	.word	0x200000a4
 80024d0:	20000084 	.word	0x20000084
 80024d4:	080037f5 	.word	0x080037f5

080024d8 <HAL_TIM_PeriodElapsedCallback>:
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	//int in;
	//float fbuf;
	//float fsegundo[16];
	if ( htim->Instance == TIM6){
 80024d8:	6802      	ldr	r2, [r0, #0]
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x14>)
 80024dc:	429a      	cmp	r2, r3
 80024de:	d104      	bne.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x12>

		//{
			//for(j=0;j<16;j++)
					  //{
						// k=((segundo[i]>>indice)&0x0001);
						 HAL_GPIO_TogglePin(SALIDA_GPIO_Port,SALIDA_Pin);
 80024e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80024e6:	f7fe ba2b 	b.w	8000940 <HAL_GPIO_TogglePin>
 80024ea:	4770      	bx	lr
 80024ec:	40001000 	.word	0x40001000
 80024f0:	40021000 	.word	0x40021000

080024f4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80024f4:	e7fe      	b.n	80024f4 <_Error_Handler>

080024f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7fd ff05 	bl	8000308 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	4611      	mov	r1, r2
 8002502:	f06f 000b 	mvn.w	r0, #11
 8002506:	f7fd ff11 	bl	800032c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	4611      	mov	r1, r2
 800250e:	f06f 000a 	mvn.w	r0, #10
 8002512:	f7fd ff0b 	bl	800032c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	4611      	mov	r1, r2
 800251a:	f06f 0009 	mvn.w	r0, #9
 800251e:	f7fd ff05 	bl	800032c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	4611      	mov	r1, r2
 8002526:	f06f 0004 	mvn.w	r0, #4
 800252a:	f7fd feff 	bl	800032c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	4611      	mov	r1, r2
 8002532:	f06f 0003 	mvn.w	r0, #3
 8002536:	f7fd fef9 	bl	800032c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	4611      	mov	r1, r2
 800253e:	f06f 0001 	mvn.w	r0, #1
 8002542:	f7fd fef3 	bl	800032c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	4611      	mov	r1, r2
 800254a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002552:	f7fd beeb 	b.w	800032c <HAL_NVIC_SetPriority>
	...

08002558 <HAL_DAC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002558:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 800255a:	6802      	ldr	r2, [r0, #0]
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_DAC_MspInit+0x8c>)
 800255e:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002560:	b086      	sub	sp, #24
 8002562:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8002564:	d13b      	bne.n	80025de <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002566:	2500      	movs	r5, #0
 8002568:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800256c:	9500      	str	r5, [sp, #0]
 800256e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	481d      	ldr	r0, [pc, #116]	; (80025e8 <HAL_DAC_MspInit+0x90>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002572:	4c1e      	ldr	r4, [pc, #120]	; (80025ec <HAL_DAC_MspInit+0x94>)
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002574:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800257e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	9b00      	ldr	r3, [sp, #0]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002586:	2310      	movs	r3, #16
 8002588:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	a901      	add	r1, sp, #4
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258c:	2303      	movs	r3, #3
 800258e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	f7fe f8f2 	bl	8000778 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_DAC_MspInit+0x98>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002596:	60e5      	str	r5, [r4, #12]

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800259e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80025a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a6:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ac:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_NORMAL;
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80025ae:	4620      	mov	r0, r4
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b4:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80025b6:	61e5      	str	r5, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80025b8:	6225      	str	r5, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ba:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80025bc:	f7fd ff96 	bl	80004ec <HAL_DMA_Init>
 80025c0:	b118      	cbz	r0, 80025ca <HAL_DAC_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 80025c2:	2172      	movs	r1, #114	; 0x72
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <HAL_DAC_MspInit+0x9c>)
 80025c6:	f7ff ff95 	bl	80024f4 <_Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80025cc:	60b4      	str	r4, [r6, #8]

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025ce:	2036      	movs	r0, #54	; 0x36
 80025d0:	4611      	mov	r1, r2
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80025d2:	63a6      	str	r6, [r4, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025d4:	f7fd feaa 	bl	800032c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025d8:	2036      	movs	r0, #54	; 0x36
 80025da:	f7fd fedb 	bl	8000394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80025de:	b006      	add	sp, #24
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	bf00      	nop
 80025e4:	40007400 	.word	0x40007400
 80025e8:	40020000 	.word	0x40020000
 80025ec:	20001544 	.word	0x20001544
 80025f0:	40026088 	.word	0x40026088
 80025f4:	080037f8 	.word	0x080037f8

080025f8 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI2)
 80025fa:	6802      	ldr	r2, [r0, #0]
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_I2S_MspInit+0x70>)
 80025fe:	429a      	cmp	r2, r3
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002600:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI2)
 8002602:	d12e      	bne.n	8002662 <HAL_I2S_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002604:	2500      	movs	r5, #0
 8002606:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800260a:	9500      	str	r5, [sp, #0]
 800260c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	4817      	ldr	r0, [pc, #92]	; (800266c <HAL_I2S_MspInit+0x74>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	9300      	str	r3, [sp, #0]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002622:	2605      	movs	r6, #5
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002624:	9b00      	ldr	r3, [sp, #0]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	9402      	str	r4, [sp, #8]
    /**I2S2 GPIO Configuration    
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002628:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	a901      	add	r1, sp, #4
    /**I2S2 GPIO Configuration    
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800262c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002630:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002632:	f7fe f8a1 	bl	8000778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	a901      	add	r1, sp, #4
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <HAL_I2S_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800263e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002646:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f7fe f896 	bl	8000778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800264c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	a901      	add	r1, sp, #4
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <HAL_I2S_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002654:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f7fe f88b 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002662:	b006      	add	sp, #24
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	bf00      	nop
 8002668:	40003800 	.word	0x40003800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020400 	.word	0x40020400

08002674 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002676:	6802      	ldr	r2, [r0, #0]
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_SPI_MspInit+0x44>)
 800267a:	429a      	cmp	r2, r3
 800267c:	d119      	bne.n	80026b2 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267e:	2100      	movs	r1, #0
 8002680:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002684:	9100      	str	r1, [sp, #0]
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <HAL_SPI_MspInit+0x48>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800268a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800269c:	2338      	movs	r3, #56	; 0x38
 800269e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026aa:	2305      	movs	r3, #5
 80026ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	f7fe f863 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026b2:	b007      	add	sp, #28
 80026b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b8:	40013000 	.word	0x40013000
 80026bc:	40020400 	.word	0x40020400

080026c0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIM_Base_MspInit+0x60>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026ca:	2200      	movs	r2, #0
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 80026ce:	9200      	str	r2, [sp, #0]
 80026d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026d2:	f041 0110 	orr.w	r1, r1, #16
 80026d6:	6419      	str	r1, [r3, #64]	; 0x40
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026e0:	2036      	movs	r0, #54	; 0x36
 80026e2:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026e4:	9b00      	ldr	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026e6:	f7fd fe21 	bl	800032c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ea:	2036      	movs	r0, #54	; 0x36
 80026ec:	e013      	b.n	8002716 <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_TIM_Base_MspInit+0x68>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d112      	bne.n	800271a <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026f4:	2200      	movs	r2, #0
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026fc:	f041 0120 	orr.w	r1, r1, #32
 8002700:	6419      	str	r1, [r3, #64]	; 0x40
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800270a:	2037      	movs	r0, #55	; 0x37
 800270c:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800270e:	9b01      	ldr	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002710:	f7fd fe0c 	bl	800032c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002714:	2037      	movs	r0, #55	; 0x37
 8002716:	f7fd fe3d 	bl	8000394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800271a:	b003      	add	sp, #12
 800271c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002720:	40001000 	.word	0x40001000
 8002724:	40023800 	.word	0x40023800
 8002728:	40001400 	.word	0x40001400

0800272c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800272c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800272e:	6802      	ldr	r2, [r0, #0]
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_UART_MspInit+0x58>)
 8002732:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002734:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8002736:	d123      	bne.n	8002780 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002738:	2400      	movs	r4, #0
 800273a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800273e:	9400      	str	r4, [sp, #0]
 8002740:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	4811      	ldr	r0, [pc, #68]	; (8002788 <HAL_UART_MspInit+0x5c>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002744:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002748:	6419      	str	r1, [r3, #64]	; 0x40
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002754:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002758:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275e:	2301      	movs	r3, #1
 8002760:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002766:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002768:	2307      	movs	r3, #7
 800276a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f7fe f804 	bl	8000778 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002770:	2027      	movs	r0, #39	; 0x27
 8002772:	4622      	mov	r2, r4
 8002774:	4621      	mov	r1, r4
 8002776:	f7fd fdd9 	bl	800032c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800277a:	2027      	movs	r0, #39	; 0x27
 800277c:	f7fd fe0a 	bl	8000394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002780:	b006      	add	sp, #24
 8002782:	bd10      	pop	{r4, pc}
 8002784:	40004800 	.word	0x40004800
 8002788:	40020400 	.word	0x40020400

0800278c <NMI_Handler>:
 800278c:	4770      	bx	lr

0800278e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800278e:	e7fe      	b.n	800278e <HardFault_Handler>

08002790 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002790:	e7fe      	b.n	8002790 <MemManage_Handler>

08002792 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002792:	e7fe      	b.n	8002792 <BusFault_Handler>

08002794 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002794:	e7fe      	b.n	8002794 <UsageFault_Handler>

08002796 <SVC_Handler>:
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:
 8002798:	4770      	bx	lr

0800279a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800279a:	4770      	bx	lr

0800279c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800279c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279e:	f7fd fd95 	bl	80002cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80027a6:	f7fd be24 	b.w	80003f2 <HAL_SYSTICK_IRQHandler>
	...

080027ac <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <DMA1_Stream5_IRQHandler+0x8>)
 80027ae:	f7fd bf25 	b.w	80005fc <HAL_DMA_IRQHandler>
 80027b2:	bf00      	nop
 80027b4:	20001544 	.word	0x20001544

080027b8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <USART3_IRQHandler+0x8>)
 80027ba:	f7ff bb71 	b.w	8001ea0 <HAL_UART_IRQHandler>
 80027be:	bf00      	nop
 80027c0:	200010e4 	.word	0x200010e4

080027c4 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 80027c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80027c6:	4804      	ldr	r0, [pc, #16]	; (80027d8 <TIM6_DAC_IRQHandler+0x14>)
 80027c8:	f7fd fe2b 	bl	8000422 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
  HAL_TIM_IRQHandler(&htim6);
 80027d2:	f7ff b886 	b.w	80018e2 <HAL_TIM_IRQHandler>
 80027d6:	bf00      	nop
 80027d8:	20002808 	.word	0x20002808
 80027dc:	2000289c 	.word	0x2000289c

080027e0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027e0:	4801      	ldr	r0, [pc, #4]	; (80027e8 <TIM7_IRQHandler+0x8>)
 80027e2:	f7ff b87e 	b.w	80018e2 <HAL_TIM_IRQHandler>
 80027e6:	bf00      	nop
 80027e8:	200029b0 	.word	0x200029b0

080027ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ec:	490f      	ldr	r1, [pc, #60]	; (800282c <SystemInit+0x40>)
 80027ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <SystemInit+0x44>)
 80027fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027fe:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002806:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800280e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002812:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <SystemInit+0x48>)
 8002816:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800281e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002820:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002826:	608b      	str	r3, [r1, #8]
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	40023800 	.word	0x40023800
 8002834:	24003010 	.word	0x24003010

08002838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800283c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800283e:	e003      	b.n	8002848 <LoopCopyDataInit>

08002840 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002842:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002844:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002846:	3104      	adds	r1, #4

08002848 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800284c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800284e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002850:	d3f6      	bcc.n	8002840 <CopyDataInit>
  ldr  r2, =_sbss
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002854:	e002      	b.n	800285c <LoopFillZerobss>

08002856 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002856:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002858:	f842 3b04 	str.w	r3, [r2], #4

0800285c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800285e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002860:	d3f9      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002862:	f7ff ffc3 	bl	80027ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002866:	f000 fb5d 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286a:	f7ff fc7d 	bl	8002168 <main>
  bx  lr    
 800286e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002870:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002874:	08003a4c 	.word	0x08003a4c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800287c:	20000068 	.word	0x20000068
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002880:	20000068 	.word	0x20000068
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002884:	20002a38 	.word	0x20002a38

08002888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC_IRQHandler>
	...

0800288c <ST7735_enInit>:

/******************************************************************************
PUBLIC FUNCTIONS - Functions accessed by other components
******************************************************************************/
ST7735_tenErrCode ST7735_enInit(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002892:	2300      	movs	r3, #0
 8002894:	71fb      	strb	r3, [r7, #7]

    ST7735_enReset();
 8002896:	f000 f95d 	bl	8002b54 <ST7735_enReset>
    /* Out of sleep mode, 0 args, no delay */
    ST7735__enWrite(ST7735_SLPOUT, ST7735_nu8CMD);
 800289a:	2100      	movs	r1, #0
 800289c:	2011      	movs	r0, #17
 800289e:	f000 f9d5 	bl	8002c4c <ST7735__enWrite>
    /* Frame rate control - normal mode,
     *  3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ST7735__enWrite(ST7735_FRMCTR1, ST7735_nu8CMD);
 80028a2:	2100      	movs	r1, #0
 80028a4:	20b1      	movs	r0, #177	; 0xb1
 80028a6:	f000 f9d1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x01, ST7735_nu8DAT);
 80028aa:	2101      	movs	r1, #1
 80028ac:	2001      	movs	r0, #1
 80028ae:	f000 f9cd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2C, ST7735_nu8DAT);
 80028b2:	2101      	movs	r1, #1
 80028b4:	202c      	movs	r0, #44	; 0x2c
 80028b6:	f000 f9c9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 80028ba:	2101      	movs	r1, #1
 80028bc:	202d      	movs	r0, #45	; 0x2d
 80028be:	f000 f9c5 	bl	8002c4c <ST7735__enWrite>
    /* Frame rate control - idle mode,
     *  3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    ST7735__enWrite(ST7735_FRMCTR2, ST7735_nu8CMD);
 80028c2:	2100      	movs	r1, #0
 80028c4:	20b2      	movs	r0, #178	; 0xb2
 80028c6:	f000 f9c1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x01, ST7735_nu8DAT);
 80028ca:	2101      	movs	r1, #1
 80028cc:	2001      	movs	r0, #1
 80028ce:	f000 f9bd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2C, ST7735_nu8DAT);
 80028d2:	2101      	movs	r1, #1
 80028d4:	202c      	movs	r0, #44	; 0x2c
 80028d6:	f000 f9b9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 80028da:	2101      	movs	r1, #1
 80028dc:	202d      	movs	r0, #45	; 0x2d
 80028de:	f000 f9b5 	bl	8002c4c <ST7735__enWrite>
    /* Frame rate control - partial mode,
     *  6 args: Dot inversion mode, Line inversion mode */
    ST7735__enWrite(ST7735_FRMCTR3, ST7735_nu8CMD);
 80028e2:	2100      	movs	r1, #0
 80028e4:	20b3      	movs	r0, #179	; 0xb3
 80028e6:	f000 f9b1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x01, ST7735_nu8DAT);
 80028ea:	2101      	movs	r1, #1
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 f9ad 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2C, ST7735_nu8DAT);
 80028f2:	2101      	movs	r1, #1
 80028f4:	202c      	movs	r0, #44	; 0x2c
 80028f6:	f000 f9a9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 80028fa:	2101      	movs	r1, #1
 80028fc:	202d      	movs	r0, #45	; 0x2d
 80028fe:	f000 f9a5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x01, ST7735_nu8DAT);
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f000 f9a1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2C, ST7735_nu8DAT);
 800290a:	2101      	movs	r1, #1
 800290c:	202c      	movs	r0, #44	; 0x2c
 800290e:	f000 f99d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 8002912:	2101      	movs	r1, #1
 8002914:	202d      	movs	r0, #45	; 0x2d
 8002916:	f000 f999 	bl	8002c4c <ST7735__enWrite>
    /* Display inversion ctrl,
     *  1 arg, no delay: No inversion */
    ST7735__enWrite(ST7735_INVCTR, ST7735_nu8CMD);
 800291a:	2100      	movs	r1, #0
 800291c:	20b4      	movs	r0, #180	; 0xb4
 800291e:	f000 f995 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x07, ST7735_nu8DAT);
 8002922:	2101      	movs	r1, #1
 8002924:	2007      	movs	r0, #7
 8002926:	f000 f991 	bl	8002c4c <ST7735__enWrite>
    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    ST7735__enWrite(ST7735_PWCTR1, ST7735_nu8CMD);
 800292a:	2100      	movs	r1, #0
 800292c:	20c0      	movs	r0, #192	; 0xc0
 800292e:	f000 f98d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0xA2, ST7735_nu8DAT);
 8002932:	2101      	movs	r1, #1
 8002934:	20a2      	movs	r0, #162	; 0xa2
 8002936:	f000 f989 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x02, ST7735_nu8DAT);
 800293a:	2101      	movs	r1, #1
 800293c:	2002      	movs	r0, #2
 800293e:	f000 f985 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x84, ST7735_nu8DAT);
 8002942:	2101      	movs	r1, #1
 8002944:	2084      	movs	r0, #132	; 0x84
 8002946:	f000 f981 	bl	8002c4c <ST7735__enWrite>
    /* Power control, 1 arg,
     *  no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    ST7735__enWrite(ST7735_PWCTR2, ST7735_nu8CMD);
 800294a:	2100      	movs	r1, #0
 800294c:	20c1      	movs	r0, #193	; 0xc1
 800294e:	f000 f97d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0xC5, ST7735_nu8DAT);
 8002952:	2101      	movs	r1, #1
 8002954:	20c5      	movs	r0, #197	; 0xc5
 8002956:	f000 f979 	bl	8002c4c <ST7735__enWrite>
    /* Power control, 2 args,
     *  no delay: Opamp current small, Boost frequency */
    ST7735__enWrite(ST7735_PWCTR3, ST7735_nu8CMD);
 800295a:	2100      	movs	r1, #0
 800295c:	20c2      	movs	r0, #194	; 0xc2
 800295e:	f000 f975 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x0A, ST7735_nu8DAT);
 8002962:	2101      	movs	r1, #1
 8002964:	200a      	movs	r0, #10
 8002966:	f000 f971 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x00, ST7735_nu8DAT);
 800296a:	2101      	movs	r1, #1
 800296c:	2000      	movs	r0, #0
 800296e:	f000 f96d 	bl	8002c4c <ST7735__enWrite>
    /* Power control,
     *  2 args, no delay: BCLK/2, Opamp current small & Medium low */
    ST7735__enWrite(ST7735_PWCTR4, ST7735_nu8CMD);
 8002972:	2100      	movs	r1, #0
 8002974:	20c3      	movs	r0, #195	; 0xc3
 8002976:	f000 f969 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x8A, ST7735_nu8DAT);
 800297a:	2101      	movs	r1, #1
 800297c:	208a      	movs	r0, #138	; 0x8a
 800297e:	f000 f965 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2A, ST7735_nu8DAT);
 8002982:	2101      	movs	r1, #1
 8002984:	202a      	movs	r0, #42	; 0x2a
 8002986:	f000 f961 	bl	8002c4c <ST7735__enWrite>
    /* Power control, 2 args, no delay */
    ST7735__enWrite(ST7735_PWCTR5, ST7735_nu8CMD);
 800298a:	2100      	movs	r1, #0
 800298c:	20c4      	movs	r0, #196	; 0xc4
 800298e:	f000 f95d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x8A, ST7735_nu8DAT);
 8002992:	2101      	movs	r1, #1
 8002994:	208a      	movs	r0, #138	; 0x8a
 8002996:	f000 f959 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0xEE, ST7735_nu8DAT);
 800299a:	2101      	movs	r1, #1
 800299c:	20ee      	movs	r0, #238	; 0xee
 800299e:	f000 f955 	bl	8002c4c <ST7735__enWrite>
    /* Power control, 1 arg, no delay */
    ST7735__enWrite(ST7735_VMCTR1, ST7735_nu8CMD);
 80029a2:	2100      	movs	r1, #0
 80029a4:	20c5      	movs	r0, #197	; 0xc5
 80029a6:	f000 f951 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x0E, ST7735_nu8DAT);
 80029aa:	2101      	movs	r1, #1
 80029ac:	200e      	movs	r0, #14
 80029ae:	f000 f94d 	bl	8002c4c <ST7735__enWrite>
    /* Don't invert display, no args, no delay */
    ST7735__enWrite(ST7735_INVOFF, ST7735_nu8CMD);
 80029b2:	2100      	movs	r1, #0
 80029b4:	2020      	movs	r0, #32
 80029b6:	f000 f949 	bl	8002c4c <ST7735__enWrite>
    /* Set color mode, 1 arg, no delay: 18-bit color */
    ST7735__enWrite(ST7735_COLMOD, ST7735_nu8CMD);
 80029ba:	2100      	movs	r1, #0
 80029bc:	203a      	movs	r0, #58	; 0x3a
 80029be:	f000 f945 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x06, ST7735_nu8DAT);
 80029c2:	2101      	movs	r1, #1
 80029c4:	2006      	movs	r0, #6
 80029c6:	f000 f941 	bl	8002c4c <ST7735__enWrite>
    /* Column addr set, 4 args, no delay: XSTART = 0, XEND = 127 */
    ST7735__enWrite(ST7735_CASET, ST7735_nu8CMD);
 80029ca:	2100      	movs	r1, #0
 80029cc:	202a      	movs	r0, #42	; 0x2a
 80029ce:	f000 f93d 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 80029d2:	2101      	movs	r1, #1
 80029d4:	2000      	movs	r0, #0
 80029d6:	f000 f939 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 80029da:	2101      	movs	r1, #1
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f935 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 80029e2:	2101      	movs	r1, #1
 80029e4:	2000      	movs	r0, #0
 80029e6:	f000 f931 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x7F, ST7735_nu8DAT);
 80029ea:	2101      	movs	r1, #1
 80029ec:	207f      	movs	r0, #127	; 0x7f
 80029ee:	f000 f92d 	bl	8002c4c <ST7735__enWrite>
	/* Row addr set, 4 args, no delay: YSTART = 0, YEND = 159 */
	ST7735__enWrite(ST7735_RASET, ST7735_nu8CMD);
 80029f2:	2100      	movs	r1, #0
 80029f4:	202b      	movs	r0, #43	; 0x2b
 80029f6:	f000 f929 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 80029fa:	2101      	movs	r1, #1
 80029fc:	2000      	movs	r0, #0
 80029fe:	f000 f925 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002a02:	2101      	movs	r1, #1
 8002a04:	2000      	movs	r0, #0
 8002a06:	f000 f921 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f000 f91d 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x9F, ST7735_nu8DAT);
 8002a12:	2101      	movs	r1, #1
 8002a14:	209f      	movs	r0, #159	; 0x9f
 8002a16:	f000 f919 	bl	8002c4c <ST7735__enWrite>
	/* Magical unicorn dust, 16 args, no delay */
    ST7735__enWrite(ST7735_GMCTRP1, ST7735_nu8CMD);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	20e0      	movs	r0, #224	; 0xe0
 8002a1e:	f000 f915 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x02, ST7735_nu8DAT);
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f000 f911 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x1C, ST7735_nu8DAT);
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	201c      	movs	r0, #28
 8002a2e:	f000 f90d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x07, ST7735_nu8DAT);
 8002a32:	2101      	movs	r1, #1
 8002a34:	2007      	movs	r0, #7
 8002a36:	f000 f909 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x12, ST7735_nu8DAT);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2012      	movs	r0, #18
 8002a3e:	f000 f905 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x37, ST7735_nu8DAT);
 8002a42:	2101      	movs	r1, #1
 8002a44:	2037      	movs	r0, #55	; 0x37
 8002a46:	f000 f901 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x32, ST7735_nu8DAT);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2032      	movs	r0, #50	; 0x32
 8002a4e:	f000 f8fd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x29, ST7735_nu8DAT);
 8002a52:	2101      	movs	r1, #1
 8002a54:	2029      	movs	r0, #41	; 0x29
 8002a56:	f000 f8f9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	202d      	movs	r0, #45	; 0x2d
 8002a5e:	f000 f8f5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x29, ST7735_nu8DAT);
 8002a62:	2101      	movs	r1, #1
 8002a64:	2029      	movs	r0, #41	; 0x29
 8002a66:	f000 f8f1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x25, ST7735_nu8DAT);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	2025      	movs	r0, #37	; 0x25
 8002a6e:	f000 f8ed 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2B, ST7735_nu8DAT);
 8002a72:	2101      	movs	r1, #1
 8002a74:	202b      	movs	r0, #43	; 0x2b
 8002a76:	f000 f8e9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x39, ST7735_nu8DAT);
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2039      	movs	r0, #57	; 0x39
 8002a7e:	f000 f8e5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002a82:	2101      	movs	r1, #1
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 f8e1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x01, ST7735_nu8DAT);
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f000 f8dd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x03, ST7735_nu8DAT);
 8002a92:	2101      	movs	r1, #1
 8002a94:	2003      	movs	r0, #3
 8002a96:	f000 f8d9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x10, ST7735_nu8DAT);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2010      	movs	r0, #16
 8002a9e:	f000 f8d5 	bl	8002c4c <ST7735__enWrite>
    /* Sparkles and rainbows, 16 args, no delay */
    ST7735__enWrite(ST7735_GMCTRN1, ST7735_nu8CMD);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	20e1      	movs	r0, #225	; 0xe1
 8002aa6:	f000 f8d1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x03, ST7735_nu8DAT);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	2003      	movs	r0, #3
 8002aae:	f000 f8cd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x1D, ST7735_nu8DAT);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	201d      	movs	r0, #29
 8002ab6:	f000 f8c9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x07, ST7735_nu8DAT);
 8002aba:	2101      	movs	r1, #1
 8002abc:	2007      	movs	r0, #7
 8002abe:	f000 f8c5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x06, ST7735_nu8DAT);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2006      	movs	r0, #6
 8002ac6:	f000 f8c1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2E, ST7735_nu8DAT);
 8002aca:	2101      	movs	r1, #1
 8002acc:	202e      	movs	r0, #46	; 0x2e
 8002ace:	f000 f8bd 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2C, ST7735_nu8DAT);
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	202c      	movs	r0, #44	; 0x2c
 8002ad6:	f000 f8b9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x29, ST7735_nu8DAT);
 8002ada:	2101      	movs	r1, #1
 8002adc:	2029      	movs	r0, #41	; 0x29
 8002ade:	f000 f8b5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2D, ST7735_nu8DAT);
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	202d      	movs	r0, #45	; 0x2d
 8002ae6:	f000 f8b1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2E, ST7735_nu8DAT);
 8002aea:	2101      	movs	r1, #1
 8002aec:	202e      	movs	r0, #46	; 0x2e
 8002aee:	f000 f8ad 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x2E, ST7735_nu8DAT);
 8002af2:	2101      	movs	r1, #1
 8002af4:	202e      	movs	r0, #46	; 0x2e
 8002af6:	f000 f8a9 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x37, ST7735_nu8DAT);
 8002afa:	2101      	movs	r1, #1
 8002afc:	2037      	movs	r0, #55	; 0x37
 8002afe:	f000 f8a5 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x3F, ST7735_nu8DAT);
 8002b02:	2101      	movs	r1, #1
 8002b04:	203f      	movs	r0, #63	; 0x3f
 8002b06:	f000 f8a1 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f000 f89d 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002b12:	2101      	movs	r1, #1
 8002b14:	2000      	movs	r0, #0
 8002b16:	f000 f899 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x02, ST7735_nu8DAT);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f000 f895 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite(0x10, ST7735_nu8DAT);
 8002b22:	2101      	movs	r1, #1
 8002b24:	2010      	movs	r0, #16
 8002b26:	f000 f891 	bl	8002c4c <ST7735__enWrite>
    /* Normal display on, no args, no delay */
    ST7735__enWrite(ST7735_NORON, ST7735_nu8CMD);
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2013      	movs	r0, #19
 8002b2e:	f000 f88d 	bl	8002c4c <ST7735__enWrite>
    /* Main screen turn on, no delay */
    ST7735__enWrite(ST7735_DISPON, ST7735_nu8CMD);
 8002b32:	2100      	movs	r1, #0
 8002b34:	2029      	movs	r0, #41	; 0x29
 8002b36:	f000 f889 	bl	8002c4c <ST7735__enWrite>
    /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
    ST7735__enWrite(ST7735_MADCTL, ST7735_nu8CMD);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2036      	movs	r0, #54	; 0x36
 8002b3e:	f000 f885 	bl	8002c4c <ST7735__enWrite>
    ST7735__enWrite((MADCTL_MY | MADCTL_MV), ST7735_nu8DAT);
 8002b42:	2101      	movs	r1, #1
 8002b44:	20a0      	movs	r0, #160	; 0xa0
 8002b46:	f000 f881 	bl	8002c4c <ST7735__enWrite>

    return enError;
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <ST7735_enReset>:
ST7735_tenErrCode ST7735_enReset(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	71fb      	strb	r3, [r7, #7]

    stBSPDvr->TFT_RESET_GPIO(0);
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <ST7735_enReset+0x3c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2000      	movs	r0, #0
 8002b66:	4798      	blx	r3
    stBSPDvr->DELAY_MS(10);
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <ST7735_enReset+0x3c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	200a      	movs	r0, #10
 8002b70:	4798      	blx	r3
    stBSPDvr->TFT_RESET_GPIO(1);
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <ST7735_enReset+0x3c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2001      	movs	r0, #1
 8002b7a:	4798      	blx	r3
    stBSPDvr->DELAY_MS(10);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <ST7735_enReset+0x3c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	200a      	movs	r0, #10
 8002b84:	4798      	blx	r3

    return enError;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000090 	.word	0x20000090

08002b94 <ST7735_enRegisterBSP>:

ST7735_tenErrCode ST7735_enRegisterBSP(ST7735_tstBSPDriver* pstBSPDriver)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]

    if(NULL != pstBSPDriver)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <ST7735_enRegisterBSP+0x1a>
    {
    	stBSPDvr = pstBSPDriver;
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <ST7735_enRegisterBSP+0x2c>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e001      	b.n	8002bb2 <ST7735_enRegisterBSP+0x1e>
    }
    else
    {
    	enError = ST7735_nenInvalidPrmtrs;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	73fb      	strb	r3, [r7, #15]
    }

    return enError;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	20000090 	.word	0x20000090

08002bc4 <ST7735_enFillDisplay>:

  	return enError;
}

ST7735_tenErrCode ST7735_enFillDisplay(U32 u32Colour)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	737b      	strb	r3, [r7, #13]
    U16 u16Counter = ST7735_nTFTWIDTH * ST7735_nTFTLENGTH;
 8002bd0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002bd4:	81fb      	strh	r3, [r7, #14]

    ST7735__enSetDispWindow(ST7735_nX_AXE_ORIGIN,
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	22a0      	movs	r2, #160	; 0xa0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f000 f8ad 	bl	8002d3c <ST7735__enSetDispWindow>
    		                ST7735_nY_AXE_ORIGIN,
							ST7735_nTFTWIDTH,
							ST7735_nTFTLENGTH);
    for(;u16Counter > 0; u16Counter--)
 8002be2:	e005      	b.n	8002bf0 <ST7735_enFillDisplay+0x2c>
    {
       	ST7735__enRgbWrite(u32Colour);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f88d 	bl	8002d04 <ST7735__enRgbWrite>

    ST7735__enSetDispWindow(ST7735_nX_AXE_ORIGIN,
    		                ST7735_nY_AXE_ORIGIN,
							ST7735_nTFTWIDTH,
							ST7735_nTFTLENGTH);
    for(;u16Counter > 0; u16Counter--)
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	81fb      	strh	r3, [r7, #14]
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f6      	bne.n	8002be4 <ST7735_enFillDisplay+0x20>
    {
       	ST7735__enRgbWrite(u32Colour);
    }

    return enError;
 8002bf6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <ST7735_enPrintStr>:

ST7735_tenErrCode ST7735_enPrintStr(ST7735_tstStrDesc* pstStrDesc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	75fb      	strb	r3, [r7, #23]
    ST7735_tstStrDesc stStrDesc = * pstStrDesc;
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    do
    {
    	ST7735_enPrintChar(&stStrDesc);
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f929 	bl	8002e74 <ST7735_enPrintChar>

    	stStrDesc.u8XCursor ++;
 8002c22:	7a3b      	ldrb	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	723b      	strb	r3, [r7, #8]
    	stStrDesc.pchString ++;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
    }while((stStrDesc.pchString[0] >= 0x20U) && (stStrDesc.pchString[0] <= 0x7FU));
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b1f      	cmp	r3, #31
 8002c36:	d904      	bls.n	8002c42 <ST7735_enPrintStr+0x42>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	daea      	bge.n	8002c18 <ST7735_enPrintStr+0x18>

    return enError;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ST7735__enWrite>:
/******************************************************************************
PRIVATE FUNCTIONS - Functions accessed only by this component
******************************************************************************/
static ST7735_tenErrCode ST7735__enWrite(U8 u8Value, U8 u8Mode)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	460a      	mov	r2, r1
 8002c56:	71fb      	strb	r3, [r7, #7]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	71bb      	strb	r3, [r7, #6]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

    stBSPDvr->TFT_CS_GPIO(0);
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <ST7735__enWrite+0x6c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2000      	movs	r0, #0
 8002c68:	4798      	blx	r3
    switch(u8Mode)
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <ST7735__enWrite+0x2a>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d006      	beq.n	8002c82 <ST7735__enWrite+0x36>
 8002c74:	e00b      	b.n	8002c8e <ST7735__enWrite+0x42>
    {
    case ST7735_nu8CMD:
    	stBSPDvr->TFT_RS_GPIO(0);
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <ST7735__enWrite+0x6c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	4798      	blx	r3
        break;
 8002c80:	e008      	b.n	8002c94 <ST7735__enWrite+0x48>
    case ST7735_nu8DAT:
    	stBSPDvr->TFT_RS_GPIO(1);
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <ST7735__enWrite+0x6c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2001      	movs	r0, #1
 8002c8a:	4798      	blx	r3
        break;
 8002c8c:	e002      	b.n	8002c94 <ST7735__enWrite+0x48>
    default:
        enError = ST7735_nenInvalidPrmtrs;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	73fb      	strb	r3, [r7, #15]
        break;
 8002c92:	bf00      	nop
    }

    stBSPDvr->SPI_WRITE(&u8Value, 1);
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <ST7735__enWrite+0x6c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1dfa      	adds	r2, r7, #7
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4798      	blx	r3

    stBSPDvr->TFT_CS_GPIO(1);
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <ST7735__enWrite+0x6c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2001      	movs	r0, #1
 8002caa:	4798      	blx	r3

    return enError;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000090 	.word	0x20000090

08002cbc <ST7735__enMultipleWrite>:

static ST7735_tenErrCode ST7735__enMultipleWrite(U8* pu8Value, U32 u32Size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]

    stBSPDvr->TFT_CS_GPIO(0);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <ST7735__enMultipleWrite+0x44>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4798      	blx	r3
  	stBSPDvr->TFT_RS_GPIO(1);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <ST7735__enMultipleWrite+0x44>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2001      	movs	r0, #1
 8002cdc:	4798      	blx	r3
    stBSPDvr->SPI_WRITE(pu8Value, u32Size);
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <ST7735__enMultipleWrite+0x44>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    stBSPDvr->TFT_CS_GPIO(1);
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <ST7735__enMultipleWrite+0x44>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	4798      	blx	r3

    return enError;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000090 	.word	0x20000090

08002d04 <ST7735__enRgbWrite>:

static ST7735_tenErrCode ST7735__enRgbWrite(U32 u32Data)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
    U8 u8Buff[3]=
    {
        (U8)((u32Data & 0xFF0000) >> 0x10),
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	b2db      	uxtb	r3, r3
}

static ST7735_tenErrCode ST7735__enRgbWrite(U32 u32Data)
{
	ST7735_tenErrCode enError = ST7735_nenSuccess;
    U8 u8Buff[3]=
 8002d16:	733b      	strb	r3, [r7, #12]
    {
        (U8)((u32Data & 0xFF0000) >> 0x10),
		(U8)((u32Data & 0x00FF00) >> 0x08),
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	b2db      	uxtb	r3, r3
}

static ST7735_tenErrCode ST7735__enRgbWrite(U32 u32Data)
{
	ST7735_tenErrCode enError = ST7735_nenSuccess;
    U8 u8Buff[3]=
 8002d1e:	737b      	strb	r3, [r7, #13]
    {
        (U8)((u32Data & 0xFF0000) >> 0x10),
		(U8)((u32Data & 0x00FF00) >> 0x08),
		(U8)((u32Data  & 0x0000FF))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	b2db      	uxtb	r3, r3
}

static ST7735_tenErrCode ST7735__enRgbWrite(U32 u32Data)
{
	ST7735_tenErrCode enError = ST7735_nenSuccess;
    U8 u8Buff[3]=
 8002d24:	73bb      	strb	r3, [r7, #14]
        (U8)((u32Data & 0xFF0000) >> 0x10),
		(U8)((u32Data & 0x00FF00) >> 0x08),
		(U8)((u32Data  & 0x0000FF))
    };

	ST7735__enMultipleWrite(u8Buff, sizeof(u8Buff));
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffc5 	bl	8002cbc <ST7735__enMultipleWrite>

	return enError;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <ST7735__enSetDispWindow>:


static ST7735_tenErrCode ST7735__enSetDispWindow(U8 u8Xpos, U8 u8Ypos, U8 u8Width, U8 u8Height)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4604      	mov	r4, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	71fb      	strb	r3, [r7, #7]
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71bb      	strb	r3, [r7, #6]
 8002d52:	460b      	mov	r3, r1
 8002d54:	717b      	strb	r3, [r7, #5]
 8002d56:	4613      	mov	r3, r2
 8002d58:	713b      	strb	r3, [r7, #4]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
	
	/* Workaround to offset into screen visible area*/
    u8Xpos += 1;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	3301      	adds	r3, #1
 8002d62:	71fb      	strb	r3, [r7, #7]
    u8Ypos += 2;
 8002d64:	79bb      	ldrb	r3, [r7, #6]
 8002d66:	3302      	adds	r3, #2
 8002d68:	71bb      	strb	r3, [r7, #6]
    ST7735__enWrite(ST7735_CASET, ST7735_nu8CMD);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	202a      	movs	r0, #42	; 0x2a
 8002d6e:	f7ff ff6d 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002d72:	2101      	movs	r1, #1
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff ff69 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(u8Xpos, ST7735_nu8DAT);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff64 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002d84:	2101      	movs	r1, #1
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff ff60 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite((u8Xpos + u8Width - 1), ST7735_nu8DAT);
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	797b      	ldrb	r3, [r7, #5]
 8002d90:	4413      	add	r3, r2
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff56 	bl	8002c4c <ST7735__enWrite>

	ST7735__enWrite(ST7735_RASET, ST7735_nu8CMD);
 8002da0:	2100      	movs	r1, #0
 8002da2:	202b      	movs	r0, #43	; 0x2b
 8002da4:	f7ff ff52 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002da8:	2101      	movs	r1, #1
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7ff ff4e 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(u8Ypos, ST7735_nu8DAT);
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff49 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7ff ff45 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite((u8Ypos + u8Height + 1), ST7735_nu8DAT);
 8002dc2:	79ba      	ldrb	r2, [r7, #6]
 8002dc4:	793b      	ldrb	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff3b 	bl	8002c4c <ST7735__enWrite>

	ST7735__enWrite(ST7735_RAMWR, ST7735_nu8CMD);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	202c      	movs	r0, #44	; 0x2c
 8002dda:	f7ff ff37 	bl	8002c4c <ST7735__enWrite>

	return enError;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <ST7735__enSetCursortoAddr>:

static ST7735_tenErrCode ST7735__enSetCursortoAddr(U8 u8Xpos, U8 u8Ypos)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	460a      	mov	r2, r1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71bb      	strb	r3, [r7, #6]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]

    ST7735__enWrite(ST7735_CASET, ST7735_nu8CMD);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	202a      	movs	r0, #42	; 0x2a
 8002e00:	f7ff ff24 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002e04:	2101      	movs	r1, #1
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7ff ff20 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(u8Xpos, ST7735_nu8DAT);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff1b 	bl	8002c4c <ST7735__enWrite>

	ST7735__enWrite(ST7735_RASET, ST7735_nu8CMD);
 8002e16:	2100      	movs	r1, #0
 8002e18:	202b      	movs	r0, #43	; 0x2b
 8002e1a:	f7ff ff17 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(0x00, ST7735_nu8DAT);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7ff ff13 	bl	8002c4c <ST7735__enWrite>
	ST7735__enWrite(u8Ypos, ST7735_nu8DAT);
 8002e26:	79bb      	ldrb	r3, [r7, #6]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff0e 	bl	8002c4c <ST7735__enWrite>

	ST7735__enWrite(ST7735_RAMWR, ST7735_nu8CMD);
 8002e30:	2100      	movs	r1, #0
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	f7ff ff0a 	bl	8002c4c <ST7735__enWrite>

	return enError;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop

08002e44 <ST7735__enDrawPixel>:

static ST7735_tenErrCode ST7735__enDrawPixel(U8  u8Axe_X,
		                              U8  u8Axe_Y,
									  U32 u32Colour)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	603a      	str	r2, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	460b      	mov	r3, r1
 8002e52:	71bb      	strb	r3, [r7, #6]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]

     ST7735__enSetCursortoAddr(u8Axe_X, u8Axe_Y);
 8002e58:	79ba      	ldrb	r2, [r7, #6]
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ffc2 	bl	8002de8 <ST7735__enSetCursortoAddr>
  	 ST7735__enRgbWrite(u32Colour);
 8002e64:	6838      	ldr	r0, [r7, #0]
 8002e66:	f7ff ff4d 	bl	8002d04 <ST7735__enRgbWrite>

  	 return enError;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <ST7735_enPrintChar>:

static ST7735_tenErrCode ST7735_enPrintChar(ST7735_tstStrDesc* pstStrDesc)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	737b      	strb	r3, [r7, #13]
     U8 u8Column = 0x00;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
     U8 u8Arrow = 0x00;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73bb      	strb	r3, [r7, #14]
     U8 value = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	733b      	strb	r3, [r7, #12]

     for (u8Column = 0x00; u8Column < 0x05; u8Column++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e03e      	b.n	8002f10 <ST7735_enPrintChar+0x9c>
     {
         for (u8Arrow = 0x00; u8Arrow < 0x08; u8Arrow++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	73bb      	strb	r3, [r7, #14]
 8002e96:	e029      	b.n	8002eec <ST7735_enPrintChar+0x78>
         {
             value = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	733b      	strb	r3, [r7, #12]
             value = (( rchStrFont[pstStrDesc->pchString[0] - 0x20][u8Column]));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f1a3 0220 	sub.w	r2, r3, #32
 8002ea6:	7bf9      	ldrb	r1, [r7, #15]
 8002ea8:	481d      	ldr	r0, [pc, #116]	; (8002f20 <ST7735_enPrintChar+0xac>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	440b      	add	r3, r1
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	733b      	strb	r3, [r7, #12]

             if((value >> u8Arrow)  & 0x01)
 8002eb8:	7b3a      	ldrb	r2, [r7, #12]
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	fa42 f303 	asr.w	r3, r2, r3
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <ST7735_enPrintChar+0x66>
             {
            	 ST7735__enDrawPixel(pstStrDesc->u8XCursor,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7818      	ldrb	r0, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7859      	ldrb	r1, [r3, #1]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f7ff ffb5 	bl	8002e44 <ST7735__enDrawPixel>
                                     pstStrDesc->u8Ycursor,
                                     pstStrDesc->u32StrColour);
             }
             pstStrDesc->u8Ycursor++;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	705a      	strb	r2, [r3, #1]
     U8 u8Arrow = 0x00;
     U8 value = 0x00;

     for (u8Column = 0x00; u8Column < 0x05; u8Column++)
     {
         for (u8Arrow = 0x00; u8Arrow < 0x08; u8Arrow++)
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	73bb      	strb	r3, [r7, #14]
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d9d2      	bls.n	8002e98 <ST7735_enPrintChar+0x24>
                                     pstStrDesc->u8Ycursor,
                                     pstStrDesc->u32StrColour);
             }
             pstStrDesc->u8Ycursor++;
          }
         pstStrDesc->u8Ycursor -= (1 << 0x03);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	3b08      	subs	r3, #8
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	705a      	strb	r2, [r3, #1]
         pstStrDesc->u8XCursor ++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	701a      	strb	r2, [r3, #0]
    ST7735_tenErrCode enError = ST7735_nenSuccess;
     U8 u8Column = 0x00;
     U8 u8Arrow = 0x00;
     U8 value = 0x00;

     for (u8Column = 0x00; u8Column < 0x05; u8Column++)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d9bd      	bls.n	8002e92 <ST7735_enPrintChar+0x1e>
          }
         pstStrDesc->u8Ycursor -= (1 << 0x03);
         pstStrDesc->u8XCursor ++;

      }
    return enError;
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	0800382c 	.word	0x0800382c

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <__libc_init_array+0x3c>)
 8002f28:	4c0e      	ldr	r4, [pc, #56]	; (8002f64 <__libc_init_array+0x40>)
 8002f2a:	1ae4      	subs	r4, r4, r3
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2500      	movs	r5, #0
 8002f30:	461e      	mov	r6, r3
 8002f32:	42a5      	cmp	r5, r4
 8002f34:	d004      	beq.n	8002f40 <__libc_init_array+0x1c>
 8002f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3a:	4798      	blx	r3
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7f8      	b.n	8002f32 <__libc_init_array+0xe>
 8002f40:	f000 fc46 	bl	80037d0 <_init>
 8002f44:	4c08      	ldr	r4, [pc, #32]	; (8002f68 <__libc_init_array+0x44>)
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <__libc_init_array+0x48>)
 8002f48:	1ae4      	subs	r4, r4, r3
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	461e      	mov	r6, r3
 8002f50:	42a5      	cmp	r5, r4
 8002f52:	d004      	beq.n	8002f5e <__libc_init_array+0x3a>
 8002f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f58:	4798      	blx	r3
 8002f5a:	3501      	adds	r5, #1
 8002f5c:	e7f8      	b.n	8002f50 <__libc_init_array+0x2c>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	08003a44 	.word	0x08003a44
 8002f64:	08003a44 	.word	0x08003a44
 8002f68:	08003a48 	.word	0x08003a48
 8002f6c:	08003a44 	.word	0x08003a44

08002f70 <siprintf>:
 8002f70:	b40e      	push	{r1, r2, r3}
 8002f72:	b500      	push	{lr}
 8002f74:	b09c      	sub	sp, #112	; 0x70
 8002f76:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f7c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002f80:	9002      	str	r0, [sp, #8]
 8002f82:	9006      	str	r0, [sp, #24]
 8002f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f88:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <siprintf+0x44>)
 8002f8a:	9104      	str	r1, [sp, #16]
 8002f8c:	9107      	str	r1, [sp, #28]
 8002f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f96:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	a902      	add	r1, sp, #8
 8002fa0:	f000 f864 	bl	800306c <_svfiprintf_r>
 8002fa4:	9b02      	ldr	r3, [sp, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	b01c      	add	sp, #112	; 0x70
 8002fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fb0:	b003      	add	sp, #12
 8002fb2:	4770      	bx	lr
 8002fb4:	20000064 	.word	0x20000064

08002fb8 <__ssputs_r>:
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	688e      	ldr	r6, [r1, #8]
 8002fbe:	429e      	cmp	r6, r3
 8002fc0:	4682      	mov	sl, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	4691      	mov	r9, r2
 8002fc6:	4698      	mov	r8, r3
 8002fc8:	d83e      	bhi.n	8003048 <__ssputs_r+0x90>
 8002fca:	898a      	ldrh	r2, [r1, #12]
 8002fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fd0:	d03a      	beq.n	8003048 <__ssputs_r+0x90>
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	6909      	ldr	r1, [r1, #16]
 8002fd6:	1a6f      	subs	r7, r5, r1
 8002fd8:	6965      	ldr	r5, [r4, #20]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fe0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002fe4:	1c7b      	adds	r3, r7, #1
 8002fe6:	4443      	add	r3, r8
 8002fe8:	429d      	cmp	r5, r3
 8002fea:	bf38      	it	cc
 8002fec:	461d      	movcc	r5, r3
 8002fee:	0553      	lsls	r3, r2, #21
 8002ff0:	d50f      	bpl.n	8003012 <__ssputs_r+0x5a>
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f000 fb3e 	bl	8003674 <_malloc_r>
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	b198      	cbz	r0, 8003024 <__ssputs_r+0x6c>
 8002ffc:	463a      	mov	r2, r7
 8002ffe:	6921      	ldr	r1, [r4, #16]
 8003000:	f000 fac4 	bl	800358c <memcpy>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	81a3      	strh	r3, [r4, #12]
 8003010:	e013      	b.n	800303a <__ssputs_r+0x82>
 8003012:	462a      	mov	r2, r5
 8003014:	f000 fb8c 	bl	8003730 <_realloc_r>
 8003018:	4606      	mov	r6, r0
 800301a:	b970      	cbnz	r0, 800303a <__ssputs_r+0x82>
 800301c:	6921      	ldr	r1, [r4, #16]
 800301e:	4650      	mov	r0, sl
 8003020:	f000 fada 	bl	80035d8 <_free_r>
 8003024:	230c      	movs	r3, #12
 8003026:	f8ca 3000 	str.w	r3, [sl]
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	f04f 30ff 	mov.w	r0, #4294967295
 8003036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800303a:	6126      	str	r6, [r4, #16]
 800303c:	6165      	str	r5, [r4, #20]
 800303e:	443e      	add	r6, r7
 8003040:	1bed      	subs	r5, r5, r7
 8003042:	6026      	str	r6, [r4, #0]
 8003044:	60a5      	str	r5, [r4, #8]
 8003046:	4646      	mov	r6, r8
 8003048:	4546      	cmp	r6, r8
 800304a:	bf28      	it	cs
 800304c:	4646      	movcs	r6, r8
 800304e:	4632      	mov	r2, r6
 8003050:	4649      	mov	r1, r9
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	f000 faa5 	bl	80035a2 <memmove>
 8003058:	68a3      	ldr	r3, [r4, #8]
 800305a:	1b9b      	subs	r3, r3, r6
 800305c:	60a3      	str	r3, [r4, #8]
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	441e      	add	r6, r3
 8003062:	6026      	str	r6, [r4, #0]
 8003064:	2000      	movs	r0, #0
 8003066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800306c <_svfiprintf_r>:
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	b09d      	sub	sp, #116	; 0x74
 8003072:	4680      	mov	r8, r0
 8003074:	9303      	str	r3, [sp, #12]
 8003076:	898b      	ldrh	r3, [r1, #12]
 8003078:	061c      	lsls	r4, r3, #24
 800307a:	460d      	mov	r5, r1
 800307c:	4616      	mov	r6, r2
 800307e:	d50d      	bpl.n	800309c <_svfiprintf_r+0x30>
 8003080:	690b      	ldr	r3, [r1, #16]
 8003082:	b95b      	cbnz	r3, 800309c <_svfiprintf_r+0x30>
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	f000 faf5 	bl	8003674 <_malloc_r>
 800308a:	6028      	str	r0, [r5, #0]
 800308c:	6128      	str	r0, [r5, #16]
 800308e:	b918      	cbnz	r0, 8003098 <_svfiprintf_r+0x2c>
 8003090:	230c      	movs	r3, #12
 8003092:	f8c8 3000 	str.w	r3, [r8]
 8003096:	e0cd      	b.n	8003234 <_svfiprintf_r+0x1c8>
 8003098:	2340      	movs	r3, #64	; 0x40
 800309a:	616b      	str	r3, [r5, #20]
 800309c:	2300      	movs	r3, #0
 800309e:	9309      	str	r3, [sp, #36]	; 0x24
 80030a0:	2320      	movs	r3, #32
 80030a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030a6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003244 <_svfiprintf_r+0x1d8>
 80030aa:	2330      	movs	r3, #48	; 0x30
 80030ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030b0:	4637      	mov	r7, r6
 80030b2:	463c      	mov	r4, r7
 80030b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80030b8:	b91b      	cbnz	r3, 80030c2 <_svfiprintf_r+0x56>
 80030ba:	ebb7 0906 	subs.w	r9, r7, r6
 80030be:	d010      	beq.n	80030e2 <_svfiprintf_r+0x76>
 80030c0:	e003      	b.n	80030ca <_svfiprintf_r+0x5e>
 80030c2:	2b25      	cmp	r3, #37	; 0x25
 80030c4:	d0f9      	beq.n	80030ba <_svfiprintf_r+0x4e>
 80030c6:	4627      	mov	r7, r4
 80030c8:	e7f3      	b.n	80030b2 <_svfiprintf_r+0x46>
 80030ca:	464b      	mov	r3, r9
 80030cc:	4632      	mov	r2, r6
 80030ce:	4629      	mov	r1, r5
 80030d0:	4640      	mov	r0, r8
 80030d2:	f7ff ff71 	bl	8002fb8 <__ssputs_r>
 80030d6:	3001      	adds	r0, #1
 80030d8:	f000 80a7 	beq.w	800322a <_svfiprintf_r+0x1be>
 80030dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030de:	444b      	add	r3, r9
 80030e0:	9309      	str	r3, [sp, #36]	; 0x24
 80030e2:	783b      	ldrb	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a0 	beq.w	800322a <_svfiprintf_r+0x1be>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	9304      	str	r3, [sp, #16]
 80030f2:	9307      	str	r3, [sp, #28]
 80030f4:	9205      	str	r2, [sp, #20]
 80030f6:	9306      	str	r3, [sp, #24]
 80030f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030fc:	931a      	str	r3, [sp, #104]	; 0x68
 80030fe:	2601      	movs	r6, #1
 8003100:	2205      	movs	r2, #5
 8003102:	7821      	ldrb	r1, [r4, #0]
 8003104:	484e      	ldr	r0, [pc, #312]	; (8003240 <_svfiprintf_r+0x1d4>)
 8003106:	f7fd f863 	bl	80001d0 <memchr>
 800310a:	1c67      	adds	r7, r4, #1
 800310c:	9b04      	ldr	r3, [sp, #16]
 800310e:	b138      	cbz	r0, 8003120 <_svfiprintf_r+0xb4>
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <_svfiprintf_r+0x1d4>)
 8003112:	1a80      	subs	r0, r0, r2
 8003114:	fa06 f000 	lsl.w	r0, r6, r0
 8003118:	4318      	orrs	r0, r3
 800311a:	9004      	str	r0, [sp, #16]
 800311c:	463c      	mov	r4, r7
 800311e:	e7ef      	b.n	8003100 <_svfiprintf_r+0x94>
 8003120:	06d9      	lsls	r1, r3, #27
 8003122:	bf44      	itt	mi
 8003124:	2220      	movmi	r2, #32
 8003126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800312a:	071a      	lsls	r2, r3, #28
 800312c:	bf44      	itt	mi
 800312e:	222b      	movmi	r2, #43	; 0x2b
 8003130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003134:	7822      	ldrb	r2, [r4, #0]
 8003136:	2a2a      	cmp	r2, #42	; 0x2a
 8003138:	d003      	beq.n	8003142 <_svfiprintf_r+0xd6>
 800313a:	9a07      	ldr	r2, [sp, #28]
 800313c:	2100      	movs	r1, #0
 800313e:	200a      	movs	r0, #10
 8003140:	e00b      	b.n	800315a <_svfiprintf_r+0xee>
 8003142:	9a03      	ldr	r2, [sp, #12]
 8003144:	1d11      	adds	r1, r2, #4
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	9103      	str	r1, [sp, #12]
 800314a:	2a00      	cmp	r2, #0
 800314c:	da10      	bge.n	8003170 <_svfiprintf_r+0x104>
 800314e:	4252      	negs	r2, r2
 8003150:	f043 0002 	orr.w	r0, r3, #2
 8003154:	9207      	str	r2, [sp, #28]
 8003156:	9004      	str	r0, [sp, #16]
 8003158:	e00b      	b.n	8003172 <_svfiprintf_r+0x106>
 800315a:	4627      	mov	r7, r4
 800315c:	3401      	adds	r4, #1
 800315e:	783b      	ldrb	r3, [r7, #0]
 8003160:	3b30      	subs	r3, #48	; 0x30
 8003162:	2b09      	cmp	r3, #9
 8003164:	d803      	bhi.n	800316e <_svfiprintf_r+0x102>
 8003166:	fb00 3202 	mla	r2, r0, r2, r3
 800316a:	2101      	movs	r1, #1
 800316c:	e7f5      	b.n	800315a <_svfiprintf_r+0xee>
 800316e:	b101      	cbz	r1, 8003172 <_svfiprintf_r+0x106>
 8003170:	9207      	str	r2, [sp, #28]
 8003172:	783b      	ldrb	r3, [r7, #0]
 8003174:	2b2e      	cmp	r3, #46	; 0x2e
 8003176:	d11e      	bne.n	80031b6 <_svfiprintf_r+0x14a>
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b2a      	cmp	r3, #42	; 0x2a
 800317c:	d10a      	bne.n	8003194 <_svfiprintf_r+0x128>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	1d1a      	adds	r2, r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	9203      	str	r2, [sp, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfb8      	it	lt
 800318a:	f04f 33ff 	movlt.w	r3, #4294967295
 800318e:	3702      	adds	r7, #2
 8003190:	9305      	str	r3, [sp, #20]
 8003192:	e010      	b.n	80031b6 <_svfiprintf_r+0x14a>
 8003194:	2300      	movs	r3, #0
 8003196:	9305      	str	r3, [sp, #20]
 8003198:	1c78      	adds	r0, r7, #1
 800319a:	4619      	mov	r1, r3
 800319c:	240a      	movs	r4, #10
 800319e:	4607      	mov	r7, r0
 80031a0:	3001      	adds	r0, #1
 80031a2:	783a      	ldrb	r2, [r7, #0]
 80031a4:	3a30      	subs	r2, #48	; 0x30
 80031a6:	2a09      	cmp	r2, #9
 80031a8:	d803      	bhi.n	80031b2 <_svfiprintf_r+0x146>
 80031aa:	fb04 2101 	mla	r1, r4, r1, r2
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7f5      	b.n	800319e <_svfiprintf_r+0x132>
 80031b2:	b103      	cbz	r3, 80031b6 <_svfiprintf_r+0x14a>
 80031b4:	9105      	str	r1, [sp, #20]
 80031b6:	2203      	movs	r2, #3
 80031b8:	7839      	ldrb	r1, [r7, #0]
 80031ba:	4822      	ldr	r0, [pc, #136]	; (8003244 <_svfiprintf_r+0x1d8>)
 80031bc:	f7fd f808 	bl	80001d0 <memchr>
 80031c0:	b140      	cbz	r0, 80031d4 <_svfiprintf_r+0x168>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	ebcb 0000 	rsb	r0, fp, r0
 80031c8:	fa03 f000 	lsl.w	r0, r3, r0
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	4318      	orrs	r0, r3
 80031d0:	9004      	str	r0, [sp, #16]
 80031d2:	3701      	adds	r7, #1
 80031d4:	7839      	ldrb	r1, [r7, #0]
 80031d6:	481c      	ldr	r0, [pc, #112]	; (8003248 <_svfiprintf_r+0x1dc>)
 80031d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031dc:	2206      	movs	r2, #6
 80031de:	1c7e      	adds	r6, r7, #1
 80031e0:	f7fc fff6 	bl	80001d0 <memchr>
 80031e4:	b188      	cbz	r0, 800320a <_svfiprintf_r+0x19e>
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <_svfiprintf_r+0x1e0>)
 80031e8:	b933      	cbnz	r3, 80031f8 <_svfiprintf_r+0x18c>
 80031ea:	9b03      	ldr	r3, [sp, #12]
 80031ec:	3307      	adds	r3, #7
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	3308      	adds	r3, #8
 80031f4:	9303      	str	r3, [sp, #12]
 80031f6:	e014      	b.n	8003222 <_svfiprintf_r+0x1b6>
 80031f8:	ab03      	add	r3, sp, #12
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	462a      	mov	r2, r5
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <_svfiprintf_r+0x1e4>)
 8003200:	a904      	add	r1, sp, #16
 8003202:	4640      	mov	r0, r8
 8003204:	f3af 8000 	nop.w
 8003208:	e007      	b.n	800321a <_svfiprintf_r+0x1ae>
 800320a:	ab03      	add	r3, sp, #12
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	462a      	mov	r2, r5
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <_svfiprintf_r+0x1e4>)
 8003212:	a904      	add	r1, sp, #16
 8003214:	4640      	mov	r0, r8
 8003216:	f000 f893 	bl	8003340 <_printf_i>
 800321a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800321e:	4682      	mov	sl, r0
 8003220:	d003      	beq.n	800322a <_svfiprintf_r+0x1be>
 8003222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003224:	4453      	add	r3, sl
 8003226:	9309      	str	r3, [sp, #36]	; 0x24
 8003228:	e742      	b.n	80030b0 <_svfiprintf_r+0x44>
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	065b      	lsls	r3, r3, #25
 800322e:	d401      	bmi.n	8003234 <_svfiprintf_r+0x1c8>
 8003230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003232:	e001      	b.n	8003238 <_svfiprintf_r+0x1cc>
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	b01d      	add	sp, #116	; 0x74
 800323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	08003a0e 	.word	0x08003a0e
 8003244:	08003a14 	.word	0x08003a14
 8003248:	08003a18 	.word	0x08003a18
 800324c:	00000000 	.word	0x00000000
 8003250:	08002fb9 	.word	0x08002fb9

08003254 <_printf_common>:
 8003254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003258:	4691      	mov	r9, r2
 800325a:	461f      	mov	r7, r3
 800325c:	690a      	ldr	r2, [r1, #16]
 800325e:	688b      	ldr	r3, [r1, #8]
 8003260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003264:	4293      	cmp	r3, r2
 8003266:	bfb8      	it	lt
 8003268:	4613      	movlt	r3, r2
 800326a:	f8c9 3000 	str.w	r3, [r9]
 800326e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003272:	4606      	mov	r6, r0
 8003274:	460c      	mov	r4, r1
 8003276:	b112      	cbz	r2, 800327e <_printf_common+0x2a>
 8003278:	3301      	adds	r3, #1
 800327a:	f8c9 3000 	str.w	r3, [r9]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003288:	3302      	addmi	r3, #2
 800328a:	f8c9 3000 	strmi.w	r3, [r9]
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	f015 0506 	ands.w	r5, r5, #6
 8003294:	d110      	bne.n	80032b8 <_printf_common+0x64>
 8003296:	f104 0a19 	add.w	sl, r4, #25
 800329a:	e007      	b.n	80032ac <_printf_common+0x58>
 800329c:	2301      	movs	r3, #1
 800329e:	4652      	mov	r2, sl
 80032a0:	4639      	mov	r1, r7
 80032a2:	4630      	mov	r0, r6
 80032a4:	47c0      	blx	r8
 80032a6:	3001      	adds	r0, #1
 80032a8:	d01a      	beq.n	80032e0 <_printf_common+0x8c>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	f8d9 2000 	ldr.w	r2, [r9]
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	429d      	cmp	r5, r3
 80032b6:	dbf1      	blt.n	800329c <_printf_common+0x48>
 80032b8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	3300      	adds	r3, #0
 80032c0:	bf18      	it	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	0692      	lsls	r2, r2, #26
 80032c6:	d50f      	bpl.n	80032e8 <_printf_common+0x94>
 80032c8:	18e1      	adds	r1, r4, r3
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	2030      	movs	r0, #48	; 0x30
 80032ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032d2:	4422      	add	r2, r4
 80032d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032dc:	3302      	adds	r3, #2
 80032de:	e003      	b.n	80032e8 <_printf_common+0x94>
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ec:	4639      	mov	r1, r7
 80032ee:	4630      	mov	r0, r6
 80032f0:	47c0      	blx	r8
 80032f2:	3001      	adds	r0, #1
 80032f4:	d0f4      	beq.n	80032e0 <_printf_common+0x8c>
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	f8d9 5000 	ldr.w	r5, [r9]
 80032fc:	68e3      	ldr	r3, [r4, #12]
 80032fe:	f002 0206 	and.w	r2, r2, #6
 8003302:	2a04      	cmp	r2, #4
 8003304:	bf08      	it	eq
 8003306:	1b5d      	subeq	r5, r3, r5
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	bf0c      	ite	eq
 800330e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003312:	2500      	movne	r5, #0
 8003314:	4293      	cmp	r3, r2
 8003316:	bfc4      	itt	gt
 8003318:	1a9b      	subgt	r3, r3, r2
 800331a:	18ed      	addgt	r5, r5, r3
 800331c:	f04f 0900 	mov.w	r9, #0
 8003320:	341a      	adds	r4, #26
 8003322:	454d      	cmp	r5, r9
 8003324:	d009      	beq.n	800333a <_printf_common+0xe6>
 8003326:	2301      	movs	r3, #1
 8003328:	4622      	mov	r2, r4
 800332a:	4639      	mov	r1, r7
 800332c:	4630      	mov	r0, r6
 800332e:	47c0      	blx	r8
 8003330:	3001      	adds	r0, #1
 8003332:	d0d5      	beq.n	80032e0 <_printf_common+0x8c>
 8003334:	f109 0901 	add.w	r9, r9, #1
 8003338:	e7f3      	b.n	8003322 <_printf_common+0xce>
 800333a:	2000      	movs	r0, #0
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003340 <_printf_i>:
 8003340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003344:	4617      	mov	r7, r2
 8003346:	7e0a      	ldrb	r2, [r1, #24]
 8003348:	b085      	sub	sp, #20
 800334a:	2a6e      	cmp	r2, #110	; 0x6e
 800334c:	4698      	mov	r8, r3
 800334e:	4606      	mov	r6, r0
 8003350:	460c      	mov	r4, r1
 8003352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003354:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003358:	f000 80ae 	beq.w	80034b8 <_printf_i+0x178>
 800335c:	d811      	bhi.n	8003382 <_printf_i+0x42>
 800335e:	2a63      	cmp	r2, #99	; 0x63
 8003360:	d022      	beq.n	80033a8 <_printf_i+0x68>
 8003362:	d809      	bhi.n	8003378 <_printf_i+0x38>
 8003364:	2a00      	cmp	r2, #0
 8003366:	f000 80bb 	beq.w	80034e0 <_printf_i+0x1a0>
 800336a:	2a58      	cmp	r2, #88	; 0x58
 800336c:	f040 80ca 	bne.w	8003504 <_printf_i+0x1c4>
 8003370:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003374:	4983      	ldr	r1, [pc, #524]	; (8003584 <_printf_i+0x244>)
 8003376:	e055      	b.n	8003424 <_printf_i+0xe4>
 8003378:	2a64      	cmp	r2, #100	; 0x64
 800337a:	d01e      	beq.n	80033ba <_printf_i+0x7a>
 800337c:	2a69      	cmp	r2, #105	; 0x69
 800337e:	d01c      	beq.n	80033ba <_printf_i+0x7a>
 8003380:	e0c0      	b.n	8003504 <_printf_i+0x1c4>
 8003382:	2a73      	cmp	r2, #115	; 0x73
 8003384:	f000 80b0 	beq.w	80034e8 <_printf_i+0x1a8>
 8003388:	d809      	bhi.n	800339e <_printf_i+0x5e>
 800338a:	2a6f      	cmp	r2, #111	; 0x6f
 800338c:	d02e      	beq.n	80033ec <_printf_i+0xac>
 800338e:	2a70      	cmp	r2, #112	; 0x70
 8003390:	f040 80b8 	bne.w	8003504 <_printf_i+0x1c4>
 8003394:	680a      	ldr	r2, [r1, #0]
 8003396:	f042 0220 	orr.w	r2, r2, #32
 800339a:	600a      	str	r2, [r1, #0]
 800339c:	e03e      	b.n	800341c <_printf_i+0xdc>
 800339e:	2a75      	cmp	r2, #117	; 0x75
 80033a0:	d024      	beq.n	80033ec <_printf_i+0xac>
 80033a2:	2a78      	cmp	r2, #120	; 0x78
 80033a4:	d03a      	beq.n	800341c <_printf_i+0xdc>
 80033a6:	e0ad      	b.n	8003504 <_printf_i+0x1c4>
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80033ae:	1d11      	adds	r1, r2, #4
 80033b0:	6019      	str	r1, [r3, #0]
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033b8:	e0a8      	b.n	800350c <_printf_i+0x1cc>
 80033ba:	6821      	ldr	r1, [r4, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033c2:	d002      	beq.n	80033ca <_printf_i+0x8a>
 80033c4:	1d11      	adds	r1, r2, #4
 80033c6:	6019      	str	r1, [r3, #0]
 80033c8:	e008      	b.n	80033dc <_printf_i+0x9c>
 80033ca:	f011 0f40 	tst.w	r1, #64	; 0x40
 80033ce:	f102 0104 	add.w	r1, r2, #4
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	d002      	beq.n	80033dc <_printf_i+0x9c>
 80033d6:	f9b2 3000 	ldrsh.w	r3, [r2]
 80033da:	e000      	b.n	80033de <_printf_i+0x9e>
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da3c      	bge.n	800345c <_printf_i+0x11c>
 80033e2:	222d      	movs	r2, #45	; 0x2d
 80033e4:	425b      	negs	r3, r3
 80033e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033ea:	e037      	b.n	800345c <_printf_i+0x11c>
 80033ec:	6821      	ldr	r1, [r4, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033f4:	d002      	beq.n	80033fc <_printf_i+0xbc>
 80033f6:	1d11      	adds	r1, r2, #4
 80033f8:	6019      	str	r1, [r3, #0]
 80033fa:	e007      	b.n	800340c <_printf_i+0xcc>
 80033fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003400:	f102 0104 	add.w	r1, r2, #4
 8003404:	6019      	str	r1, [r3, #0]
 8003406:	d001      	beq.n	800340c <_printf_i+0xcc>
 8003408:	8813      	ldrh	r3, [r2, #0]
 800340a:	e000      	b.n	800340e <_printf_i+0xce>
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	7e22      	ldrb	r2, [r4, #24]
 8003410:	495c      	ldr	r1, [pc, #368]	; (8003584 <_printf_i+0x244>)
 8003412:	2a6f      	cmp	r2, #111	; 0x6f
 8003414:	bf14      	ite	ne
 8003416:	220a      	movne	r2, #10
 8003418:	2208      	moveq	r2, #8
 800341a:	e01b      	b.n	8003454 <_printf_i+0x114>
 800341c:	2278      	movs	r2, #120	; 0x78
 800341e:	495a      	ldr	r1, [pc, #360]	; (8003588 <_printf_i+0x248>)
 8003420:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	f012 0f80 	tst.w	r2, #128	; 0x80
 800342c:	f100 0504 	add.w	r5, r0, #4
 8003430:	601d      	str	r5, [r3, #0]
 8003432:	d103      	bne.n	800343c <_printf_i+0xfc>
 8003434:	0655      	lsls	r5, r2, #25
 8003436:	d501      	bpl.n	800343c <_printf_i+0xfc>
 8003438:	8803      	ldrh	r3, [r0, #0]
 800343a:	e000      	b.n	800343e <_printf_i+0xfe>
 800343c:	6803      	ldr	r3, [r0, #0]
 800343e:	07d0      	lsls	r0, r2, #31
 8003440:	bf44      	itt	mi
 8003442:	f042 0220 	orrmi.w	r2, r2, #32
 8003446:	6022      	strmi	r2, [r4, #0]
 8003448:	b91b      	cbnz	r3, 8003452 <_printf_i+0x112>
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	f022 0220 	bic.w	r2, r2, #32
 8003450:	6022      	str	r2, [r4, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	2000      	movs	r0, #0
 8003456:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800345a:	e001      	b.n	8003460 <_printf_i+0x120>
 800345c:	4949      	ldr	r1, [pc, #292]	; (8003584 <_printf_i+0x244>)
 800345e:	220a      	movs	r2, #10
 8003460:	6865      	ldr	r5, [r4, #4]
 8003462:	60a5      	str	r5, [r4, #8]
 8003464:	2d00      	cmp	r5, #0
 8003466:	db08      	blt.n	800347a <_printf_i+0x13a>
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f020 0004 	bic.w	r0, r0, #4
 800346e:	6020      	str	r0, [r4, #0]
 8003470:	b92b      	cbnz	r3, 800347e <_printf_i+0x13e>
 8003472:	2d00      	cmp	r5, #0
 8003474:	d17d      	bne.n	8003572 <_printf_i+0x232>
 8003476:	4675      	mov	r5, lr
 8003478:	e00c      	b.n	8003494 <_printf_i+0x154>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d079      	beq.n	8003572 <_printf_i+0x232>
 800347e:	4675      	mov	r5, lr
 8003480:	fbb3 f0f2 	udiv	r0, r3, r2
 8003484:	fb02 3310 	mls	r3, r2, r0, r3
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800348e:	4603      	mov	r3, r0
 8003490:	2800      	cmp	r0, #0
 8003492:	d1f5      	bne.n	8003480 <_printf_i+0x140>
 8003494:	2a08      	cmp	r2, #8
 8003496:	d10b      	bne.n	80034b0 <_printf_i+0x170>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	07da      	lsls	r2, r3, #31
 800349c:	d508      	bpl.n	80034b0 <_printf_i+0x170>
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	6862      	ldr	r2, [r4, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bfde      	ittt	le
 80034a6:	2330      	movle	r3, #48	; 0x30
 80034a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034b0:	ebc5 030e 	rsb	r3, r5, lr
 80034b4:	6123      	str	r3, [r4, #16]
 80034b6:	e02e      	b.n	8003516 <_printf_i+0x1d6>
 80034b8:	6808      	ldr	r0, [r1, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	6949      	ldr	r1, [r1, #20]
 80034be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80034c2:	d003      	beq.n	80034cc <_printf_i+0x18c>
 80034c4:	1d10      	adds	r0, r2, #4
 80034c6:	6018      	str	r0, [r3, #0]
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	e008      	b.n	80034de <_printf_i+0x19e>
 80034cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034d0:	f102 0004 	add.w	r0, r2, #4
 80034d4:	6018      	str	r0, [r3, #0]
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	d001      	beq.n	80034de <_printf_i+0x19e>
 80034da:	8019      	strh	r1, [r3, #0]
 80034dc:	e000      	b.n	80034e0 <_printf_i+0x1a0>
 80034de:	6019      	str	r1, [r3, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	4675      	mov	r5, lr
 80034e6:	e016      	b.n	8003516 <_printf_i+0x1d6>
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	1d11      	adds	r1, r2, #4
 80034ec:	6019      	str	r1, [r3, #0]
 80034ee:	6815      	ldr	r5, [r2, #0]
 80034f0:	6862      	ldr	r2, [r4, #4]
 80034f2:	2100      	movs	r1, #0
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7fc fe6b 	bl	80001d0 <memchr>
 80034fa:	b108      	cbz	r0, 8003500 <_printf_i+0x1c0>
 80034fc:	1b40      	subs	r0, r0, r5
 80034fe:	6060      	str	r0, [r4, #4]
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	e004      	b.n	800350e <_printf_i+0x1ce>
 8003504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003508:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	2300      	movs	r3, #0
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003516:	f8cd 8000 	str.w	r8, [sp]
 800351a:	463b      	mov	r3, r7
 800351c:	aa03      	add	r2, sp, #12
 800351e:	4621      	mov	r1, r4
 8003520:	4630      	mov	r0, r6
 8003522:	f7ff fe97 	bl	8003254 <_printf_common>
 8003526:	3001      	adds	r0, #1
 8003528:	d102      	bne.n	8003530 <_printf_i+0x1f0>
 800352a:	f04f 30ff 	mov.w	r0, #4294967295
 800352e:	e026      	b.n	800357e <_printf_i+0x23e>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	462a      	mov	r2, r5
 8003534:	4639      	mov	r1, r7
 8003536:	4630      	mov	r0, r6
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d0f5      	beq.n	800352a <_printf_i+0x1ea>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	d510      	bpl.n	8003566 <_printf_i+0x226>
 8003544:	2500      	movs	r5, #0
 8003546:	f104 0919 	add.w	r9, r4, #25
 800354a:	e007      	b.n	800355c <_printf_i+0x21c>
 800354c:	2301      	movs	r3, #1
 800354e:	464a      	mov	r2, r9
 8003550:	4639      	mov	r1, r7
 8003552:	4630      	mov	r0, r6
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d0e7      	beq.n	800352a <_printf_i+0x1ea>
 800355a:	3501      	adds	r5, #1
 800355c:	68e3      	ldr	r3, [r4, #12]
 800355e:	9a03      	ldr	r2, [sp, #12]
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	429d      	cmp	r5, r3
 8003564:	dbf2      	blt.n	800354c <_printf_i+0x20c>
 8003566:	68e0      	ldr	r0, [r4, #12]
 8003568:	9b03      	ldr	r3, [sp, #12]
 800356a:	4298      	cmp	r0, r3
 800356c:	bfb8      	it	lt
 800356e:	4618      	movlt	r0, r3
 8003570:	e005      	b.n	800357e <_printf_i+0x23e>
 8003572:	780b      	ldrb	r3, [r1, #0]
 8003574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357c:	e78a      	b.n	8003494 <_printf_i+0x154>
 800357e:	b005      	add	sp, #20
 8003580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003584:	08003a1f 	.word	0x08003a1f
 8003588:	08003a30 	.word	0x08003a30

0800358c <memcpy>:
 800358c:	b510      	push	{r4, lr}
 800358e:	1e43      	subs	r3, r0, #1
 8003590:	440a      	add	r2, r1
 8003592:	4291      	cmp	r1, r2
 8003594:	d004      	beq.n	80035a0 <memcpy+0x14>
 8003596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800359a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800359e:	e7f8      	b.n	8003592 <memcpy+0x6>
 80035a0:	bd10      	pop	{r4, pc}

080035a2 <memmove>:
 80035a2:	4288      	cmp	r0, r1
 80035a4:	b510      	push	{r4, lr}
 80035a6:	eb01 0302 	add.w	r3, r1, r2
 80035aa:	d801      	bhi.n	80035b0 <memmove+0xe>
 80035ac:	1e42      	subs	r2, r0, #1
 80035ae:	e00b      	b.n	80035c8 <memmove+0x26>
 80035b0:	4298      	cmp	r0, r3
 80035b2:	d2fb      	bcs.n	80035ac <memmove+0xa>
 80035b4:	1881      	adds	r1, r0, r2
 80035b6:	1ad2      	subs	r2, r2, r3
 80035b8:	42d3      	cmn	r3, r2
 80035ba:	d004      	beq.n	80035c6 <memmove+0x24>
 80035bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035c4:	e7f8      	b.n	80035b8 <memmove+0x16>
 80035c6:	bd10      	pop	{r4, pc}
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d004      	beq.n	80035d6 <memmove+0x34>
 80035cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80035d4:	e7f8      	b.n	80035c8 <memmove+0x26>
 80035d6:	bd10      	pop	{r4, pc}

080035d8 <_free_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4605      	mov	r5, r0
 80035dc:	2900      	cmp	r1, #0
 80035de:	d046      	beq.n	800366e <_free_r+0x96>
 80035e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e4:	1f0c      	subs	r4, r1, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bfb8      	it	lt
 80035ea:	18e4      	addlt	r4, r4, r3
 80035ec:	f000 f8d6 	bl	800379c <__malloc_lock>
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <_free_r+0x98>)
 80035f2:	6813      	ldr	r3, [r2, #0]
 80035f4:	4611      	mov	r1, r2
 80035f6:	b913      	cbnz	r3, 80035fe <_free_r+0x26>
 80035f8:	6063      	str	r3, [r4, #4]
 80035fa:	6014      	str	r4, [r2, #0]
 80035fc:	e032      	b.n	8003664 <_free_r+0x8c>
 80035fe:	42a3      	cmp	r3, r4
 8003600:	d90e      	bls.n	8003620 <_free_r+0x48>
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	18a0      	adds	r0, r4, r2
 8003606:	4283      	cmp	r3, r0
 8003608:	bf04      	itt	eq
 800360a:	6818      	ldreq	r0, [r3, #0]
 800360c:	685b      	ldreq	r3, [r3, #4]
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	bf04      	itt	eq
 8003612:	1812      	addeq	r2, r2, r0
 8003614:	6022      	streq	r2, [r4, #0]
 8003616:	600c      	str	r4, [r1, #0]
 8003618:	e024      	b.n	8003664 <_free_r+0x8c>
 800361a:	42a2      	cmp	r2, r4
 800361c:	d803      	bhi.n	8003626 <_free_r+0x4e>
 800361e:	4613      	mov	r3, r2
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	2a00      	cmp	r2, #0
 8003624:	d1f9      	bne.n	800361a <_free_r+0x42>
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	1819      	adds	r1, r3, r0
 800362a:	42a1      	cmp	r1, r4
 800362c:	d10b      	bne.n	8003646 <_free_r+0x6e>
 800362e:	6821      	ldr	r1, [r4, #0]
 8003630:	4401      	add	r1, r0
 8003632:	1858      	adds	r0, r3, r1
 8003634:	4282      	cmp	r2, r0
 8003636:	6019      	str	r1, [r3, #0]
 8003638:	d114      	bne.n	8003664 <_free_r+0x8c>
 800363a:	6810      	ldr	r0, [r2, #0]
 800363c:	6852      	ldr	r2, [r2, #4]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	4401      	add	r1, r0
 8003642:	6019      	str	r1, [r3, #0]
 8003644:	e00e      	b.n	8003664 <_free_r+0x8c>
 8003646:	d902      	bls.n	800364e <_free_r+0x76>
 8003648:	230c      	movs	r3, #12
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	e00a      	b.n	8003664 <_free_r+0x8c>
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	1860      	adds	r0, r4, r1
 8003652:	4282      	cmp	r2, r0
 8003654:	bf04      	itt	eq
 8003656:	6810      	ldreq	r0, [r2, #0]
 8003658:	6852      	ldreq	r2, [r2, #4]
 800365a:	6062      	str	r2, [r4, #4]
 800365c:	bf04      	itt	eq
 800365e:	1809      	addeq	r1, r1, r0
 8003660:	6021      	streq	r1, [r4, #0]
 8003662:	605c      	str	r4, [r3, #4]
 8003664:	4628      	mov	r0, r5
 8003666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800366a:	f000 b898 	b.w	800379e <__malloc_unlock>
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000098 	.word	0x20000098

08003674 <_malloc_r>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	1ccd      	adds	r5, r1, #3
 8003678:	f025 0503 	bic.w	r5, r5, #3
 800367c:	3508      	adds	r5, #8
 800367e:	2d0c      	cmp	r5, #12
 8003680:	bf38      	it	cc
 8003682:	250c      	movcc	r5, #12
 8003684:	2d00      	cmp	r5, #0
 8003686:	4606      	mov	r6, r0
 8003688:	db01      	blt.n	800368e <_malloc_r+0x1a>
 800368a:	42a9      	cmp	r1, r5
 800368c:	d902      	bls.n	8003694 <_malloc_r+0x20>
 800368e:	230c      	movs	r3, #12
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	e046      	b.n	8003722 <_malloc_r+0xae>
 8003694:	f000 f882 	bl	800379c <__malloc_lock>
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <_malloc_r+0xb4>)
 800369a:	681c      	ldr	r4, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4621      	mov	r1, r4
 80036a0:	b1a1      	cbz	r1, 80036cc <_malloc_r+0x58>
 80036a2:	680b      	ldr	r3, [r1, #0]
 80036a4:	1b5b      	subs	r3, r3, r5
 80036a6:	d40e      	bmi.n	80036c6 <_malloc_r+0x52>
 80036a8:	2b0b      	cmp	r3, #11
 80036aa:	d903      	bls.n	80036b4 <_malloc_r+0x40>
 80036ac:	600b      	str	r3, [r1, #0]
 80036ae:	18cc      	adds	r4, r1, r3
 80036b0:	50cd      	str	r5, [r1, r3]
 80036b2:	e01e      	b.n	80036f2 <_malloc_r+0x7e>
 80036b4:	428c      	cmp	r4, r1
 80036b6:	bf0d      	iteet	eq
 80036b8:	6863      	ldreq	r3, [r4, #4]
 80036ba:	684b      	ldrne	r3, [r1, #4]
 80036bc:	6063      	strne	r3, [r4, #4]
 80036be:	6013      	streq	r3, [r2, #0]
 80036c0:	bf18      	it	ne
 80036c2:	460c      	movne	r4, r1
 80036c4:	e015      	b.n	80036f2 <_malloc_r+0x7e>
 80036c6:	460c      	mov	r4, r1
 80036c8:	6849      	ldr	r1, [r1, #4]
 80036ca:	e7e9      	b.n	80036a0 <_malloc_r+0x2c>
 80036cc:	4c17      	ldr	r4, [pc, #92]	; (800372c <_malloc_r+0xb8>)
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	b91b      	cbnz	r3, 80036da <_malloc_r+0x66>
 80036d2:	4630      	mov	r0, r6
 80036d4:	f000 f852 	bl	800377c <_sbrk_r>
 80036d8:	6020      	str	r0, [r4, #0]
 80036da:	4629      	mov	r1, r5
 80036dc:	4630      	mov	r0, r6
 80036de:	f000 f84d 	bl	800377c <_sbrk_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d018      	beq.n	8003718 <_malloc_r+0xa4>
 80036e6:	1cc4      	adds	r4, r0, #3
 80036e8:	f024 0403 	bic.w	r4, r4, #3
 80036ec:	42a0      	cmp	r0, r4
 80036ee:	d10d      	bne.n	800370c <_malloc_r+0x98>
 80036f0:	6025      	str	r5, [r4, #0]
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 f853 	bl	800379e <__malloc_unlock>
 80036f8:	f104 000b 	add.w	r0, r4, #11
 80036fc:	1d23      	adds	r3, r4, #4
 80036fe:	f020 0007 	bic.w	r0, r0, #7
 8003702:	1ac3      	subs	r3, r0, r3
 8003704:	d00e      	beq.n	8003724 <_malloc_r+0xb0>
 8003706:	425a      	negs	r2, r3
 8003708:	50e2      	str	r2, [r4, r3]
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4630      	mov	r0, r6
 8003710:	f000 f834 	bl	800377c <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d1eb      	bne.n	80036f0 <_malloc_r+0x7c>
 8003718:	230c      	movs	r3, #12
 800371a:	6033      	str	r3, [r6, #0]
 800371c:	4630      	mov	r0, r6
 800371e:	f000 f83e 	bl	800379e <__malloc_unlock>
 8003722:	2000      	movs	r0, #0
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	bf00      	nop
 8003728:	20000098 	.word	0x20000098
 800372c:	20000094 	.word	0x20000094

08003730 <_realloc_r>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	4607      	mov	r7, r0
 8003734:	4615      	mov	r5, r2
 8003736:	460e      	mov	r6, r1
 8003738:	b921      	cbnz	r1, 8003744 <_realloc_r+0x14>
 800373a:	4611      	mov	r1, r2
 800373c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003740:	f7ff bf98 	b.w	8003674 <_malloc_r>
 8003744:	b91a      	cbnz	r2, 800374e <_realloc_r+0x1e>
 8003746:	f7ff ff47 	bl	80035d8 <_free_r>
 800374a:	4628      	mov	r0, r5
 800374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374e:	f000 f827 	bl	80037a0 <_malloc_usable_size_r>
 8003752:	4285      	cmp	r5, r0
 8003754:	d90e      	bls.n	8003774 <_realloc_r+0x44>
 8003756:	4629      	mov	r1, r5
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff ff8b 	bl	8003674 <_malloc_r>
 800375e:	4604      	mov	r4, r0
 8003760:	b150      	cbz	r0, 8003778 <_realloc_r+0x48>
 8003762:	4631      	mov	r1, r6
 8003764:	462a      	mov	r2, r5
 8003766:	f7ff ff11 	bl	800358c <memcpy>
 800376a:	4631      	mov	r1, r6
 800376c:	4638      	mov	r0, r7
 800376e:	f7ff ff33 	bl	80035d8 <_free_r>
 8003772:	e001      	b.n	8003778 <_realloc_r+0x48>
 8003774:	4630      	mov	r0, r6
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003778:	4620      	mov	r0, r4
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800377c <_sbrk_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4c06      	ldr	r4, [pc, #24]	; (8003798 <_sbrk_r+0x1c>)
 8003780:	2300      	movs	r3, #0
 8003782:	4605      	mov	r5, r0
 8003784:	4608      	mov	r0, r1
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	f000 f814 	bl	80037b4 <_sbrk>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_sbrk_r+0x1a>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	b103      	cbz	r3, 8003796 <_sbrk_r+0x1a>
 8003794:	602b      	str	r3, [r5, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20002a34 	.word	0x20002a34

0800379c <__malloc_lock>:
 800379c:	4770      	bx	lr

0800379e <__malloc_unlock>:
 800379e:	4770      	bx	lr

080037a0 <_malloc_usable_size_r>:
 80037a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80037a4:	2800      	cmp	r0, #0
 80037a6:	bfbe      	ittt	lt
 80037a8:	1809      	addlt	r1, r1, r0
 80037aa:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80037ae:	18c0      	addlt	r0, r0, r3
 80037b0:	3804      	subs	r0, #4
 80037b2:	4770      	bx	lr

080037b4 <_sbrk>:
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <_sbrk+0x14>)
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	4602      	mov	r2, r0
 80037ba:	b909      	cbnz	r1, 80037c0 <_sbrk+0xc>
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <_sbrk+0x18>)
 80037be:	6019      	str	r1, [r3, #0]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	4402      	add	r2, r0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4770      	bx	lr
 80037c8:	2000009c 	.word	0x2000009c
 80037cc:	20002a38 	.word	0x20002a38

080037d0 <_init>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr

080037dc <_fini>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr
