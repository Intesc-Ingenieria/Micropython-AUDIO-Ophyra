
Test_6_microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000024c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db50  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229a  00000000  00000000  0002dc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  0002fea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c40  00000000  00000000  00030bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c0a  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9b7  00000000  00000000  0005243a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ff8  00000000  00000000  00061df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129de9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003758  00000000  00000000  00129e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f20 	.word	0x08003f20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08003f20 	.word	0x08003f20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_I2S_RxHalfCpltCallback>:
}

uint16_t txBuf[64];
uint16_t pdmRxBuf[34];

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 80004c0:	b480      	push	{r7}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint16_t runningsum = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	82fb      	strh	r3, [r7, #22]
	uint16_t *sinc_ptr = sincfilter;
 80004cc:	4b02      	ldr	r3, [pc, #8]	; (80004d8 <HAL_I2S_RxHalfCpltCallback+0x18>)
 80004ce:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0; i < 4 ; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e1a8      	b.n	8000828 <HAL_I2S_RxHalfCpltCallback+0x368>
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
		PDM_REPEAT_LOOP_16({
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	4aa2      	ldr	r2, [pc, #648]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80004e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <HAL_I2S_RxHalfCpltCallback+0x36>
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	881a      	ldrh	r2, [r3, #0]
 80004f0:	8afb      	ldrh	r3, [r7, #22]
 80004f2:	4413      	add	r3, r2
 80004f4:	82fb      	strh	r3, [r7, #22]
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	3302      	adds	r3, #2
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	4a9a      	ldr	r2, [pc, #616]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000500:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	0852      	lsrs	r2, r2, #1
 8000508:	b291      	uxth	r1, r2
 800050a:	4a97      	ldr	r2, [pc, #604]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800050c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	4a95      	ldr	r2, [pc, #596]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d004      	beq.n	800052a <HAL_I2S_RxHalfCpltCallback+0x6a>
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	8afb      	ldrh	r3, [r7, #22]
 8000526:	4413      	add	r3, r2
 8000528:	82fb      	strh	r3, [r7, #22]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	3302      	adds	r3, #2
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4a8d      	ldr	r2, [pc, #564]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000534:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	0852      	lsrs	r2, r2, #1
 800053c:	b291      	uxth	r1, r2
 800053e:	4a8a      	ldr	r2, [pc, #552]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	4a88      	ldr	r2, [pc, #544]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <HAL_I2S_RxHalfCpltCallback+0x9e>
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	8afb      	ldrh	r3, [r7, #22]
 800055a:	4413      	add	r3, r2
 800055c:	82fb      	strh	r3, [r7, #22]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	3302      	adds	r3, #2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a80      	ldr	r2, [pc, #512]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000568:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	0852      	lsrs	r2, r2, #1
 8000570:	b291      	uxth	r1, r2
 8000572:	4a7d      	ldr	r2, [pc, #500]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a7b      	ldr	r2, [pc, #492]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800057c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <HAL_I2S_RxHalfCpltCallback+0xd2>
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	4413      	add	r3, r2
 8000590:	82fb      	strh	r3, [r7, #22]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	3302      	adds	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	4a73      	ldr	r2, [pc, #460]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800059c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	0852      	lsrs	r2, r2, #1
 80005a4:	b291      	uxth	r1, r2
 80005a6:	4a70      	ldr	r2, [pc, #448]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80005a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	4a6e      	ldr	r2, [pc, #440]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80005b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <HAL_I2S_RxHalfCpltCallback+0x106>
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	881a      	ldrh	r2, [r3, #0]
 80005c0:	8afb      	ldrh	r3, [r7, #22]
 80005c2:	4413      	add	r3, r2
 80005c4:	82fb      	strh	r3, [r7, #22]
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3302      	adds	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4a66      	ldr	r2, [pc, #408]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80005d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	0852      	lsrs	r2, r2, #1
 80005d8:	b291      	uxth	r1, r2
 80005da:	4a63      	ldr	r2, [pc, #396]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80005dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4a61      	ldr	r2, [pc, #388]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d004      	beq.n	80005fa <HAL_I2S_RxHalfCpltCallback+0x13a>
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	8afb      	ldrh	r3, [r7, #22]
 80005f6:	4413      	add	r3, r2
 80005f8:	82fb      	strh	r3, [r7, #22]
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	3302      	adds	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4a59      	ldr	r2, [pc, #356]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000604:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	0852      	lsrs	r2, r2, #1
 800060c:	b291      	uxth	r1, r2
 800060e:	4a56      	ldr	r2, [pc, #344]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	4a54      	ldr	r2, [pc, #336]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <HAL_I2S_RxHalfCpltCallback+0x16e>
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	8afb      	ldrh	r3, [r7, #22]
 800062a:	4413      	add	r3, r2
 800062c:	82fb      	strh	r3, [r7, #22]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	3302      	adds	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	4a4c      	ldr	r2, [pc, #304]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000638:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	0852      	lsrs	r2, r2, #1
 8000640:	b291      	uxth	r1, r2
 8000642:	4a49      	ldr	r2, [pc, #292]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4a47      	ldr	r2, [pc, #284]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800064c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <HAL_I2S_RxHalfCpltCallback+0x1a2>
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	8afb      	ldrh	r3, [r7, #22]
 800065e:	4413      	add	r3, r2
 8000660:	82fb      	strh	r3, [r7, #22]
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	3302      	adds	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	4a3f      	ldr	r2, [pc, #252]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800066c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	0852      	lsrs	r2, r2, #1
 8000674:	b291      	uxth	r1, r2
 8000676:	4a3c      	ldr	r2, [pc, #240]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <HAL_I2S_RxHalfCpltCallback+0x1d6>
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	881a      	ldrh	r2, [r3, #0]
 8000690:	8afb      	ldrh	r3, [r7, #22]
 8000692:	4413      	add	r3, r2
 8000694:	82fb      	strh	r3, [r7, #22]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3302      	adds	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	0852      	lsrs	r2, r2, #1
 80006a8:	b291      	uxth	r1, r2
 80006aa:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <HAL_I2S_RxHalfCpltCallback+0x20a>
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	881a      	ldrh	r2, [r3, #0]
 80006c4:	8afb      	ldrh	r3, [r7, #22]
 80006c6:	4413      	add	r3, r2
 80006c8:	82fb      	strh	r3, [r7, #22]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3302      	adds	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	0852      	lsrs	r2, r2, #1
 80006dc:	b291      	uxth	r1, r2
 80006de:	4a22      	ldr	r2, [pc, #136]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 80006e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <HAL_I2S_RxHalfCpltCallback+0x23e>
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	8afb      	ldrh	r3, [r7, #22]
 80006fa:	4413      	add	r3, r2
 80006fc:	82fb      	strh	r3, [r7, #22]
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	3302      	adds	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000708:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	0852      	lsrs	r2, r2, #1
 8000710:	b291      	uxth	r1, r2
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800071c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	d004      	beq.n	8000732 <HAL_I2S_RxHalfCpltCallback+0x272>
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	8afb      	ldrh	r3, [r7, #22]
 800072e:	4413      	add	r3, r2
 8000730:	82fb      	strh	r3, [r7, #22]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	3302      	adds	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 800073c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	0852      	lsrs	r2, r2, #1
 8000744:	b291      	uxth	r1, r2
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000748:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_I2S_RxHalfCpltCallback+0x2a8>)
 8000750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d007      	beq.n	800076c <HAL_I2S_RxHalfCpltCallback+0x2ac>
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	4413      	add	r3, r2
 8000764:	82fb      	strh	r3, [r7, #22]
 8000766:	e001      	b.n	800076c <HAL_I2S_RxHalfCpltCallback+0x2ac>
 8000768:	20000248 	.word	0x20000248
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	3302      	adds	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4a3c      	ldr	r2, [pc, #240]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 8000776:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	0852      	lsrs	r2, r2, #1
 800077e:	b291      	uxth	r1, r2
 8000780:	4a39      	ldr	r2, [pc, #228]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 8000782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4a37      	ldr	r2, [pc, #220]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 800078a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <HAL_I2S_RxHalfCpltCallback+0x2e0>
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	8afb      	ldrh	r3, [r7, #22]
 800079c:	4413      	add	r3, r2
 800079e:	82fb      	strh	r3, [r7, #22]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	3302      	adds	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	0852      	lsrs	r2, r2, #1
 80007b2:	b291      	uxth	r1, r2
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <HAL_I2S_RxHalfCpltCallback+0x314>
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	8afb      	ldrh	r3, [r7, #22]
 80007d0:	4413      	add	r3, r2
 80007d2:	82fb      	strh	r3, [r7, #22]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	3302      	adds	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	0852      	lsrs	r2, r2, #1
 80007e6:	b291      	uxth	r1, r2
 80007e8:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 80007f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <HAL_I2S_RxHalfCpltCallback+0x348>
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	8afb      	ldrh	r3, [r7, #22]
 8000804:	4413      	add	r3, r2
 8000806:	82fb      	strh	r3, [r7, #22]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	3302      	adds	r3, #2
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 8000812:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	0852      	lsrs	r2, r2, #1
 800081a:	b291      	uxth	r1, r2
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <HAL_I2S_RxHalfCpltCallback+0x3a8>)
 800081e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i=0; i < 4 ; i++) {
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3301      	adds	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	2b03      	cmp	r3, #3
 800082c:	f67f ae56 	bls.w	80004dc <HAL_I2S_RxHalfCpltCallback+0x1c>
			}
			sinc_ptr++;
			pdmRxBuf[i] >>= 1;
		})
	}
	runningsum /= 16 ;
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	091b      	lsrs	r3, r3, #4
 8000834:	82fb      	strh	r3, [r7, #22]
	if (p >= 64){
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_I2S_RxHalfCpltCallback+0x3ac>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b3f      	cmp	r3, #63	; 0x3f
 800083c:	dd02      	ble.n	8000844 <HAL_I2S_RxHalfCpltCallback+0x384>
		p = 0;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_I2S_RxHalfCpltCallback+0x3ac>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
	}
	//txBuf[p] = filtro(runningsum);
	txBuf[p] = runningsum;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_I2S_RxHalfCpltCallback+0x3ac>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4909      	ldr	r1, [pc, #36]	; (8000870 <HAL_I2S_RxHalfCpltCallback+0x3b0>)
 800084a:	8afa      	ldrh	r2, [r7, #22]
 800084c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	p++;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_I2S_RxHalfCpltCallback+0x3ac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <HAL_I2S_RxHalfCpltCallback+0x3ac>)
 8000858:	6013      	str	r3, [r2, #0]
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000248 	.word	0x20000248
 800086c:	200000a8 	.word	0x200000a8
 8000870:	2000010c 	.word	0x2000010c

08000874 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint16_t runningsum = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	82fb      	strh	r3, [r7, #22]
		uint16_t *sinc_ptr = sincfilter;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_I2S_RxCpltCallback+0x18>)
 8000882:	613b      	str	r3, [r7, #16]
		for (uint8_t i=17; i < 20 ; i++) {
 8000884:	2311      	movs	r3, #17
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e1a8      	b.n	8000bdc <HAL_I2S_RxCpltCallback+0x368>
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
			PDM_REPEAT_LOOP_16({
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	4aa2      	ldr	r2, [pc, #648]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d004      	beq.n	80008aa <HAL_I2S_RxCpltCallback+0x36>
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	881a      	ldrh	r2, [r3, #0]
 80008a4:	8afb      	ldrh	r3, [r7, #22]
 80008a6:	4413      	add	r3, r2
 80008a8:	82fb      	strh	r3, [r7, #22]
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	3302      	adds	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4a9a      	ldr	r2, [pc, #616]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	0852      	lsrs	r2, r2, #1
 80008bc:	b291      	uxth	r1, r2
 80008be:	4a97      	ldr	r2, [pc, #604]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	4a95      	ldr	r2, [pc, #596]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d004      	beq.n	80008de <HAL_I2S_RxCpltCallback+0x6a>
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	8afb      	ldrh	r3, [r7, #22]
 80008da:	4413      	add	r3, r2
 80008dc:	82fb      	strh	r3, [r7, #22]
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	3302      	adds	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	4a8d      	ldr	r2, [pc, #564]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	0852      	lsrs	r2, r2, #1
 80008f0:	b291      	uxth	r1, r2
 80008f2:	4a8a      	ldr	r2, [pc, #552]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4a88      	ldr	r2, [pc, #544]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80008fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d004      	beq.n	8000912 <HAL_I2S_RxCpltCallback+0x9e>
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	881a      	ldrh	r2, [r3, #0]
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	4413      	add	r3, r2
 8000910:	82fb      	strh	r3, [r7, #22]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3302      	adds	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	4a80      	ldr	r2, [pc, #512]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 800091c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	0852      	lsrs	r2, r2, #1
 8000924:	b291      	uxth	r1, r2
 8000926:	4a7d      	ldr	r2, [pc, #500]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4a7b      	ldr	r2, [pc, #492]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <HAL_I2S_RxCpltCallback+0xd2>
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	8afb      	ldrh	r3, [r7, #22]
 8000942:	4413      	add	r3, r2
 8000944:	82fb      	strh	r3, [r7, #22]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3302      	adds	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4a73      	ldr	r2, [pc, #460]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000950:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	0852      	lsrs	r2, r2, #1
 8000958:	b291      	uxth	r1, r2
 800095a:	4a70      	ldr	r2, [pc, #448]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 800095c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4a6e      	ldr	r2, [pc, #440]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d004      	beq.n	800097a <HAL_I2S_RxCpltCallback+0x106>
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	881a      	ldrh	r2, [r3, #0]
 8000974:	8afb      	ldrh	r3, [r7, #22]
 8000976:	4413      	add	r3, r2
 8000978:	82fb      	strh	r3, [r7, #22]
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3302      	adds	r3, #2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	4a66      	ldr	r2, [pc, #408]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000984:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	0852      	lsrs	r2, r2, #1
 800098c:	b291      	uxth	r1, r2
 800098e:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000990:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d004      	beq.n	80009ae <HAL_I2S_RxCpltCallback+0x13a>
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	881a      	ldrh	r2, [r3, #0]
 80009a8:	8afb      	ldrh	r3, [r7, #22]
 80009aa:	4413      	add	r3, r2
 80009ac:	82fb      	strh	r3, [r7, #22]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	3302      	adds	r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	4a59      	ldr	r2, [pc, #356]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80009b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	0852      	lsrs	r2, r2, #1
 80009c0:	b291      	uxth	r1, r2
 80009c2:	4a56      	ldr	r2, [pc, #344]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80009c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	4a54      	ldr	r2, [pc, #336]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80009cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <HAL_I2S_RxCpltCallback+0x16e>
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	8afb      	ldrh	r3, [r7, #22]
 80009de:	4413      	add	r3, r2
 80009e0:	82fb      	strh	r3, [r7, #22]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3302      	adds	r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80009ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	0852      	lsrs	r2, r2, #1
 80009f4:	b291      	uxth	r1, r2
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 80009f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <HAL_I2S_RxCpltCallback+0x1a2>
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	881a      	ldrh	r2, [r3, #0]
 8000a10:	8afb      	ldrh	r3, [r7, #22]
 8000a12:	4413      	add	r3, r2
 8000a14:	82fb      	strh	r3, [r7, #22]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	0852      	lsrs	r2, r2, #1
 8000a28:	b291      	uxth	r1, r2
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <HAL_I2S_RxCpltCallback+0x1d6>
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	8afb      	ldrh	r3, [r7, #22]
 8000a46:	4413      	add	r3, r2
 8000a48:	82fb      	strh	r3, [r7, #22]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	0852      	lsrs	r2, r2, #1
 8000a5c:	b291      	uxth	r1, r2
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <HAL_I2S_RxCpltCallback+0x20a>
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	881a      	ldrh	r2, [r3, #0]
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	82fb      	strh	r3, [r7, #22]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	3302      	adds	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a88:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	0852      	lsrs	r2, r2, #1
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d004      	beq.n	8000ab2 <HAL_I2S_RxCpltCallback+0x23e>
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	4413      	add	r3, r2
 8000ab0:	82fb      	strh	r3, [r7, #22]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000abc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	0852      	lsrs	r2, r2, #1
 8000ac4:	b291      	uxth	r1, r2
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <HAL_I2S_RxCpltCallback+0x272>
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	881a      	ldrh	r2, [r3, #0]
 8000ae0:	8afb      	ldrh	r3, [r7, #22]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	82fb      	strh	r3, [r7, #22]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	3302      	adds	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000af0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	0852      	lsrs	r2, r2, #1
 8000af8:	b291      	uxth	r1, r2
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_I2S_RxCpltCallback+0x2a8>)
 8000b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d007      	beq.n	8000b20 <HAL_I2S_RxCpltCallback+0x2ac>
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	8afb      	ldrh	r3, [r7, #22]
 8000b16:	4413      	add	r3, r2
 8000b18:	82fb      	strh	r3, [r7, #22]
 8000b1a:	e001      	b.n	8000b20 <HAL_I2S_RxCpltCallback+0x2ac>
 8000b1c:	20000248 	.word	0x20000248
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3302      	adds	r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	0852      	lsrs	r2, r2, #1
 8000b32:	b291      	uxth	r1, r2
 8000b34:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4a37      	ldr	r2, [pc, #220]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d004      	beq.n	8000b54 <HAL_I2S_RxCpltCallback+0x2e0>
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	8afb      	ldrh	r3, [r7, #22]
 8000b50:	4413      	add	r3, r2
 8000b52:	82fb      	strh	r3, [r7, #22]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	3302      	adds	r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	0852      	lsrs	r2, r2, #1
 8000b66:	b291      	uxth	r1, r2
 8000b68:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <HAL_I2S_RxCpltCallback+0x314>
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	8afb      	ldrh	r3, [r7, #22]
 8000b84:	4413      	add	r3, r2
 8000b86:	82fb      	strh	r3, [r7, #22]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	0852      	lsrs	r2, r2, #1
 8000b9a:	b291      	uxth	r1, r2
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <HAL_I2S_RxCpltCallback+0x348>
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	8afb      	ldrh	r3, [r7, #22]
 8000bb8:	4413      	add	r3, r2
 8000bba:	82fb      	strh	r3, [r7, #22]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000bc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	0852      	lsrs	r2, r2, #1
 8000bce:	b291      	uxth	r1, r2
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_I2S_RxCpltCallback+0x3a8>)
 8000bd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i=17; i < 20 ; i++) {
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b13      	cmp	r3, #19
 8000be0:	f67f ae56 	bls.w	8000890 <HAL_I2S_RxCpltCallback+0x1c>
				}
				sinc_ptr++;
				pdmRxBuf[i] >>= 1;
			})
		}
		runningsum /= 16 ;
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	82fb      	strh	r3, [r7, #22]
		if (p >= 64){
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_I2S_RxCpltCallback+0x3ac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf0:	dd02      	ble.n	8000bf8 <HAL_I2S_RxCpltCallback+0x384>
			p = 0;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_I2S_RxCpltCallback+0x3ac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
		}
		//txBuf[p] = filtro(runningsum);
		txBuf[p] = runningsum;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2S_RxCpltCallback+0x3ac>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4909      	ldr	r1, [pc, #36]	; (8000c24 <HAL_I2S_RxCpltCallback+0x3b0>)
 8000bfe:	8afa      	ldrh	r2, [r7, #22]
 8000c00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		p++;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_I2S_RxCpltCallback+0x3ac>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_I2S_RxCpltCallback+0x3ac>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000248 	.word	0x20000248
 8000c20:	200000a8 	.word	0x200000a8
 8000c24:	2000010c 	.word	0x2000010c

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fb87 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f829 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 f947 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3a:	f000 f91d 	bl	8000e78 <MX_DMA_Init>
  MX_I2S2_Init();
 8000c3e:	f000 f8b7 	bl	8000db0 <MX_I2S2_Init>
  MX_DAC_Init();
 8000c42:	f000 f88b 	bl	8000d5c <MX_DAC_Init>
  MX_TIM6_Init();
 8000c46:	f000 f8e1 	bl	8000e0c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],17);
 8000c4a:	2211      	movs	r2, #17
 8000c4c:	4909      	ldr	r1, [pc, #36]	; (8000c74 <main+0x4c>)
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <main+0x50>)
 8000c50:	f001 fd80 	bl	8002754 <HAL_I2S_Receive_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <main+0x54>)
 8000c56:	f002 ffb3 	bl	8003bc0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <main+0x58>)
 8000c5e:	f000 fd14 	bl	800168a <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)txBuf, 64, DAC_ALIGN_12B_R);
 8000c62:	2300      	movs	r3, #0
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <main+0x5c>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <main+0x58>)
 8000c6e:	f000 fd5f 	bl	8001730 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <main+0x4a>
 8000c74:	20000248 	.word	0x20000248
 8000c78:	2000028c 	.word	0x2000028c
 8000c7c:	20000200 	.word	0x20000200
 8000c80:	200001ec 	.word	0x200001ec
 8000c84:	2000010c 	.word	0x2000010c

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2230      	movs	r2, #48	; 0x30
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 f93a 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000cfc:	23d2      	movs	r3, #210	; 0xd2
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f987 	bl	8003020 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d18:	f000 f91a 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2105      	movs	r1, #5
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fbe8 	bl	8003510 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d46:	f000 f903 	bl	8000f50 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <MX_DAC_Init+0x50>)
 8000d6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d72:	f000 fc68 	bl	8001646 <HAL_DAC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d7c:	f000 f8e8 	bl	8000f50 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d90:	f000 fdba 	bl	8001908 <HAL_DAC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d9a:	f000 f8d9 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001ec 	.word	0x200001ec
 8000dac:	40007400 	.word	0x40007400

08000db0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000db6:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <MX_I2S2_Init+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dc0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = 68000;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dd6:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <MX_I2S2_Init+0x58>)
 8000dd8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2S2_Init+0x50>)
 8000dee:	f001 fb71 	bl	80024d4 <HAL_I2S_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 f8aa 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000028c 	.word	0x2000028c
 8000e04:	40003800 	.word	0x40003800
 8000e08:	000109a0 	.word	0x000109a0

08000e0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e1c:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_TIM6_Init+0x68>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 524;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e22:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000e26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e30:	2209      	movs	r2, #9
 8000e32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e3c:	f002 fe70 	bl	8003b20 <HAL_TIM_Base_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e46:	f000 f883 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e58:	f002 ffba 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e62:	f000 f875 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000200 	.word	0x20000200
 8000e74:	40001000 	.word	0x40001000

08000e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_DMA_Init+0x4c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <MX_DMA_Init+0x4c>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_DMA_Init+0x4c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200e      	movs	r0, #14
 8000ea0:	f000 fb9b 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ea4:	200e      	movs	r0, #14
 8000ea6:	f000 fbb4 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f000 fb93 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	f000 fbac 	bl	8001612 <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_GPIO_Init+0x84>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_DAC_MspInit+0xdc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d158      	bne.n	8001080 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_DAC_MspInit+0xe0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	2310      	movs	r3, #16
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <HAL_DAC_MspInit+0xe4>)
 800101a:	f001 f8bf 	bl	800219c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_DAC_MspInit+0xec>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001026:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800102a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 800102e:	2240      	movs	r2, #64	; 0x40
 8001030:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 800103a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001046:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 800104a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001056:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001066:	f000 fd29 	bl	8001abc <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001070:	f7ff ff6e 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_DAC_MspInit+0xe8>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40007400 	.word	0x40007400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	2000018c 	.word	0x2000018c
 8001098:	40026088 	.word	0x40026088

0800109c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_I2S_MspInit+0x154>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 808c 	bne.w	80011e6 <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010ce:	2301      	movs	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fbde 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80010ea:	f7ff ff31 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a38      	ldr	r2, [pc, #224]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_I2S_MspInit+0x158>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001142:	2308      	movs	r3, #8
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001152:	2305      	movs	r3, #5
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4826      	ldr	r0, [pc, #152]	; (80011f8 <HAL_I2S_MspInit+0x15c>)
 800115e:	f001 f81d 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001162:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001174:	2305      	movs	r3, #5
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	481f      	ldr	r0, [pc, #124]	; (80011fc <HAL_I2S_MspInit+0x160>)
 8001180:	f001 f80c 	bl	800219c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_I2S_MspInit+0x164>)
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_I2S_MspInit+0x168>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_I2S_MspInit+0x164>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_I2S_MspInit+0x164>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_I2S_MspInit+0x164>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_I2S_MspInit+0x164>)
 800119e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011cc:	f000 fc76 	bl	8001abc <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80011d6:	f7ff febb 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_I2S_MspInit+0x164>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3738      	adds	r7, #56	; 0x38
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40003800 	.word	0x40003800
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020400 	.word	0x40020400
 8001200:	200000ac 	.word	0x200000ac
 8001204:	40026058 	.word	0x40026058

08001208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_TIM_Base_MspInit+0x3c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10d      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x40>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0x40>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_TIM_Base_MspInit+0x40>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40001000 	.word	0x40001000
 8001248:	40023800 	.word	0x40023800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f8a4 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Stream3_IRQHandler+0x10>)
 80012a6:	f000 fd0f 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000ac 	.word	0x200000ac

080012b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA1_Stream5_IRQHandler+0x10>)
 80012ba:	f000 fd05 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000018c 	.word	0x2000018c

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001316:	f7ff ffd7 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 fdd5 	bl	8003ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fc83 	bl	8000c28 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001330:	08003f60 	.word	0x08003f60
  ldr r2, =_sbss
 8001334:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001338:	200002d8 	.word	0x200002d8

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f92b 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	200f      	movs	r0, #15
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fdf2 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f943 	bl	800162e <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f90b 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000080 	.word	0x20000080
 80013dc:	20000088 	.word	0x20000088
 80013e0:	20000084 	.word	0x20000084

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000088 	.word	0x20000088
 8001408:	200002d4 	.word	0x200002d4

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200002d4 	.word	0x200002d4

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff3e 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff31 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e014      	b.n	8001682 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fc9f 	bl	8000fac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2202      	movs	r2, #2
 8001672:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	795b      	ldrb	r3, [r3, #5]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_DAC_Start+0x16>
 800169c:	2302      	movs	r3, #2
 800169e:	e040      	b.n	8001722 <HAL_DAC_Start+0x98>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80016d4:	2b3c      	cmp	r3, #60	; 0x3c
 80016d6:	d11d      	bne.n	8001714 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	e014      	b.n	8001714 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	213c      	movs	r1, #60	; 0x3c
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0202 	orr.w	r2, r2, #2
 8001712:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	795b      	ldrb	r3, [r3, #5]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_DAC_Start_DMA+0x22>
 800174e:	2302      	movs	r3, #2
 8001750:	e0ab      	b.n	80018aa <HAL_DAC_Start_DMA+0x17a>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2202      	movs	r2, #2
 800175c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12f      	bne.n	80017c4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_DAC_Start_DMA+0x184>)
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <HAL_DAC_Start_DMA+0x188>)
 8001772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_DAC_Start_DMA+0x18c>)
 800177a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800178a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d013      	beq.n	80017ba <HAL_DAC_Start_DMA+0x8a>
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d845      	bhi.n	8001824 <HAL_DAC_Start_DMA+0xf4>
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DAC_Start_DMA+0x76>
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80017a4:	e03e      	b.n	8001824 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3308      	adds	r3, #8
 80017ac:	613b      	str	r3, [r7, #16]
        break;
 80017ae:	e03c      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	330c      	adds	r3, #12
 80017b6:	613b      	str	r3, [r7, #16]
        break;
 80017b8:	e037      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3310      	adds	r3, #16
 80017c0:	613b      	str	r3, [r7, #16]
        break;
 80017c2:	e032      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a3d      	ldr	r2, [pc, #244]	; (80018c0 <HAL_DAC_Start_DMA+0x190>)
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a3c      	ldr	r2, [pc, #240]	; (80018c4 <HAL_DAC_Start_DMA+0x194>)
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <HAL_DAC_Start_DMA+0x198>)
 80017da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d013      	beq.n	800181a <HAL_DAC_Start_DMA+0xea>
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d817      	bhi.n	8001828 <HAL_DAC_Start_DMA+0xf8>
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_DAC_Start_DMA+0xd6>
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d005      	beq.n	8001810 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001804:	e010      	b.n	8001828 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3314      	adds	r3, #20
 800180c:	613b      	str	r3, [r7, #16]
        break;
 800180e:	e00c      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3318      	adds	r3, #24
 8001816:	613b      	str	r3, [r7, #16]
        break;
 8001818:	e007      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	331c      	adds	r3, #28
 8001820:	613b      	str	r3, [r7, #16]
        break;
 8001822:	e002      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        break;
 8001824:	bf00      	nop
 8001826:	e000      	b.n	800182a <HAL_DAC_Start_DMA+0xfa>
        break;
 8001828:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800183e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	f000 f9e5 	bl	8001c18 <HAL_DMA_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e010      	b.n	8001876 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001862:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68d8      	ldr	r0, [r3, #12]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	f000 f9d3 	bl	8001c18 <HAL_DMA_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e005      	b.n	80018a8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f043 0204 	orr.w	r2, r3, #4
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	080019a7 	.word	0x080019a7
 80018b8:	080019c9 	.word	0x080019c9
 80018bc:	080019e5 	.word	0x080019e5
 80018c0:	08001a4f 	.word	0x08001a4f
 80018c4:	08001a71 	.word	0x08001a71
 80018c8:	08001a8d 	.word	0x08001a8d

080018cc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	795b      	ldrb	r3, [r3, #5]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_DAC_ConfigChannel+0x18>
 800191c:	2302      	movs	r3, #2
 800191e:	e03c      	b.n	800199a <HAL_DAC_ConfigChannel+0x92>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2202      	movs	r2, #2
 800192a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4013      	ands	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	22c0      	movs	r2, #192	; 0xc0
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff ff89 	bl	80018cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	711a      	strb	r2, [r3, #4]
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff ff82 	bl	80018e0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff78 	bl	80018f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	711a      	strb	r2, [r3, #4]
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff ffd8 	bl	8001a12 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	711a      	strb	r2, [r3, #4]
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff ffd1 	bl	8001a26 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f043 0204 	orr.w	r2, r3, #4
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ffc7 	bl	8001a3a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	711a      	strb	r2, [r3, #4]
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fca0 	bl	800140c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e099      	b.n	8001c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e00f      	b.n	8001b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff fc87 	bl	800140c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d908      	bls.n	8001b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e078      	b.n	8001c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e8      	bne.n	8001afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_DMA_Init+0x158>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d117      	bne.n	8001bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fa6f 	bl	80020a4 <DMA_CheckFifoParam>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa26 	bl	8002038 <DMA_CalcBaseAndBitshift>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f010803f 	.word	0xf010803f

08001c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_DMA_Start_IT+0x26>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e040      	b.n	8001cc0 <HAL_DMA_Start_IT+0xa8>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12f      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9b8 	bl	8001fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	223f      	movs	r2, #63	; 0x3f
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0216 	orr.w	r2, r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_DMA_IRQHandler+0x258>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a92      	ldr	r2, [pc, #584]	; (8001f24 <HAL_DMA_IRQHandler+0x25c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01a      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0204 	bic.w	r2, r2, #4
 8001d1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2208      	movs	r2, #8
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2201      	movs	r2, #1
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2201      	movs	r2, #1
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2204      	movs	r2, #4
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0204 	orr.w	r2, r3, #4
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2210      	movs	r2, #16
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d043      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03c      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d018      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d024      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
 8001df6:	e01f      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 808e 	beq.w	8001f66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8086 	beq.w	8001f66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	2220      	movs	r2, #32
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d136      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0216 	bic.w	r2, r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x1da>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0208 	bic.w	r2, r2, #8
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	223f      	movs	r2, #63	; 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d07d      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
        }
        return;
 8001ede:	e078      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01c      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d030      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e02b      	b.n	8001f66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d027      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
 8001f1e:	e022      	b.n	8001f66 <HAL_DMA_IRQHandler+0x29e>
 8001f20:	20000080 	.word	0x20000080
 8001f24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0210 	bic.w	r2, r2, #16
 8001f44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d032      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d022      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d307      	bcc.n	8001fae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f2      	bne.n	8001f92 <HAL_DMA_IRQHandler+0x2ca>
 8001fac:	e000      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e000      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fd2:	bf00      	nop
    }
  }
}
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d108      	bne.n	800201c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201a:	e007      	b.n	800202c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b10      	subs	r3, #16
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <DMA_CalcBaseAndBitshift+0x64>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d909      	bls.n	800207a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
 8002078:	e007      	b.n	800208a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	aaaaaaab 	.word	0xaaaaaaab
 80020a0:	08003f48 	.word	0x08003f48

080020a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0x5a>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d856      	bhi.n	8002172 <DMA_CheckFifoParam+0xce>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <DMA_CheckFifoParam+0x28>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020ef 	.word	0x080020ef
 80020d4:	080020dd 	.word	0x080020dd
 80020d8:	08002173 	.word	0x08002173
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d046      	beq.n	8002176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e043      	b.n	8002176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f6:	d140      	bne.n	800217a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e03d      	b.n	800217a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d121      	bne.n	800214c <DMA_CheckFifoParam+0xa8>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d837      	bhi.n	800217e <DMA_CheckFifoParam+0xda>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <DMA_CheckFifoParam+0x70>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212b 	.word	0x0800212b
 800211c:	08002125 	.word	0x08002125
 8002120:	0800213d 	.word	0x0800213d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e030      	b.n	800218c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d025      	beq.n	8002182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e022      	b.n	8002182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214a:	e01c      	b.n	8002186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d903      	bls.n	800215a <DMA_CheckFifoParam+0xb6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002158:	e018      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e015      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e00b      	b.n	800218a <DMA_CheckFifoParam+0xe6>
      break;
 8002172:	bf00      	nop
 8002174:	e00a      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e008      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e006      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e004      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;   
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
    }
  } 
  
  return status; 
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e16b      	b.n	8002490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 815a 	bne.w	800248a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80b4 	beq.w	800248a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <HAL_GPIO_Init+0x310>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x314>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_GPIO_Init+0x318>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x222>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_GPIO_Init+0x31c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x320>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x328>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x32c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_GPIO_Init+0x330>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x20a>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023a6:	2308      	movs	r3, #8
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x310>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_GPIO_Init+0x334>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_GPIO_Init+0x334>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_GPIO_Init+0x334>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae90 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e128      	b.n	8002738 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a90      	ldr	r2, [pc, #576]	; (8002740 <HAL_I2S_Init+0x26c>)
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe fdcb 	bl	800109c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800251c:	f023 030f 	bic.w	r3, r3, #15
 8002520:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d060      	beq.n	80025f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800253a:	2310      	movs	r3, #16
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e001      	b.n	8002544 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b20      	cmp	r3, #32
 800254a:	d802      	bhi.n	8002552 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002552:	2001      	movs	r0, #1
 8002554:	f001 fa86 	bl	8003a64 <HAL_RCCEx_GetPeriphCLKFreq>
 8002558:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d125      	bne.n	80025b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fbb2 f2f3 	udiv	r2, r2, r3
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	3305      	adds	r3, #5
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e01f      	b.n	80025ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	fbb2 f2f3 	udiv	r2, r2, r3
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	3305      	adds	r3, #5
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e00e      	b.n	80025ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	461a      	mov	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	3305      	adds	r3, #5
 80025cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <HAL_I2S_Init+0x270>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e003      	b.n	80025fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d902      	bls.n	8002608 <HAL_I2S_Init+0x134>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	d907      	bls.n	8002618 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	f043 0210 	orr.w	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e08f      	b.n	8002738 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	ea42 0103 	orr.w	r1, r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	430a      	orrs	r2, r1
 800262a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002636:	f023 030f 	bic.w	r3, r3, #15
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6851      	ldr	r1, [r2, #4]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68d2      	ldr	r2, [r2, #12]
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6992      	ldr	r2, [r2, #24]
 800264e:	430a      	orrs	r2, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d161      	bne.n	8002728 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <HAL_I2S_Init+0x274>)
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a37      	ldr	r2, [pc, #220]	; (800274c <HAL_I2S_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_I2S_Init+0x1a4>
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_I2S_Init+0x27c>)
 8002676:	e001      	b.n	800267c <HAL_I2S_Init+0x1a8>
 8002678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4932      	ldr	r1, [pc, #200]	; (800274c <HAL_I2S_Init+0x278>)
 8002684:	428a      	cmp	r2, r1
 8002686:	d101      	bne.n	800268c <HAL_I2S_Init+0x1b8>
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_I2S_Init+0x27c>)
 800268a:	e001      	b.n	8002690 <HAL_I2S_Init+0x1bc>
 800268c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002690:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002694:	f023 030f 	bic.w	r3, r3, #15
 8002698:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_I2S_Init+0x278>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_I2S_Init+0x1d4>
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_I2S_Init+0x27c>)
 80026a6:	e001      	b.n	80026ac <HAL_I2S_Init+0x1d8>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ac:	2202      	movs	r2, #2
 80026ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a25      	ldr	r2, [pc, #148]	; (800274c <HAL_I2S_Init+0x278>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_I2S_Init+0x1ea>
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_I2S_Init+0x27c>)
 80026bc:	e001      	b.n	80026c2 <HAL_I2S_Init+0x1ee>
 80026be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ce:	d003      	beq.n	80026d8 <HAL_I2S_Init+0x204>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e001      	b.n	80026e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002702:	4313      	orrs	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	4313      	orrs	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002710:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_I2S_Init+0x278>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_I2S_Init+0x24c>
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_I2S_Init+0x27c>)
 800271e:	e001      	b.n	8002724 <HAL_I2S_Init+0x250>
 8002720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002724:	897a      	ldrh	r2, [r7, #10]
 8002726:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08002a59 	.word	0x08002a59
 8002744:	cccccccd 	.word	0xcccccccd
 8002748:	08002b6d 	.word	0x08002b6d
 800274c:	40003800 	.word	0x40003800
 8002750:	40003400 	.word	0x40003400

08002754 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_I2S_Receive_DMA+0x1a>
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0a1      	b.n	80028b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2S_Receive_DMA+0x2e>
 800277e:	2302      	movs	r3, #2
 8002780:	e099      	b.n	80028b6 <HAL_I2S_Receive_DMA+0x162>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d005      	beq.n	80027a2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	e089      	b.n	80028b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2204      	movs	r2, #4
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d002      	beq.n	80027ce <HAL_I2S_Receive_DMA+0x7a>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d10a      	bne.n	80027e4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	865a      	strh	r2, [r3, #50]	; 0x32
 80027e2:	e005      	b.n	80027f0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	4a32      	ldr	r2, [pc, #200]	; (80028c0 <HAL_I2S_Receive_DMA+0x16c>)
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	4a31      	ldr	r2, [pc, #196]	; (80028c4 <HAL_I2S_Receive_DMA+0x170>)
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_I2S_Receive_DMA+0x174>)
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002816:	d10a      	bne.n	800282e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	4619      	mov	r1, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002844:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002846:	f7ff f9e7 	bl	8001c18 <HAL_DMA_Start_IT>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00f      	beq.n	8002870 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0208 	orr.w	r2, r3, #8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e022      	b.n	80028b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800288c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	08002937 	.word	0x08002937
 80028c4:	080028f5 	.word	0x080028f5
 80028c8:	08002953 	.word	0x08002953

080028cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10e      	bne.n	8002928 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7fd ffa3 	bl	8000874 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7fd fdbb 	bl	80004c0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0203 	bic.w	r2, r2, #3
 800296e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f043 0208 	orr.w	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ffa5 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10e      	bne.n	80029f2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff6d 	bl	80028cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	1c9a      	adds	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fd ff12 	bl	8000874 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d13a      	bne.n	8002aea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d109      	bne.n	8002a92 <I2S_IRQHandler+0x3a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d102      	bne.n	8002a92 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ffb4 	bl	80029fa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d126      	bne.n	8002aea <I2S_IRQHandler+0x92>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d11f      	bne.n	8002aea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	f043 0202 	orr.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fefb 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d136      	bne.n	8002b64 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d109      	bne.n	8002b14 <I2S_IRQHandler+0xbc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d102      	bne.n	8002b14 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff45 	bl	800299e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d122      	bne.n	8002b64 <I2S_IRQHandler+0x10c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d11b      	bne.n	8002b64 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b3a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff febe 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4aa2      	ldr	r2, [pc, #648]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b86:	4ba2      	ldr	r3, [pc, #648]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b88:	e001      	b.n	8002b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a9b      	ldr	r2, [pc, #620]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ba4:	4b9a      	ldr	r3, [pc, #616]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba6:	e001      	b.n	8002bac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d004      	beq.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8099 	bne.w	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f925 	bl	8002e28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9c8 	bl	8002f88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d13a      	bne.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d035      	beq.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c16:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c18:	e001      	b.n	8002c1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4979      	ldr	r1, [pc, #484]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c26:	428b      	cmp	r3, r1
 8002c28:	d101      	bne.n	8002c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c2c:	e001      	b.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fe34 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	f040 80be 	bne.w	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80b8 	beq.w	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cac:	e001      	b.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4954      	ldr	r1, [pc, #336]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cba:	428b      	cmp	r3, r1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc0:	e001      	b.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fdf6 	bl	80028e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf4:	e084      	b.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8be 	bl	8002e8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8fd 	bl	8002f24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d12f      	bne.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02a      	beq.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d5a:	e001      	b.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4929      	ldr	r1, [pc, #164]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d6e:	e001      	b.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fda6 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d131      	bne.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02c      	beq.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002db4:	e001      	b.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dc8:	e001      	b.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002de2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff fd71 	bl	80028e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dfe:	e000      	b.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e00:	bf00      	nop
}
 8002e02:	bf00      	nop
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40003800 	.word	0x40003800
 8002e10:	40003400 	.word	0x40003400

08002e14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c99      	adds	r1, r3, #2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6251      	str	r1, [r2, #36]	; 0x24
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ffc9 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c99      	adds	r1, r3, #2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9e:	8819      	ldrh	r1, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <I2SEx_TxISR_I2SExt+0x22>
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eac:	e001      	b.n	8002eb2 <I2SEx_TxISR_I2SExt+0x26>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <I2SEx_TxISR_I2SExt+0x50>
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eda:	e001      	b.n	8002ee0 <I2SEx_TxISR_I2SExt+0x54>
 8002edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d101      	bne.n	8002ef0 <I2SEx_TxISR_I2SExt+0x64>
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eee:	e001      	b.n	8002ef4 <I2SEx_TxISR_I2SExt+0x68>
 8002ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff81 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40003800 	.word	0x40003800
 8002f20:	40003400 	.word	0x40003400

08002f24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68d8      	ldr	r0, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	1c99      	adds	r1, r3, #2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f3c:	b282      	uxth	r2, r0
 8002f3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d113      	bne.n	8002f80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff4a 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <I2SEx_RxISR_I2SExt+0x16>
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002f9c:	e001      	b.n	8002fa2 <I2SEx_RxISR_I2SExt+0x1a>
 8002f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa2:	68d8      	ldr	r0, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	1c99      	adds	r1, r3, #2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fae:	b282      	uxth	r2, r0
 8002fb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d121      	bne.n	800300e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <I2SEx_RxISR_I2SExt+0x50>
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002fd6:	e001      	b.n	8002fdc <I2SEx_RxISR_I2SExt+0x54>
 8002fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d101      	bne.n	8002fec <I2SEx_RxISR_I2SExt+0x64>
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002fea:	e001      	b.n	8002ff0 <I2SEx_RxISR_I2SExt+0x68>
 8002fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff03 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40003800 	.word	0x40003800
 800301c:	40003400 	.word	0x40003400

08003020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e264      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d075      	beq.n	800312a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	4ba3      	ldr	r3, [pc, #652]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00c      	beq.n	8003064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4ba0      	ldr	r3, [pc, #640]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003052:	2b08      	cmp	r3, #8
 8003054:	d112      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b9d      	ldr	r3, [pc, #628]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003062:	d10b      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b99      	ldr	r3, [pc, #612]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05b      	beq.n	8003128 <HAL_RCC_OscConfig+0x108>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e23f      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x74>
 8003086:	4b91      	ldr	r3, [pc, #580]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a90      	ldr	r2, [pc, #576]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x98>
 800309e:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a8a      	ldr	r2, [pc, #552]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a87      	ldr	r2, [pc, #540]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 80030b8:	4b84      	ldr	r3, [pc, #528]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a83      	ldr	r2, [pc, #524]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b81      	ldr	r3, [pc, #516]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a80      	ldr	r2, [pc, #512]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f998 	bl	800140c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe f994 	bl	800140c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e204      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xc0>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f984 	bl	800140c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe f980 	bl	800140c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1f0      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0xe8>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c4      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b56      	ldr	r3, [pc, #344]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4952      	ldr	r1, [pc, #328]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCC_OscConfig+0x2b0>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe f939 	bl	800140c <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe f935 	bl	800140c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a5      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4940      	ldr	r1, [pc, #256]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x2b0>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f918 	bl	800140c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe f914 	bl	800140c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e184      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d030      	beq.n	800326c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_RCC_OscConfig+0x2b4>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe f8f8 	bl	800140c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe f8f4 	bl	800140c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e164      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x200>
 800323e:	e015      	b.n	800326c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x2b4>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fe f8e1 	bl	800140c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324e:	f7fe f8dd 	bl	800140c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e14d      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a0 	beq.w	80033ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <HAL_RCC_OscConfig+0x2ac>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x2b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d121      	bne.n	80032fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_OscConfig+0x2b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_RCC_OscConfig+0x2b8>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c2:	f7fe f8a3 	bl	800140c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	e011      	b.n	80032ee <HAL_RCC_OscConfig+0x2ce>
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	42470000 	.word	0x42470000
 80032d4:	42470e80 	.word	0x42470e80
 80032d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fe f896 	bl	800140c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e106      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x4e4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x2f0>
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x32a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x312>
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b78      	ldr	r3, [pc, #480]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a77      	ldr	r2, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x32a>
 8003332:	4b75      	ldr	r3, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a74      	ldr	r2, [pc, #464]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	4b72      	ldr	r3, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a71      	ldr	r2, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d015      	beq.n	800337e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe f85b 	bl	800140c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f857 	bl	800140c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0c5      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ee      	beq.n	800335a <HAL_RCC_OscConfig+0x33a>
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fe f845 	bl	800140c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe f841 	bl	800140c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0af      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 809b 	beq.w	80034fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d05c      	beq.n	800348a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d141      	bne.n	800345c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x4ec>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe f815 	bl	800140c <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe f811 	bl	800140c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e081      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	4937      	ldr	r1, [pc, #220]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_OscConfig+0x4ec>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd ffea 	bl	800140c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd ffe6 	bl	800140c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e056      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x41c>
 800345a:	e04e      	b.n	80034fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_OscConfig+0x4ec>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd ffd3 	bl	800140c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346a:	f7fd ffcf 	bl	800140c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e03f      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x44a>
 8003488:	e037      	b.n	80034fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e032      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <HAL_RCC_OscConfig+0x4e8>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d028      	beq.n	80034f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d121      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d11a      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	3b01      	subs	r3, #1
 80034e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40007000 	.word	0x40007000
 8003508:	40023800 	.word	0x40023800
 800350c:	42470060 	.word	0x42470060

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fd ff04 	bl	800140c <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd ff00 	bl	800140c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fe64 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08003f38 	.word	0x08003f38
 80036d4:	20000080 	.word	0x20000080
 80036d8:	20000084 	.word	0x20000084

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	2300      	movs	r3, #0
 80036ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f4:	4b67      	ldr	r3, [pc, #412]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d00d      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x40>
 8003700:	2b08      	cmp	r3, #8
 8003702:	f200 80bd 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3a>
 800370e:	e0b7      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003712:	60bb      	str	r3, [r7, #8]
       break;
 8003714:	e0b7      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e0b4      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04d      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b58      	ldr	r3, [pc, #352]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	461a      	mov	r2, r3
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	ea02 0800 	and.w	r8, r2, r0
 800374a:	ea03 0901 	and.w	r9, r3, r1
 800374e:	4640      	mov	r0, r8
 8003750:	4649      	mov	r1, r9
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	014b      	lsls	r3, r1, #5
 800375c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003760:	0142      	lsls	r2, r0, #5
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	ebb0 0008 	subs.w	r0, r0, r8
 800376a:	eb61 0109 	sbc.w	r1, r1, r9
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	018b      	lsls	r3, r1, #6
 8003778:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800377c:	0182      	lsls	r2, r0, #6
 800377e:	1a12      	subs	r2, r2, r0
 8003780:	eb63 0301 	sbc.w	r3, r3, r1
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	00d9      	lsls	r1, r3, #3
 800378e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003792:	00d0      	lsls	r0, r2, #3
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	eb12 0208 	adds.w	r2, r2, r8
 800379c:	eb43 0309 	adc.w	r3, r3, r9
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	0259      	lsls	r1, r3, #9
 80037aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ae:	0250      	lsls	r0, r2, #9
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f7fc fd02 	bl	80001c8 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e04a      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	ea02 0400 	and.w	r4, r2, r0
 80037e6:	ea03 0501 	and.w	r5, r3, r1
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	014b      	lsls	r3, r1, #5
 80037f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037fc:	0142      	lsls	r2, r0, #5
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	1b00      	subs	r0, r0, r4
 8003804:	eb61 0105 	sbc.w	r1, r1, r5
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	018b      	lsls	r3, r1, #6
 8003812:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003816:	0182      	lsls	r2, r0, #6
 8003818:	1a12      	subs	r2, r2, r0
 800381a:	eb63 0301 	sbc.w	r3, r3, r1
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	00d9      	lsls	r1, r3, #3
 8003828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800382c:	00d0      	lsls	r0, r2, #3
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	1912      	adds	r2, r2, r4
 8003834:	eb45 0303 	adc.w	r3, r5, r3
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	0299      	lsls	r1, r3, #10
 8003842:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003846:	0290      	lsls	r0, r2, #10
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	f7fc fcb6 	bl	80001c8 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	60bb      	str	r3, [r7, #8]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003882:	60bb      	str	r3, [r7, #8]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	68bb      	ldr	r3, [r7, #8]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	007a1200 	.word	0x007a1200

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d035      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038c8:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fd9d 	bl	800140c <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038d6:	f7fd fd99 	bl	800140c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0b0      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e8:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	019a      	lsls	r2, r3, #6
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	071b      	lsls	r3, r3, #28
 8003900:	4955      	ldr	r1, [pc, #340]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003908:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800390e:	f7fd fd7d 	bl	800140c <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003916:	f7fd fd79 	bl	800140c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e090      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8083 	beq.w	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3e      	ldr	r2, [pc, #248]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800396a:	f7fd fd4f 	bl	800140c <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd fd4b 	bl	800140c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e062      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003984:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003998:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02f      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d028      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039be:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d114      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fd fd19 	bl	800140c <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd fd15 	bl	800140c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e02a      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d10d      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	490d      	ldr	r1, [pc, #52]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a42:	4905      	ldr	r1, [pc, #20]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	42470068 	.word	0x42470068
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	42470e40 	.word	0x42470e40

08003a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d13e      	bne.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d12f      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a9a:	617b      	str	r3, [r7, #20]
          break;
 8003a9c:	e02f      	b.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aaa:	d108      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e007      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae8:	0f1b      	lsrs	r3, r3, #28
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
          break;
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
          break;
 8003afc:	bf00      	nop
        }
      }
      break;
 8003afe:	bf00      	nop
    }
  }
  return frequency;
 8003b00:	697b      	ldr	r3, [r7, #20]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	00bb8000 	.word	0x00bb8000
 8003b18:	007a1200 	.word	0x007a1200
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e041      	b.n	8003bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fb5e 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 f896 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e046      	b.n	8003c66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_TIM_Base_Start+0xb4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d01d      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_TIM_Base_Start+0xb8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_TIM_Base_Start+0xbc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_TIM_Base_Start+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_TIM_Base_Start+0xc4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_Base_Start+0xc8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_TIM_Base_Start+0xcc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d010      	beq.n	8003c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e007      	b.n	8003c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d027      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d023      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d017      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <TIM_Base_SetConfig+0x128>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <TIM_Base_SetConfig+0x130>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <TIM_Base_SetConfig+0x134>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <TIM_Base_SetConfig+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0xf8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40001800 	.word	0x40001800
 8003dc8:	40001c00 	.word	0x40001c00
 8003dcc:	40002000 	.word	0x40002000

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e05a      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d01d      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40010400 	.word	0x40010400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40001800 	.word	0x40001800

08003ec8 <__libc_init_array>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	4d0d      	ldr	r5, [pc, #52]	; (8003f00 <__libc_init_array+0x38>)
 8003ecc:	4c0d      	ldr	r4, [pc, #52]	; (8003f04 <__libc_init_array+0x3c>)
 8003ece:	1b64      	subs	r4, r4, r5
 8003ed0:	10a4      	asrs	r4, r4, #2
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	42a6      	cmp	r6, r4
 8003ed6:	d109      	bne.n	8003eec <__libc_init_array+0x24>
 8003ed8:	4d0b      	ldr	r5, [pc, #44]	; (8003f08 <__libc_init_array+0x40>)
 8003eda:	4c0c      	ldr	r4, [pc, #48]	; (8003f0c <__libc_init_array+0x44>)
 8003edc:	f000 f820 	bl	8003f20 <_init>
 8003ee0:	1b64      	subs	r4, r4, r5
 8003ee2:	10a4      	asrs	r4, r4, #2
 8003ee4:	2600      	movs	r6, #0
 8003ee6:	42a6      	cmp	r6, r4
 8003ee8:	d105      	bne.n	8003ef6 <__libc_init_array+0x2e>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef0:	4798      	blx	r3
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	e7ee      	b.n	8003ed4 <__libc_init_array+0xc>
 8003ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efa:	4798      	blx	r3
 8003efc:	3601      	adds	r6, #1
 8003efe:	e7f2      	b.n	8003ee6 <__libc_init_array+0x1e>
 8003f00:	08003f58 	.word	0x08003f58
 8003f04:	08003f58 	.word	0x08003f58
 8003f08:	08003f58 	.word	0x08003f58
 8003f0c:	08003f5c 	.word	0x08003f5c

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
